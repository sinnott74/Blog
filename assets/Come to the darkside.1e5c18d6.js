var e=Object.defineProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,r=(t,n,a)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a;import"./vendor.0d5e54d3.js";import{N as o}from"./mdx-react.modern.650372c4.js";const s="Come to the darkside",i="Daniel Sinnott",l="https://i.imgur.com/mbaXHXs.png",p=23,d=["Technical","ReactJS","IBMCloud","ReduxJS","Sass"],h="Fri, 7th Sep 2018",c=new Date(1536333222270);function m(e){var s=e,{components:i}=s,l=((e,r)=>{var o={};for(var s in e)n.call(e,s)&&r.indexOf(s)<0&&(o[s]=e[s]);if(null!=e&&t)for(var s of t(e))r.indexOf(s)<0&&a.call(e,s)&&(o[s]=e[s]);return o})(s,["components"]);return o("wrapper",((e,o)=>{for(var s in o||(o={}))n.call(o,s)&&r(e,s,o[s]);if(t)for(var s of t(o))a.call(o,s)&&r(e,s,o[s]);return e})({components:i},l),o("h2",null,"Dark theme"),o("p",null,"With youtube recently adding a dark mode to to their Polymer web app and rolling this feature out to\ntheir android app in the last couple of days, I felt it was time to add a dark mode here. If you\nspend as much time looking at a screen as me than you'll know that dark themes are a god send. They\ncan reduce the strain on your eyes and can even help those that struggle to get to sleep at night."),o("p",null,o("img",{src:"https://i.imgur.com/pkaHIPA.png",alt:"Youtube dark theme",title:"Youtube dark theme",parentName:"p"})),o("p",null,"This update to the blog can be seen in the commit - ",o("a",{href:"https://github.com/sinnott74/BlogWebClient/commit/312c69e8df3c3ff69d6a1ba782380752af2c6d30",parentName:"p"},"312c69e")),o("h2",null,"Adding the Setting"),o("p",null,"Firstly we need a way for the user to toggle the dark theme. A new settings page was added to house\nthe dark theme toggle and all future settings, oh the possibilities!"),o("h3",null,"Settings component"),o("p",null,"Our settings component will have a single toggle switch that will control the dark theme. We're\nusing ",o("a",{href:"https://react-md.mlaursen.com/",parentName:"p"},"React-MD")," which nicely implements the Material Design spec & allows for a lot of style\ncustomisation."),o("p",null,"The component is fairly simple. As you can see from the ",o("inlineCode",{parentName:"p"},"PropTypes"),", it takes in the boolean value\nfor the dark theme & a function to call when the theme is when the theme is toggled. This component\nis very much just a dumb view."),o("pre",null,o("code",{className:"language-jsx",parentName:"pre"},'// settings.component.jsx\nimport React from "react";\nimport PropTypes from "prop-types";\nimport "./Settings.css";\nimport Switch from "react-md/lib/SelectionControls/Switch";\n\nexport default class Settings extends React.Component {\n    render() {\n        return (\n            <div className="settings">\n                <Switch\n                    id="darkTheme"\n                    type="switch"\n                    label="Dark theme"\n                    name="darkTheme"\n                    labelBefore\n                    checked={this.props.darkTheme}\n                    onChange={this.props.handleDarkThemeChange}\n                />\n            </div>\n        );\n    }\n}\n\nSettings.propTypes = {\n    darkTheme: PropTypes.bool,\n    handleDarkThemeChange: PropTypes.func.isRequired,\n};\n')),o("h3",null,"Adding some logic and state"),o("p",null,"The components logic and stage is wired up using ",o("a",{href:"https://redux.js.org/",parentName:"p"},"ReduxJS"),". We're using ",o("inlineCode",{parentName:"p"},"mapStateToProps")," to wire up\nthe dark theme value stored in the state to the ",o("inlineCode",{parentName:"p"},"darkTheme")," value passed into the component. Next\n",o("inlineCode",{parentName:"p"},"mapDispatchToProps")," specifies that we should dispatch the ",o("inlineCode",{parentName:"p"},"toggleDarkTheme")," function when our\ncomponents calls the ",o("inlineCode",{parentName:"p"},"handleDarkThemeChange")," function."),o("pre",null,o("code",{className:"language-jsx",parentName:"pre"},'// settings.container.jsx\nimport Settings from "core/components/Settings";\nimport { connect } from "react-redux";\nimport { isDarkTheme, toggleDarkTheme } from "core/ducks/settings";\n\nconst mapStateToProps = (state) => ({\n    darkTheme: isDarkTheme(state),\n});\n\nconst mapDispatchToProps = {\n    handleDarkThemeChange: toggleDarkTheme,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n')),o("p",null,"The settings redux file is following the ",o("a",{href:"https://medium.com/@scbarrus/the-ducks-file-structure-for-redux-d63c41b7035c",parentName:"p"},"Ducks pattern")," & includes a reducer registry as a nice way\nto load reducers into the redux store asynchronously."),o("p",null,"As reducers go, it's a fairly simple one. There's only one action, which is to toggle them dark\nmode. The value of the dark theme is initially read from local storage and persisted back there\nevery time its toggled."),o("pre",null,o("code",{className:"language-js",parentName:"pre"},'// settings.ducks.js\nimport reducerRegistry from "core/redux/ReducerRegistry";\n\n/*\n * Sidenav actions\n */\nconst TOGGLE_DARKTHEME = "TOGGLE_DARKTHEME";\n\n/**\n * Reducer\n */\nlet initialState = {\n    darkTheme: localStorage.getItem("darkTheme") === "true" || false,\n};\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case TOGGLE_DARKTHEME:\n            let darkTheme = !state.darkTheme;\n            localStorage.setItem("darkTheme", darkTheme);\n            return {\n                ...state,\n                darkTheme: darkTheme,\n            };\n        default:\n            return state;\n    }\n}\n\n/**\n * Action Creators\n */\nexport function toggleDarkTheme() {\n    return {\n        type: TOGGLE_DARKTHEME,\n    };\n}\n\n/**\n * Selectors\n */\nexport function isDarkTheme(state) {\n    return state.settings.darkTheme;\n}\n\nreducerRegistry.register("settings", reducer);\n')),o("h2",null,"Getting stylish"),o("p",null,"My root component - ",o("inlineCode",{parentName:"p"},"App.jsx")," is connected to the settings store and updates whenever the\n",o("inlineCode",{parentName:"p"},"darkTheme")," value updates. It simply adds a ",o("inlineCode",{parentName:"p"},".dark")," class to the HTML element whenever darkTheme is\nset. Various other sass files were updates to take this class into account."),o("p",null,"The background colour and the text colour needed to be updated depending on the theme. E.g."),o("pre",null,o("code",{className:"language-css",parentName:"pre"},'// sass card component example with dark theme\n@import "core/style/variable";\n.card {\n    background: $background-color-light;\n}\n\n.dark .card {\n    background: $background-color-dark;\n}\n')),o("h2",null,"Let there be dark"),o("p",null,o("img",{src:"https://i.imgur.com/hDqtIAA.gif",alt:"Dark theme demo",title:"Dark theme demo",parentName:"p"})))}m.isMDXComponent=!0;export default m;export{i as author,c as created,h as date,p as id,l as imageurl,d as tags,s as title};
