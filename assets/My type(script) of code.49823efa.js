var e=Object.defineProperty,n=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable,a=(n,t,r)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[t]=r;import"./vendor.f315bbe5.js";import{N as s}from"./mdx-react.modern.e61303d7.js";const o="My type(script) of code",i="Daniel Sinnott",l="https://i.imgur.com/V2exSsi.png",p=18,c=["Monthly Challenge","Technical","Typescript","April"],u="Tue, 1st May 2018",m=new Date(1525194497752);function h(e){var o=e,{components:i}=o,l=((e,a)=>{var s={};for(var o in e)t.call(e,o)&&a.indexOf(o)<0&&(s[o]=e[o]);if(null!=e&&n)for(var o of n(e))a.indexOf(o)<0&&r.call(e,o)&&(s[o]=e[o]);return s})(o,["components"]);return s("wrapper",((e,s)=>{for(var o in s||(s={}))t.call(s,o)&&a(e,o,s[o]);if(n)for(var o of n(s))r.call(s,o)&&a(e,o,s[o]);return e})({components:i},l),s("h2",null,"Typescript"),s("p",null,"The technical goal for this month was to convert server for this blog from javascript to a\ntypescript. As this project grows & new features are added, it becomes quite difficult to prevent\ninadvertent side affects. Test suites & good documentation can only bring a project so far, but the\nability to move quickly is paramount. The less time spent investigating how something works, the\nmore time there is to create solutions to real world problems."),s("h3",null,"Migration"),s("p",null,"The migration to typescript was relatively painless and was done incrementally on a file by file\nbasis. I started by adding a fairly relaxed (not strict) ",s("inlineCode",{parentName:"p"},"tsconfig.json")),s("pre",null,s("code",{className:"language-typescript",parentName:"pre"},'{\n    "compilerOptions": {\n        "outDir": "./dist",\n        "allowJs": true,\n        "target": "es2017",\n        "noImplicitAny": true,\n    },\n    "include": [\n        "./src/**/*"\n    ]\n}\n')),s("p",null,"A build step then needs to be adde to convert your typescript to runnable javascript. A good\nlocation for this is ",s("inlineCode",{parentName:"p"},"package.json")," but your gulp script, webpack config file or any other build\nfile could be used."),s("pre",null,s("code",{className:"language-javascript",parentName:"pre"},'"scripts": {\n    "prestart": "tsc",\n    "start": "node dist/index.js",\n}\n')),s("p",null,"We can now slowly begin converting our files to typescript & slowly making our configuration more &\nmore strict to weed out any potential errors."),s("p",null,"Microsoft has useful ",s("a",{href:"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html",parentName:"p"},"migration documentation")," on their typescript site."),s("h3",null,"Features"),s("p",null,"Because typescript compiles to runnable javascript, it allows developers to use features that\nhaven't been implemented in NodeJS yet. A notable feature that I'm making use of in my ORM\ninfrastructure is ",s("a",{href:"/blog/17",parentName:"p"},"Decorators"),"."),s("p",null,"It allowed me to simply my model definition files & also allow the use of the models to by fully\ntyped. A quick comparison of the below files will allow you to see the difference & ease of\nunderstanding that this feature provides."),s("h4",null,"Old javascript ORM entity file"),s("pre",null,s("code",{className:"language-javascript",parentName:"pre"},'const ORM = require("sinnott-orm");\nconst DataTypes = ORM.DataTypes;\n\nconst User = ORM.define(\n    "user",\n    {\n        username: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n            unique: true,\n        },\n        firstname: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n        },\n        lastname: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n        },\n        dob: {\n            type: DataTypes.TIMESTAMP,\n            notNull: true,\n        },\n    },\n    {\n        customAttributes: {\n            fullname: {\n                get: function () {\n                    return `${this.firstname} ${this.lastname}`;\n                },\n            },\n        },\n    },\n);\n\nUser.isUsernameAvailable = async function (username) {\n    let count = await User.count({ username });\n    if (count > 0) {\n        return false;\n    }\n    return true;\n};\n\nUser.readByUsername = async function (username) {\n    return User.findOne({ username: username });\n};\n\nmodule.exports = User;\n')),s("h4",null,"New typescript ORM entity file"),s("pre",null,s("code",{className:"language-typescript",parentName:"pre"},'import { Entity, Column, DerivedColumn, BaseModel, STRING, TIMESTAMP } from "sinnott-orm-typed";\nimport InformationalException from "../exception/InformationalException";\n\n@Entity()\nexport default class User extends BaseModel {\n    @Column({ type: STRING, notNull: true, length: 30 })\n    username: string;\n\n    @Column({ type: STRING, notNull: true, length: 30 })\n    firstname: string;\n\n    @Column({ type: STRING, notNull: true, length: 30 })\n    lastname: string;\n\n    @Column({ type: TIMESTAMP, notNull: true })\n    dob: Date;\n\n    @DerivedColumn({\n        get: function () {\n            return `${this.firstname} ${this.lastname}`;\n        },\n    })\n    fullname: string;\n\n    async beforeSave() {\n        const isUsernameAvailable = await User.isUsernameAvailable(this.username);\n        if (!isUsernameAvailable) {\n            throw new InformationalException("Duplicate username");\n        }\n    }\n\n    /**\n     * Checks if a username hasn\'t already been taken\n     * @param username\n     */\n    static async isUsernameAvailable(username: string) {\n        const count = await User.count({ username });\n        return !(count > 0);\n    }\n\n    /**\n     * Reads a User by their username\n     * @param username\n     */\n    static async readByUsername(username: string) {\n        return User.findOne<User>({ username: username });\n    }\n}\n')),s("h3",null,"Benchmarks"),s("p",null,"Strong typing may be a pleasure to work with from a development point of view, but if it impacted\nperformance of the application there would be major questions about whether it'd be worth it."),s("p",null,"We can see from the benchmark results below that the performance of the javascript & typescript\nversions of the server are virtually identical. This is largely expected. We're using NodeJS 9+ so\nwe can get access to the latest & greatest features. The transpilation from javascript to typescript\nonly really affects the import statements & the decorators used. If however we were to transpile\ndown to a version of javascript which doesn't support advanced language features like async await\nfor instance, the performance may take a hit."),s("p",null,"The below benchmark was performed using ",s("a",{href:"https://httpd.apache.org/docs/2.4/programs/ab.html",parentName:"p"},"Apache Benchmark")," (ab), which is was incredibly simple to\nuse."),s("h4",null,"Javascript implementation"),s("pre",null,s("code",{parentName:"pre"},"ab -n 100 -c 5 https://*************/api/blogposts/17\nThis is ApacheBench, Version 2.3 <$Revision: 1807734 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking ************* (be patient).....done\n\n\nServer Software:\nServer Hostname:        *************\nServer Port:            443\nSSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES256-GCM-SHA384,2048,256\nTLS Server Name:        *************\n\nDocument Path:          /api/blogposts/17\nDocument Length:        8385 bytes\n\nConcurrency Level:      5\nTime taken for tests:   15.004 seconds\nComplete requests:      100\nFailed requests:        0\nTotal transferred:      887782 bytes\nHTML transferred:       838500 bytes\n**Requests per second:    6.67 [#/sec] (mean)**\nTime per request:       750.179 [ms] (mean)\nTime per request:       150.036 [ms] (mean, across all concurrent requests)\nTransfer rate:          57.78 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:      419  443  26.4    434     583\nProcessing:   271  288  32.0    281     570\nWaiting:      143  156  26.1    149     363\nTotal:        694  731  51.3    717    1153\n\nPercentage of the requests served within a certain time (ms)\n  50%    717\n  66%    725\n  75%    733\n  80%    740\n  90%    786\n  95%    802\n  98%    833\n  99%   1153\n 100%   1153 (longest request)\n")),s("h4",null,"Typescript Implementation"),s("pre",null,s("code",{parentName:"pre"},"ab  -n 100 -c 5 https://*************/api/blogposts/9\nThis is ApacheBench, Version 2.3 <$Revision: 1807734 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking ************* (be patient).....done\n\n\nServer Software:\nServer Hostname:        *************\nServer Port:            443\nSSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES256-GCM-SHA384,2048,256\nTLS Server Name:        *************\n\nDocument Path:          /api/blogposts/9\nDocument Length:        8400 bytes\n\nConcurrency Level:      5\nTime taken for tests:   14.810 seconds\nComplete requests:      100\nFailed requests:        0\nTotal transferred:      889256 bytes\nHTML transferred:       840000 bytes\nRequests per second:    6.75 [#/sec] (mean)\nTime per request:       740.517 [ms] (mean)\nTime per request:       148.103 [ms] (mean, across all concurrent requests)\nTransfer rate:          58.64 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:      416  435  19.8    428     548\nProcessing:   273  294  52.1    284     758\nWaiting:      144  164  48.5    153     597\nTotal:        692  729  57.6    715    1206\n\nPercentage of the requests served within a certain time (ms)\n  50%    715\n  66%    723\n  75%    732\n  80%    735\n  90%    775\n  95%    822\n  98%    840\n  99%   1206\n 100%   1206 (longest request)\n")))}h.isMDXComponent=!0;export default h;export{i as author,m as created,u as date,p as id,l as imageurl,c as tags,o as title};
