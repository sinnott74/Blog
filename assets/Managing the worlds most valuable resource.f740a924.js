var e=Object.defineProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,o=(t,n,a)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a;import"./vendor.c97b08d0.js";import{N as i}from"./mdx-react.modern.82e5f5db.js";const s="Managing the world's most valuable resource",l="Daniel Sinnott",r="https://i.imgur.com/qlIM4k7.png",u=10,h=["Monthly Challenge","Technical","February","Data","SQL"],p="Thu, 1st Mar 2018",c=new Date(1519948692714);function d(e){var s=e,{components:l}=s,r=((e,o)=>{var i={};for(var s in e)n.call(e,s)&&o.indexOf(s)<0&&(i[s]=e[s]);if(null!=e&&t)for(var s of t(e))o.indexOf(s)<0&&a.call(e,s)&&(i[s]=e[s]);return i})(s,["components"]);return i("wrapper",((e,i)=>{for(var s in i||(i={}))n.call(i,s)&&o(e,s,i[s]);if(t)for(var s of t(i))a.call(i,s)&&o(e,s,i[s]);return e})({components:l},r),i("p",null,"The technical challenge for February, as outlined in ",i("a",{href:"/blog/6",parentName:"p"},"One month at a time"),", was to do a complete\nrewrite of the Data Access Layer for this blog."),i("p",null,"The goal was to end up with an ORM like infrastructure that would let me easily work with my data\nmodel."),i("h2",null,"Influences"),i("p",null,"I browsed the source code of several javascript ORMs at the start of the month to gauge the size of\nthe mountain I was about to climb. The 2 which stood out to me were:"),i("ul",null,i("li",{parentName:"ul"},i("a",{href:"https://github.com/sequelize/sequelize",parentName:"li"},"Sequelize")," is a well established ORM which contains all the bells & whistles. Its no wonder\nthat this package has been downloaded 900,000+ in the last month."),i("li",{parentName:"ul"},i("a",{href:"https://github.com/1602/jugglingdb",parentName:"li"},"JugglingDB")," impressed me with its simplicity. Its also no wonder that it became part of\nStrongLoop's popular LoopBack framework.")),i("h2",null,"Requirements"),i("ul",null,i("li",{parentName:"ul"},"Ability to define database Entities/Tables."),i("li",{parentName:"ul"},"Ability to easily perform CRUD operations on those entities."),i("li",{parentName:"ul"},"Ability to define & work with entity associations / relationships / foreign references."),i("li",{parentName:"ul"},"Efficient persisting of data")),i("hr",null),i("h3",null,"Ability to define database Entities/Tables"),i("p",null,"The following is my definition for my User entity. Based on this definition, a database table\ndefinition & A User constructor is created, with getters & setters for the defined attributes. Each\nentity will be automatically given a primary key of ID."),i("p",null,"ORM.define API is defined as follows"),i("pre",null,i("code",{className:"language-javascript",parentName:"pre"},"ORM.define(ModelName, AttributeObject, Options)\nModelName: <String> The name of the Model/Entity/Database table\nAttribute: <Object> Contains key value pairings of Model attribute name to attribute definition\nOptions: <Object> Contains extra model options. Such as the custom attributes displayed below. The object is where the majority of the progressive enhancement to this infrastructure will take place. E.g. optimistic locking & temporal attributes (created_on & last_modified_on)\n")),i("p",null,"Custom Attributes allow for derived data to be accessible on the Model object."),i("pre",null,i("code",{className:"language-javascript",parentName:"pre"},'const ORM = require("sinnott-orm");\nconst DataTypes = ORM.DataTypes;\n\nconst User = ORM.define(\n    "user",\n    {\n        username: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n            unique: true,\n        },\n        firstname: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n        },\n        lastname: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n        },\n        dob: {\n            type: DataTypes.TIMESTAMP,\n            notNull: true,\n        },\n    },\n    {\n        customAttributes: {\n            fullname: {\n                get: function () {\n                    return `${this.firstname} ${this.lastname}`;\n                },\n            },\n        },\n    },\n);\n')),i("h3",null,"Ability to easily perform CRUD operations on those entities"),i("p",null,"The following is a snippet from this blog's BlogPostRouter. The post verb is responsible for\ncreating a new BlogPost. Its as simple as creating a new BlogPost & saving it."),i("pre",null,i("code",{className:"language-javascript",parentName:"pre"},'router.post("/", async function (req, res) {\n    const blogpostData = { ...req.body };\n    const blogPost = new BlogPost(blogpostData);\n    await blogPost.save();\n    res.json(blogPost);\n});\n')),i("p",null,"The infrastructure knows this is a brand new BlogPost & sends an SQL INSERT command to the database.\nAny further modification to blogPost must also be persisted by calling save. This will result in an\nSQL update."),i("h3",null,"Ability to define & work with entity associations / relationships / foreign references"),i("p",null,"The infrastructure allows for all three of the possible table relationships:"),i("ul",null,i("li",{parentName:"ul"},"One to One"),i("li",{parentName:"ul"},"One to Many"),i("li",{parentName:"ul"},"Many to One")),i("p",null,"Below is an example of a One to Many relationship."),i("pre",null,i("code",{className:"language-javascript",parentName:"pre"},'User.oneToMany(BlogPost, { as: "author" });\n')),i("p",null,"We are defining a One to Many relationship between User & BlogPost. i.e A User can have many\nBlogPosts. A foreign key reference to User is added onto the BlogPost entity. The 'as' option is\nalso defined, so we are saying the User associated with a BlogPost will be referred to as the\nAuthor."),i("p",null,"Below is an example of how to read a blog post & include is author. Calling save on the returned\nentity will attempt to save any changes to both the blogpost & the associated author."),i("pre",null,i("code",{className:"language-javascript",parentName:"pre"},'BlogPost.get(id, { includes: ["author"] });\n')),i("h3",null,"Efficient persisting of data"),i("p",null,"Calling save on highly nested entities may result in a large number of SQL insert / modify commands\nbeing executed. This could be very resource consuming & inefficient. What is no attributes on the\nentities had changed?"),i("p",null,"For this reason the ORM infrastructure has the concept of dirty data. It will only execute SQL\ncommands for an entity when it contains attributes who's values changed since the entity was read\nfrom the database or who's values were input by the user. This not only reduces the number of SQL\ncommands down to only what is necessary, but it reduces each individual SQL command down to updating\nonly the attributes which have changed."),i("hr",null),i("h2",null,"Final Points"),i("p",null,"The ORM infrastructure has been fully separated out from the Server directory into its own\ndirectory. This will allow me to update each independently."),i("p",null,"The ORM also nowhere near finished. This is the MVP for my Blog app, with the aim to progressively\nenhance the infrastructure as requirements see fit."))}d.isMDXComponent=!0;export default d;export{l as author,c as created,p as date,u as id,r as imageurl,h as tags,s as title};
