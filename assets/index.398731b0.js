var e=Object.defineProperty,n=Object.defineProperties,t=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable,i=(n,t,o)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[t]=o,l=(e,n)=>{for(var t in n||(n={}))a.call(n,t)&&i(e,t,n[t]);if(o)for(var t of o(n))r.call(n,t)&&i(e,t,n[t]);return e},s=(e,n)=>{var t={};for(var i in e)a.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&o)for(var i of o(e))n.indexOf(i)<0&&r.call(e,i)&&(t[i]=e[i]);return t};import{q as c,r as p,W as d,A as u,u as h,R as m,H as g,d as f,t as y,a as b,k as w,N as x,T as v,w as k,C as N,S as T,b as C,c as I,e as A,$ as P,G as R,f as S,B,g as D}from"./vendor.741606fd.js";const M=c.h1.withConfig({displayName:"styled__Heading1",componentId:"sc-1aodpf0-0"})(["font-family:",";color:",";font-weight:300;margin:0;font-size:",";"],(e=>e.theme.typography.fontFamily),(e=>e.alternative?e.theme.palette.background.main:e.theme.palette.text.main),(e=>3.75*e.theme.typography.fontSize+"px")),G=c.h2.withConfig({displayName:"styled__Heading2",componentId:"sc-1aodpf0-1"})(["font-family:",";color:",";font-weight:300;margin:0;font-size:",";"],(e=>e.theme.typography.fontFamily),(e=>e.alternative?e.theme.palette.background.main:e.theme.palette.text.main),(e=>2.5*e.theme.typography.fontSize+"px")),E=c.h3.withConfig({displayName:"styled__Heading3",componentId:"sc-1aodpf0-2"})(["font-family:",";color:",";font-weight:400;margin:0;font-size:",";"],(e=>e.theme.typography.fontFamily),(e=>e.alternative?e.theme.palette.background.main:e.theme.palette.text.main),(e=>2.125*e.theme.typography.fontSize+"px")),j=c.h4.withConfig({displayName:"styled__Heading4",componentId:"sc-1aodpf0-3"})(["font-family:",";color:",";font-weight:",";margin:0;font-size:",";"],(e=>e.theme.typography.fontFamily),(e=>e.alternative?e.theme.palette.background.main:e.theme.palette.text.main),(e=>e.theme.typography.fontWeight),(e=>1.5*e.theme.typography.fontSize+"px")),O=c.h5.withConfig({displayName:"styled__Heading5",componentId:"sc-1aodpf0-4"})(["font-family:",";color:",";font-weight:400;margin:0;font-size:",";"],(e=>e.theme.typography.fontFamily),(e=>e.alternative?e.theme.palette.background.main:e.theme.palette.text.main),(e=>1.25*e.theme.typography.fontSize+"px")),_=c.h6.withConfig({displayName:"styled__Heading6",componentId:"sc-1aodpf0-5"})(["font-family:",";color:",";font-weight:500;margin:0;font-size:",";"],(e=>e.theme.typography.fontFamily),(e=>e.alternative?e.theme.palette.background.main:e.theme.palette.text.main),(e=>`${e.theme.typography.fontSize}px`)),q=c.p.withConfig({displayName:"styled__Text",componentId:"sc-1aodpf0-6"})(["font-family:",";color:",";font-weight:400;margin:0;line-height:",";font-size:",";"],(e=>e.theme.typography.fontFamily),(e=>{const n=e.secondary?"lighter":"main";return e.alternative?e.theme.palette.background[n]:e.theme.palette.text[n]}),(e=>1.5*e.theme.typography.fontSize+"px"),(e=>`${e.theme.typography.fontSize}px`)),L=c.hr.withConfig({displayName:"styled__Line",componentId:"sc-zc5id6-0"})(["background-color:",";border:0px;width:50%;height:",";border-radius:5px;max-width:430px;clear:both;"],(e=>e.theme.palette.primary.main),(e=>e.theme.spacing+"px"));const H=d`
from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
`,F=u`
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    top: 0;
    left: 0;
    position: absolute;
    animation: ${e=>e.animate?u`
                  ${"0.5s"} ${H}
              `:""};
`,W=c.div.withConfig({displayName:"styled__Container",componentId:"sc-dr5vhf-0"})(["position:relative;width:100%;height:100%;padding-top:",";"],(({ratio:e})=>100*e+"%")),z=c((function(e){return p.exports.createElement("svg",l({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1000 500",preserveAspectRatio:"xMidYMin slice"},e),p.exports.createElement("path",{d:"M0,0h1000v500H0",fill:"#DCDCDC"}))})).withConfig({displayName:"styled__Placeholder",componentId:"sc-dr5vhf-1"})([""," animation-fill-mode:backwards;"],F),U=c.img.withConfig({displayName:"styled__Initial",componentId:"sc-dr5vhf-2"})([""," animation-fill-mode:backwards;"],F),J=c.img.withConfig({displayName:"styled__Lazy",componentId:"sc-dr5vhf-3"})([""," opacity:0;animation-fill-mode:forwards;"],F),V=({src:e,initialSrc:n,alt:t,title:o,className:a,onClick:r,heightToWidthRatio:i})=>{const[l,s]=h({triggerOnce:!0}),[c,d]=p.exports.useState(!0),[u,g]=p.exports.useState(!1),[f,y]=p.exports.useState(!1),b=(({heightToWidthRatio:e,src:n})=>e||n&&n.split("#")[1]&&parseInt(n.split("#")[1])||.5)({heightToWidthRatio:i,src:e});return m.createElement(W,{ratio:b,className:a,ref:l,onClick:r},c&&m.createElement(z,null),n&&m.createElement(U,{src:n,alt:t,title:o,animate:u,onLoad:()=>{g(!0)},onAnimationEnd:()=>{d(!1)}}),s&&m.createElement(J,{src:e,alt:t,title:o,animate:f,onLoad:()=>{y(!0)},onAnimationEnd:()=>{d(!1),g(!1)}}))},Y="light",X="dark",$=(()=>{const e=localStorage&&localStorage.getItem("prefers-color-scheme")||"";return e===Y||e===X?e:null})()||(window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?X:Y),K=p.exports.createContext({scheme:$,setScheme:()=>{},toggleScheme:()=>{},isDarkMode:!1}),Q=({children:e})=>{const[n,t]=p.exports.useState($);p.exports.useEffect((()=>{localStorage&&localStorage.setItem("prefers-color-scheme",n)}),[n]);const o=p.exports.useCallback((()=>{t((e=>e===Y?X:Y))}),[]),a=n===X;return m.createElement(K.Provider,{value:{scheme:Y,setScheme:t,toggleScheme:o,isDarkMode:a}},e)},Z=()=>p.exports.useContext(K),ee=(e,n)=>"object"==typeof n?n[e]||void 0:n,ne=(e,n,t)=>{const o=n(),a=n(ee("mobile",t)),r=n(ee("tablet",t)),i=n(ee("desktop",t)),l=n(ee("wide",t));return u`
        ${`${e}: ${o}`};

        @media (min-width: 1920px) {
            ${`${e}: ${l}`};
        }
        @media (max-width: 1920px) {
            ${`${e}:${i}`};
        }
        @media (max-width: 1024px) {
            ${`${e}: ${r}`};
        }
        @media (max-width: 768px) {
            ${`${e}: ${a}`};
        }
    `},te={start:"initial",center:"center"},oe=(e="start")=>{var n;return null!=(n=te[e])?n:te.start},ae={none:0,xxsmall:.25,xsmall:.5,small:1,medium:2,large:4,xlarge:8,xxlarge:16},re=(e,n=1)=>(t="small")=>{var o;const a=null!=(o=ae[t])?o:1;return e*a*n+"px;"},ie={full:"100%"},le=e=>e&&ie[e]||"",se=e=>m.createElement(ce,l({as:e.component},e)),ce=c.div.withConfig({displayName:"Box__BoxInner",componentId:"sc-jeb5f0-0"})(["position:relative;"," "," display:flex;flex-direction:column;overflow:auto;"," "," "," "," "," "," margin:0;background-color:",";"],(e=>ne("width",le,e.width)),(e=>ne("height",le,e.height)),(e=>ne("align-items",oe,e.align)),(e=>ne("padding",re(e.theme.spacing),e.spacing)),(e=>e.spacingTop?ne("padding-top",re(e.theme.spacing),e.spacingTop):""),(e=>e.spacingRight?ne("padding-right",re(e.theme.spacing),e.spacingRight):""),(e=>e.spacingBottom?ne("padding-bottom",re(e.theme.spacing),e.spacingBottom):""),(e=>e.spacingLeft?ne("padding-left",re(e.theme.spacing),e.spacingLeft):""),(e=>{return e.background&&(n=e.background,e.theme.palette.background[n]);var n})),pe=c(se).withConfig({displayName:"styled__InnerCard",componentId:"sc-9cr8br-0"})(["transition-duration:0.15s;transition-property:box-shadow;border-radius:",";border-left:",";box-shadow:",";&:hover{box-shadow:",";}"],(e=>e.rounded?"4px":0),(e=>e.accent?`${e.theme.spacing/2}px solid ${e.theme.palette.primary.main}`:"none"),(e=>e.raised?e.theme.shadow.z1:"none"),(e=>e.hover?e.theme.shadow.z2:"")),de=e=>m.createElement(pe,l({background:"lighter"},e)),ue=c.div.withConfig({displayName:"styled__InlineContainer",componentId:"sc-1ifzyou-0"})([""," "," display:flex;flex-wrap:wrap;flex-direction:row;",""],(e=>ne("margin-left",re(e.theme.spacing,-1),e.spacing)),(e=>ne("margin-top",re(e.theme.spacing,-1),e.spacing)),(e=>ne("justify-content",oe,e.align))),he=c.div.withConfig({displayName:"styled__InlineItem",componentId:"sc-1ifzyou-1"})(["justify-content:flex-start;display:block;min-width:0;"," ",""],(e=>ne("padding-left",re(e.theme.spacing),e.spacing)),(e=>ne("padding-top",re(e.theme.spacing),e.spacing))),me=m.forwardRef((({children:e,spacing:n,align:t},o)=>{const a=m.Children.map(e,(e=>m.createElement(he,{spacing:n},e)));return m.createElement(ue,{ref:o,spacing:n,align:t},a)})),ge=c.div.withConfig({displayName:"styled__StackContainer",componentId:"sc-anhu7z-0"})([""," max-width:100%;"],(e=>ne("margin-top",re(e.theme.spacing,-1),e.spacing))),fe=c.div.withConfig({displayName:"styled__StackItem",componentId:"sc-anhu7z-1"})([""," width:100%;display:flex;flex-direction:column;",""],(e=>ne("padding-top",re(e.theme.spacing),e.spacing)),(e=>ne("align-items",oe,e.align))),ye=m.forwardRef((({children:e,align:n,spacing:t},o)=>{const a=m.Children.map(e,(e=>m.createElement(fe,{align:n,spacing:t},e)));return m.createElement(ge,{ref:o,spacing:t},a)})),be=c.div.withConfig({displayName:"styled__TilesContainer",componentId:"sc-ih5y7z-0"})(["display:flex;flex-wrap:wrap;align-items:stretch;"," ",""],(e=>ne("margin-top",re(e.theme.spacing,-1),e.spacing)),(e=>ne("margin-left",re(e.theme.spacing,-1),e.spacing))),we=c.div.withConfig({displayName:"styled__TilesItemContainer",componentId:"sc-ih5y7z-1"})(["",""],(e=>ne("flex",((e=1)=>`0 0 ${100/e}%`),e.columns))),xe=c.div.withConfig({displayName:"styled__TilesItem",componentId:"sc-ih5y7z-2"})(["height:100%;min-width:0;"," ",""],(e=>ne("padding-left",re(e.theme.spacing),e.spacing)),(e=>ne("padding-top",re(e.theme.spacing),e.spacing))),ve=m.forwardRef((({children:e,columns:n=1,spacing:t},o)=>{const a=m.Children.map(e,(e=>m.createElement(we,{columns:n},m.createElement(xe,{spacing:t},e))));return m.createElement(be,{ref:o,spacing:t},a)})),ke=c.tr.withConfig({displayName:"styled__Row",componentId:"sc-1qnt8p1-0"})(["&:nth-child(odd){background-color:",";}"],(e=>e.theme.palette.background.main)),Ne=({children:e})=>m.createElement(se,null,m.createElement(q,null,e)),Te={h1:M,h2:G,h3:E,h4:j,h5:O,h6:_,img:V,p:q,hr:L,code:({children:e,className:o})=>{const{scheme:a}=Z(),r={light:b,dark:y}[a]||y,i=o?o.replace(/language-/,""):"markup";return m.createElement(g,(s=l({},f),c={theme:r,code:e.trim(),language:i},n(s,t(c))),(({className:e,style:n,tokens:t,getLineProps:o,getTokenProps:a})=>m.createElement(de,{forwardedAs:"pre",accent:!0,background:"darker",className:e},t.map(((e,n)=>m.createElement("div",l({key:n},o({line:e,key:n})),e.map(((e,n)=>m.createElement("span",l({key:n},a({token:e,key:n})))))))))));var s,c},pre:({children:e})=>m.createElement(m.Fragment,null,e),wrapper:e=>m.createElement(ye,l({spacing:"medium"},e)),li:({children:e})=>m.createElement(q,{as:"li"},e),ol:({children:e})=>m.createElement(se,{component:"ol",spacing:"none",spacingLeft:"medium"},e),ul:({children:e})=>m.createElement(se,{component:"ul",spacing:"none",spacingLeft:"medium"},e),tr:ke,td:({children:e})=>m.createElement("td",null,m.createElement(Ne,null,e)),th:({children:e})=>m.createElement("th",null,m.createElement(Ne,null,e)),blockquote:e=>m.createElement(de,l({forwardedAs:"blockquote",accent:!0,spacing:"medium",background:"lighter"},e))};let Ce;const Ie={},Ae=function(e,n){if(!n||0===n.length)return e();if(void 0===Ce){const e=document.createElement("link").relList;Ce=e&&e.supports&&e.supports("modulepreload")?"modulepreload":"preload"}return Promise.all(n.map((e=>{if(e in Ie)return;Ie[e]=!0;const n=e.endsWith(".css"),t=n?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${e}"]${t}`))return;const o=document.createElement("link");return o.rel=n?"stylesheet":Ce,n||(o.as="script",o.crossOrigin=""),o.href=e,document.head.appendChild(o),n?new Promise(((e,n)=>{o.addEventListener("load",e),o.addEventListener("error",n)})):void 0}))).then((()=>e()))},Pe=d`
  from {
    transform: rotate(0);
  }

  to {
    transform: rotate(450deg);
  }
`,Re=d`
  0% {
    stroke-dasharray: 2, 85.964;
    transform: rotate(0);
  }

  50% {
    stroke-dasharray: 65.973, 21.9911;
    stroke-dashoffset: 0;
  }

  100% {
    stroke-dasharray: 2, 85.964;
    stroke-dashoffset: -65.973;
    transform: rotate(90deg);
  }
`,Se=c.div.withConfig({displayName:"styled__Container",componentId:"sc-11yp0xg-0"})(["left:50%;top:50%;position:absolute;transform:translate(-50%,-50%);"]),Be=c.circle.withConfig({displayName:"styled__Circle",componentId:"sc-11yp0xg-1"})(["box-sizing:border-box;stroke:",";stroke-width:3px;transform-origin:50%;animation:"," 1.6s cubic-bezier(0.4,0,0.2,1) infinite,"," 1.6s linear infinite;"],(e=>e.theme.palette.primary.main),Re,Pe),De=({size:e=48,className:n})=>m.createElement(Se,{"data-testid":"spinner",className:n},m.createElement("svg",{"data-testid":"spinner-svg",viewBox:"0 0 32 32",width:e,height:e},m.createElement(Be,{cx:"16",cy:"16",r:"14",fill:"none"}))),Me=new Date(1517574696533);function Ge(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"As outlined in the post ",x("a",{href:"/blog/3",parentName:"p"},"So it begins")," (January Challege), the technical challenge for this month\nwas to get this blog up & running. My deliverable was a blogging web app that I could use to write,\nedit & read blogposts, but build in a way that I could progressively enhance."),x("p",null,"The ",x("a",{href:"https://github.com/sinnott74/sinnott",parentName:"p"},"source for this site")," can be found on Github."),x("hr",null),x("h2",null,"The Architecture"),x("p",null,"I chose the the classic client server model, with the two being fully separated to allow me to\ndevelop each independently. Date storage was of great concern over the month. I'd like to be able\nlook back on these post in the distant future & cringe, and also for these posts to be available to\nothers. A database hosted in the cloud was the conclusion."),x("hr",null),x("h2",null,"Client"),x("p",null,"In 2017 I spent a good chunk of time working with ",x("a",{href:"https://dojotoolkit.org/",parentName:"p"},"Dojo")," for work & ",x("a",{href:"https://www.polymer-project.org/",parentName:"p"},"PolymerJS")," in my spare time,\nbut the goal was to learn new things and I was becoming very frustrated with Polymer's constant API\n& concept changes. After a bit a research, ",x("a",{href:"https://reactjs.org/",parentName:"p"},"ReactJS"),", ",x("a",{href:"https://vuejs.org/",parentName:"p"},"VueJS")," & ",x("a",{href:"https://angularjs.org/",parentName:"p"},"AngularJS")," were the front running\nweb frameworks that I could get up and running with quickly & seemed to have a promising future\n(although given the rate of change in the web space, these could be obsolete by the end of the\nmonth). I had spent some time in 2016 learning the original AngularJS framework, so I still have a\nbad taste in my mouth over the compete rewrite & api breaking changes for Angular 2+, so that was\nquickly ruled out. Internally in work, React was being chosen for a large new project so it made to\nmost sense for me to become familiar with it."),x("p",null,"React is a javascript library for building user interfaces. It's declarative, component-based & uses\na one way data flow model. It was originally developed internally at facebook, but put into mass\nproduction at Instagram."),x("hr",null),x("h3",null,"State"),x("p",null,"I quickly set out developing my ",x("a",{href:"https://developers.google.com/web/updates/2015/11/app-shell",parentName:"p"},"App Shell"),". React's one way data flow model meant that state should\nbe stored at the highest needed point in the tree and flow downwards, but while creating my\napplication components like the NavBar, ToolBar & OptionsMenu, I realised that storing most state at\nthe root component level won't scale."),x("p",null,x("a",{href:"https://redux.js.org/",parentName:"p"},"Redux")," to the rescue. Redux is a predictable state container based on Facebook's Flux architecture.\nIt's state is tightly controller & can only be updated using Redux's infrastructure. Actions, which\ncan be thought of as events, are dispatched and the reducer associated with each action then has\npermission to update the application state/store.Here's a simple example used by my SideNav."),x("p",null,"Action is defined as:"),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'export const OPEN_SIDENAV = "OPEN_SIDENAV";\nexport function openSideNav() {\n    return {\n        type: OPEN_SIDENAV,\n    };\n}\n')),x("p",null,"My Header is connected to redux so it can dispatch actions"),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},"import React from 'react';\nimport { connect } from 'react-redux'\nimport { openSideNav } from '../../actions/sidenav';\nclass Header extends React.Component {\n....\n  render() {\n    return (\n     ...\n       <Button icon className=\"header__menu\"  onClick={this.props.handleMenuButtonClick}>menu</Button>\n     ...\n    )\n  }\n}\nconst mapDispatchToProps = {\n  handleMenuButtonClick: openSideNav\n}\nexport default connect(null, mapDispatchToProps)(Header)\n\n")),x("p",null,"The associated reducer updates the Redux store:"),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},"import { OPEN_SIDENAV } from '../../actions/sidenav';\n let initialState = {\n   opened : false\n }\n const sidenav = (state = initialState, action)  => {\n  switch (action.type) {\n    case OPEN_SIDENAV:\n      return {\n        ...state,\n        opened: true\n    default:\n      return state;\n  }\n}\nexport default sidenav;\n\n")),x("p",null,"Finally we tell the SideNav to subscribe to changes to the opened property:"),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},"import React from 'react';\nimport { connect } from \"react-redux\";\nclass SideNav extends React.Component {\n...\n}\nconst mapStateToProps = (state) =>({\n  opened: state.ui.sidenav.opened\n})\nexport default connect(mapStateToProps, null)(SideNav)\n")),x("p",null,"When the opened property changes, react will re-render my sidenav & open it"),x("hr",null),x("h3",null,"Build System"),x("p",null,"It important for any website to have a good user experience. UX is mostly focuses on user interface\n& user interaction, but it also encompasses site performance & working on as many devices as\npossible (think of it as casting a bigger net to catch more fish). You build system has a big\ninfluence on those final two points. A site should only download the resources needed to run that\nsite at that time. Downloading & running unnecessary delays the time to first paint & time to first\ninteraction and because of that ruins the experience."),x("p",null,"Most modern javascript library are written in the new ES2015+ syntax with feature such as classes or\nPromises. These feature won't work on older browsers. New syntax code needs to be transpiled in the\nolder syntax. This transpilation would need to happen a build time."),x("p",null,x("a",{href:"https://webpack.js.org/",parentName:"p"},"Webpack")," & React go together like peas & carrots (Forrest Gump reference). Webpack is a resource\nbundler. It takes all the files that is necessary to run your application and bundles them together.\nIt supports ",x("a",{href:"https://webpack.js.org/guides/tree-shaking/",parentName:"p"},"tree shaking")," to eliminate dead unnecessary code, and has a plugin architecture to add\nother tools to your build process such as javascript translation with ",x("a",{href:"https://babeljs.io/",parentName:"p"},"Babel"),"."),x("p",null,"Webpack was the obvious choice. Although there's lot of tutorials on webpack, its fairly confusing\nto set up. I had to guts of it fully up and running in the first week. I had all my required loaders\nconverting my assets & I have hot reloading configured in development mode. However, I wasn't happy\nwith the amount of dependencies in my package.json just for my build system. On the 20th day I\ndecided to convert my app to a Create React App (see ",x("a",{href:"https://github.com/sinnott74/Sinnott/commit/d66341b17a9fe86b79862660dc7cd5216298874c",parentName:"p"},"commit"),"), which I had initially shunned as it\nhid all the complexity of setting up webpack. It reduced the amount of dependencies my web app had &\nalso offloaded the maintenance of my build system to Facebook."),x("hr",null),x("h3",null,"Routing"),x("p",null,x("a",{href:"https://reacttraining.com/react-router/",parentName:"p"},"React Router")," was chosen an my client side router. It plays nicely with redux & when used in\nconjunction with ",x("a",{href:"https://github.com/thejameskyle/react-loadable",parentName:"p"},"React Loadable"),", allowed my code to be split based on route. The code for me\nentire application didn't need to be loaded, only what was needed for a given route."),x("p",null,"The example below is code taken from my routes configuration. It says tells Webpack to split the\ncode & gives it the name specified by webpackChunkName"),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'import React from "react";\nimport { Route, Switch } from "react-router";\nimport Loadable from "react-loadable";\nimport Spinner from "./components/Spinner";\nconst LoadableHomePage = Loadable({\n    loader: () => import(/* webpackChunkName: "indexPage" */ "./pages/HomePage"),\n    loading: Spinner,\n});\nconst LoadableBlogListPage = Loadable({\n    loader: () => import(/* webpackChunkName: "BlogListPage" */ "./pages/BlogListPage"),\n    loading: Spinner,\n});\nconst Routes = (props) => {\n    return (\n        <Switch className="main">\n            <Route exact path="/" component={LoadableHomePage} />\n            <Route exact path="/blog" component={LoadableBlogListPage} />\n        </Switch>\n    );\n};\nexport default Routes;\n')),x("hr",null),x("h3",null,"UI Component Library"),x("p",null,"I was spending too much of my time developing UI components & decided that it would be more prudent\nto use a UI Component Library. I quite enjoy the look & feel of Google's ",x("a",{href:"https://material.io/",parentName:"p"},"Material Design"),". This\ngave me the options of:"),x("ul",null,x("li",{parentName:"ul"},"Material-UI"),x("li",{parentName:"ul"},"MUI"),x("li",{parentName:"ul"},"React-MD")),x("p",null,"Out of the above 3 React-MD was the clear winner, I had all the components I felt I'd need & it was\nby far the smallest library."),x("hr",null),x("h3",null,"Blog Syntax"),x("p",null,"With all of the above in place I had my worker web app. The final hurdle I had to face was the\nformat I'd let users write their blog posts."),x("p",null,"Plain text would be too simple & unappealing visually. Letting HTML or a subset of HTML would allow\nthe nightmare of ",x("a",{href:"https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)",parentName:"p"},"XSS"),". I settled on allowing the users to write their blogs in MarkDown. It allowed\nfor some formatting without the headache of trying to catch unwanted code."),x("p",null,"The chosen library was ",x("a",{href:"https://www.npmjs.com/package/marked",parentName:"p"},"Marked"),". A highly performance & small markdown parser and compiler."),x("hr",null),x("h3",null,"Server Interaction"),x("p",null,"The client would interact with the server in a Rest-like manner. Sending GET, POST, PUT & DELETE\nrequests for resources."),x("hr",null),x("h2",null,"Server"),x("p",null,"There lots of options when it comes to serverside development. The main drivers for my selection\nwere:"),x("ul",null,x("li",{parentName:"ul"},"Learn somthing"),x("li",{parentName:"ul"},"Speed of development"),x("li",{parentName:"ul"},"Can be run for free or at least cheap")),x("p",null,"I decided to choose ",x("a",{href:"https://nodejs.org/",parentName:"p"},"NodeJs")," with ",x("a",{href:"https://expressjs.com/",parentName:"p"},"ExpressJs"),". Keeping the client & server using the same language\nshould allow me to share code between the 2 if needed."),x("hr",null),x("h3",null,"Data Layer"),x("p",null,"As my database I selected [Postresql] as I could avail of a free Tiny Turtle on ",x("a",{href:"https://www.elephantsql.com",parentName:"p"},"ElephantSQL"),", until\ni need a larger memory allocation. The module ",x("a",{href:"https://www.npmjs.com/package/pg",parentName:"p"},"PG")," gave me fine grained control over the SQL\nstatements sent to the server. I experimented with KnexJS but didn't like its transaction\ninfrastructure, mainly due to Node's callback based application flow. More on that in Transactions\nbelow. PG, along with the module SQL, gave me Parameterized query to help prevent SQL Injection."),x("hr",null),x("h3",null,"Transactions"),x("p",null,"It was frustrating coming for a Java world, where the concept of ThreadLocal make it easy to pass\ninformation around the system for a single transaction without having to include it in every method\ncall. The asynchronous nature of Node doesn't allow for this. I experimented with Continuation-Local\nStorage last year but found it very hit & miss. The context can easily be lost. Roll forward to this\nyear & the release of the experimental Node 8 API AsyncHooks allowed for this problem to be solved\nby the library ",x("a",{href:"https://github.com/vicanso/async-local-storage/",parentName:"p"},"async-local-storage"),". It wraps each asynchronous & keeps track of which call came\nfrom where, allowing for a creation of what is analogous to Thread in java. This allowed me to\nrequest a client for the Postgres pool, start a transaction & use that transaction for every\ndatabase call in a single HTTP request without having to pass a client or transaction object around."),x("p",null,"Here's an example of how I'm handling my transactions. It's using async await to handle promises in\na more readable way."),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'const als = require("./async-local-storage");\nconst uuidV4 = require("uuid/v4");\nconst database = require("../core/database"); // module which configures the DB connection\nconst expressTransactionMiddleware = async (req, res, next) => {\n    const client = await database.connect();\n    await client.query("BEGIN");\n    als.set("transactionID", uuidV4());\n    als.set("transaction", client);\n    await next();\n};\n')),x("p",null,"It's important to COMMIT or ROLLBACK the transaction and release the client back to the pool at the\nend of the request:"),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},"const transactionSuccessMiddleware = async () => {\n    let client = als.get('transaction')\n    await client.query('COMMIT');\n    await client.release();\n}\n\nconst async transactionFailureMiddleware = async () =>{\n    let client = als.get('transaction')\n    await client.query('ROLLBACK');\n    await client.release();\n  }\n")),x("hr",null),x("h3",null,"Authentication"),x("p",null,"Users should only be allowed to edit posts which they own... Sounds obvious! To implement this I\ncould to use JsonWebToken instead of session. JWT allows to the application scale horizontally as\nit's completely stateless. JWT was used in conjunction with PassportJS. The idea behind this is that\nby using passport now, I'd lessen the pain of changing my authentication to use OAuth by Github,\nGoogle or Facebook etc."),x("hr",null),x("h3",null,"Database"),x("p",null,"As mentioned above in Server - Data Layer. I'm using PSQL for my database. I haven't chosen an tools\nto perform maintenance or migration, which will cause me some pain in the future but its a challenge\nI'm looking forward to. Production data is incredibly important. Now that I've 'Officially' released\nthe first working version of the Blog, I can't just drop all the tables whenever I'd like & rebuild.\nI'm currently using a library called ",x("a",{href:"https://github.com/marcelklehr/toposort",parentName:"p"},"Toposort"),", which sorts directed acyclic graphs, to determine\nwhich database tables would need to be created first if rebuilding from scratch. I'm using it to\norder the tables by foreign keys, creation whichever tables need to be created first so that they\ncan be referenced by another table."),x("hr",null),x("h2",null,"Let the mind dumping begin"),x("p",null,"I'm now free to write whatever dribble I'd like up here, but of course you won't be forced to read\nit (...yet)"),x("p",null,"The month was a huge success from a technological point of view. The deadline forced me to work\ntoward a goal & not get distracted by other projects or to wait around thinking about / looking for\na better way to implement something."),x("p",null,"The best architecture is the one that works Daniel"))}Ge.isMDXComponent=!0;var Ee=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"One month at a time",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/SIZ0oeR.png",id:4,tags:["Monthly Challenge","January","Technical","ReactJS","NodeJS"],date:"Thu, 1st Feb 2018",created:Me,default:Ge});const je=new Date(1587354693869);function Oe(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/YGXXBuP.jpg#1.3",alt:"Sapiens",title:"Sapiens",parentName:"p"})),x("h2",null,"Sapiens by Yuval Noah Harari"),x("p",null,"100,000 years ago, at least six human species inhabited the earth. Today there is just one. Us. Homo\nsapiens."),x("p",null,"How did our species succeed in the battle for dominance? Why did our foraging ancestors come\ntogether to create cities and kingdoms? How did we come to believe in gods, nations and human\nrights; to trust money, books and laws; and to be enslaved by bureaucracy, timetables and\nconsumerism? And what will our world be like in the millennia to come?"),x("p",null,"In Sapiens, Dr Yuval Noah Harari spans the whole of human history, from the very first humans to\nwalk the earth to the radical – and sometimes devastating – breakthroughs of the Cognitive,\nAgricultural and Scientific Revolutions. Drawing on insights from biology, anthropology,\npaleontology and economics, he explores how the currents of history have shaped our human societies,\nthe animals and plants around us, and even our personalities. Have we become happier as history has\nunfolded? Can we ever free our behaviour from the heritage of our ancestors? And what, if anything,\ncan we do to influence the course of the centuries to come?"),x("p",null,"Bold, wide-ranging and provocative, Sapiens challenges everything we thought we knew about being\nhuman: our thoughts, our actions, our power ... and our future."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/nRxgMPf.jpg#1.3",alt:"Do the work",title:"Do the work",parentName:"p"})),x("h2",null,"Do the work by Steven Pressfield"),x("p",null,"Our enemy is not lack of preparation; it's not the difficulty of the project, or the state of the\nmarketplace or the emptiness of our bank account."),x("p",null,"The enemy is resistance."),x("p",null,"The enemy is our chattering brain, which, if we give it so much as a nanosecond, will start\nproducing excuses, alibis, transparent self-justifications and a million reasons why he\ncan't/shouldn't/won't do what we know we need to do."),x("p",null,"Start before you're ready."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/sLb9uAz.jpg#1.3",alt:"Alice's Adventures in Wonderland",title:"Alices Adventures in Wonderland",parentName:"p"})),x("h2",null,"Alice's Adventures in Wonderland by Lewis Carroll"),x("p",null,"After a tumble down the rabbit hole, Alice finds herself far away from home in the absurd world of\nWonderland. As mind-bending as it is delightful, Lewis Carroll’s 1865 novel is pure magic for young\nand old alike."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/926NlEN.jpg#1.3",alt:"The Myth of Sisyphus",title:"The Myth of Sisyphus",parentName:"p"})),x("h2",null,"The Myth of Sisyphus by Albert Camus"),x("p",null,"One of the most influential works of this century, this is a crucial exposition of existentialist\nthought."),x("p",null,"Influenced by works such as Don Juan, and the novels of Kafka, these essays begin with a meditation\non suicide: the question of living or not living in an absurd universe devoid of order or meaning."),x("p",null,"With lyric eloquence, Camus posits a way out of despair, reaffirming the value of personal\nexistence, and the possibility of life lived with dignity and authenticity."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/zJQRde7.jpg#1.3",alt:"1984",title:"1984",parentName:"p"})),x("h2",null,"1984 by George Orwell"),x("p",null,"The year 1984 has come and gone, but George Orwell's prophetic, nightmarish vision in 1949 of the\nworld we were becoming is timelier than ever."),x("p",null,'1984 is still the great modern classic of "negative utopia"—a startlingly original and haunting\nnovel that creates an imaginary world that is completely convincing, from the first sentence to the\nlast four words.'),x("p",null,"No one can deny the novel's hold on the imaginations of whole generations, or the power of its\nadmonitions—a power that seems to grow, not lessen, with the passage of time."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/7qaspu3.jpg#1.3",alt:"How to Win Friends and Influence People",title:"How to Win Friends and Influence People",parentName:"p"})),x("h2",null,"How to Win Friends and Influence People by Dale Carnegie"),x("p",null,"You can go after the job you want...and get it! You can take the job you have...and improve it! You\ncan take any situation you're in...and make it work for you!"),x("p",null,"Since its release in 1936, How to Win Friends and Influence People has sold more than 15 million\ncopies. Dale Carnegie's first book is a timeless bestseller, packed with rock-solid advice that has\ncarried thousands of now famous people up the ladder of success in their business and personal\nlives."),x("p",null,"As relevant as ever before, Dale Carnegie's principles endure, and will help you achieve your\nmaximum potential in the complex and competitive modern age."),x("p",null,"Learn the six ways to make people like you, the twelve ways to win people to your way of thinking,\nand the nine ways to change people without arousing resentment."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/4Wuvvd3.jpg#1.3",alt:"The Wisdom of Insecurity: A Message for an Age of Anxiety",title:"The Wisdom of Insecurity: A Message for an Age of Anxiety",parentName:"p"})),x("h2",null,"The Wisdom of Insecurity: A Message for an Age of Anxiety by Alan Watts"),x("p",null,"In this fascinating book, Alan Watts explores man's quest for psychological security, examining our\nefforts to find spiritual and intellectual certainty in the realms of religion and philosophy."),x("p",null,"The Wisdom of Insecurity underlines the importance of our search for stability in an age where human\nlife seems particularly vulnerable and uncertain."),x("p",null,"Watts argues our insecurity is the consequence of trying to be secure and that, ironically,\nsalvation and sanity lie in the recognition that we have no way of saving ourselves."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/QudDYhx.jpg#1.3",alt:"The Alchemist",title:"The Alchemist",parentName:"p"})),x("h2",null,"The Alchemist by Paulo Coelho"),x("p",null,"Paulo Coelho's masterpiece tells the mystical story of Santiago, an Andalusian shepherd boy who\nyearns to travel in search of a worldly treasure."),x("p",null,"His quest will lead him to riches far different, and far more satisfying, listening to our hearts,\nof recognizing opportunity and learning to read the omens strewn along life's path, and, most\nimportantly, to follow our dreams."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/jjhMYXc.jpg#1.3",alt:"Meditations",title:"Meditations",parentName:"p"})),x("h2",null,"Meditations by Marcus Aurelius"),x("p",null,"Written in Greek by the only Roman emperor who was also a philosopher, without any intention of\npublication, the Meditations of Marcus Aurelius offer a remarkable series of challenging spiritual\nreflections and exercises developed as the emperor struggled to understand himself and make sense of\nthe universe."),x("p",null,"While the Meditations were composed to provide personal consolation and encouragement, Marcus\nAurelius also created one of the greatest of all works of philosophy: a timeless collection that has\nbeen consulted and admired by statesmen, thinkers and readers throughout the centuries."),x("hr",null),x("p",null,x("img",{src:"https://i.imgur.com/P4198tT.jpg#1.3",alt:"A Brief History of Time",title:"A Brief History of Time",parentName:"p"})),x("h2",null,"A Brief History of Time by Stephen Hawking"),x("p",null,"\"Was there a beginning of time? Could time run backwards? Is the universe infinite or does it have\nboundaries? These are just some of the questions considered in an internationally acclaimed\nmasterpiece by one of the world's greatest thinkers."),x("p",null,"It begins by reviewing the great theories of the cosmos from Newton to Einstein, before delving into\nthe secrets which still lie at the heart of space and time, from the Big Bang to black holes, via\nspiral galaxies and strong theory."),x("p",null,'To this day A Brief History of Time remains a staple of the scientific canon, and its succinct and\nclear language continues to introduce millions to the universe and its wonders."'),x("hr",null))}Oe.isMDXComponent=!0;var _e=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Books to read in 2020",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/JIzLEcd.jpg",id:28,tags:["Personal","Books"],date:"Mon, 20th Apr 2020",created:je,default:Oe});const qe=new Date(1536333222270);function Le(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Dark theme"),x("p",null,"With youtube recently adding a dark mode to to their Polymer web app and rolling this feature out to\ntheir android app in the last couple of days, I felt it was time to add a dark mode here. If you\nspend as much time looking at a screen as me than you'll know that dark themes are a god send. They\ncan reduce the strain on your eyes and can even help those that struggle to get to sleep at night."),x("p",null,x("img",{src:"https://i.imgur.com/pkaHIPA.png",alt:"Youtube dark theme",title:"Youtube dark theme",parentName:"p"})),x("p",null,"This update to the blog can be seen in the commit - ",x("a",{href:"https://github.com/sinnott74/BlogWebClient/commit/312c69e8df3c3ff69d6a1ba782380752af2c6d30",parentName:"p"},"312c69e")),x("h2",null,"Adding the Setting"),x("p",null,"Firstly we need a way for the user to toggle the dark theme. A new settings page was added to house\nthe dark theme toggle and all future settings, oh the possibilities!"),x("h3",null,"Settings component"),x("p",null,"Our settings component will have a single toggle switch that will control the dark theme. We're\nusing ",x("a",{href:"https://react-md.mlaursen.com/",parentName:"p"},"React-MD")," which nicely implements the Material Design spec & allows for a lot of style\ncustomisation."),x("p",null,"The component is fairly simple. As you can see from the ",x("inlineCode",{parentName:"p"},"PropTypes"),", it takes in the boolean value\nfor the dark theme & a function to call when the theme is when the theme is toggled. This component\nis very much just a dumb view."),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'// settings.component.jsx\nimport React from "react";\nimport PropTypes from "prop-types";\nimport "./Settings.css";\nimport Switch from "react-md/lib/SelectionControls/Switch";\n\nexport default class Settings extends React.Component {\n    render() {\n        return (\n            <div className="settings">\n                <Switch\n                    id="darkTheme"\n                    type="switch"\n                    label="Dark theme"\n                    name="darkTheme"\n                    labelBefore\n                    checked={this.props.darkTheme}\n                    onChange={this.props.handleDarkThemeChange}\n                />\n            </div>\n        );\n    }\n}\n\nSettings.propTypes = {\n    darkTheme: PropTypes.bool,\n    handleDarkThemeChange: PropTypes.func.isRequired,\n};\n')),x("h3",null,"Adding some logic and state"),x("p",null,"The components logic and stage is wired up using ",x("a",{href:"https://redux.js.org/",parentName:"p"},"ReduxJS"),". We're using ",x("inlineCode",{parentName:"p"},"mapStateToProps")," to wire up\nthe dark theme value stored in the state to the ",x("inlineCode",{parentName:"p"},"darkTheme")," value passed into the component. Next\n",x("inlineCode",{parentName:"p"},"mapDispatchToProps")," specifies that we should dispatch the ",x("inlineCode",{parentName:"p"},"toggleDarkTheme")," function when our\ncomponents calls the ",x("inlineCode",{parentName:"p"},"handleDarkThemeChange")," function."),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'// settings.container.jsx\nimport Settings from "core/components/Settings";\nimport { connect } from "react-redux";\nimport { isDarkTheme, toggleDarkTheme } from "core/ducks/settings";\n\nconst mapStateToProps = (state) => ({\n    darkTheme: isDarkTheme(state),\n});\n\nconst mapDispatchToProps = {\n    handleDarkThemeChange: toggleDarkTheme,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n')),x("p",null,"The settings redux file is following the ",x("a",{href:"https://medium.com/@scbarrus/the-ducks-file-structure-for-redux-d63c41b7035c",parentName:"p"},"Ducks pattern")," & includes a reducer registry as a nice way\nto load reducers into the redux store asynchronously."),x("p",null,"As reducers go, it's a fairly simple one. There's only one action, which is to toggle them dark\nmode. The value of the dark theme is initially read from local storage and persisted back there\nevery time its toggled."),x("pre",null,x("code",{className:"language-js",parentName:"pre"},'// settings.ducks.js\nimport reducerRegistry from "core/redux/ReducerRegistry";\n\n/*\n * Sidenav actions\n */\nconst TOGGLE_DARKTHEME = "TOGGLE_DARKTHEME";\n\n/**\n * Reducer\n */\nlet initialState = {\n    darkTheme: localStorage.getItem("darkTheme") === "true" || false,\n};\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case TOGGLE_DARKTHEME:\n            let darkTheme = !state.darkTheme;\n            localStorage.setItem("darkTheme", darkTheme);\n            return {\n                ...state,\n                darkTheme: darkTheme,\n            };\n        default:\n            return state;\n    }\n}\n\n/**\n * Action Creators\n */\nexport function toggleDarkTheme() {\n    return {\n        type: TOGGLE_DARKTHEME,\n    };\n}\n\n/**\n * Selectors\n */\nexport function isDarkTheme(state) {\n    return state.settings.darkTheme;\n}\n\nreducerRegistry.register("settings", reducer);\n')),x("h2",null,"Getting stylish"),x("p",null,"My root component - ",x("inlineCode",{parentName:"p"},"App.jsx")," is connected to the settings store and updates whenever the\n",x("inlineCode",{parentName:"p"},"darkTheme")," value updates. It simply adds a ",x("inlineCode",{parentName:"p"},".dark")," class to the HTML element whenever darkTheme is\nset. Various other sass files were updates to take this class into account."),x("p",null,"The background colour and the text colour needed to be updated depending on the theme. E.g."),x("pre",null,x("code",{className:"language-css",parentName:"pre"},'// sass card component example with dark theme\n@import "core/style/variable";\n.card {\n    background: $background-color-light;\n}\n\n.dark .card {\n    background: $background-color-dark;\n}\n')),x("h2",null,"Let there be dark"),x("p",null,x("img",{src:"https://i.imgur.com/hDqtIAA.gif",alt:"Dark theme demo",title:"Dark theme demo",parentName:"p"})))}Le.isMDXComponent=!0;var He=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Come to the darkside",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/mbaXHXs.png",id:23,tags:["Technical","ReactJS","IBMCloud","ReduxJS","Sass"],date:"Fri, 7th Sep 2018",created:qe,default:Le});const Fe=new Date(1539960830019);function We(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Using CI and Docker to deploy an application to Cloud Foundry"),x("p",null,"I recently found out Cloud Foundry supports Docker containers, so here quick tutorial of to use\ncontinuous integration to build your application into a docker image and deploy it to Cloud Foundry."),x("h3",null,"Cloud Foundry"),x("p",null,x("a",{href:"https://www.cloudfoundry.org/",parentName:"p"},"Cloud Foundry")," is an open source platform as a service, created by ",x("a",{href:"https://pivotal.io/",parentName:"p"},"Pivotal"),", on which developers\ncan build, deploy, run and scale applications. It can be deployed onto any cloud provider, like AWS\nand is most notably a ",x("a",{href:"https://www.ibm.com/cloud/cloud-foundry",parentName:"p"},"first class citizen")," on IBM Cloud."),x("h3",null,"Docker"),x("p",null,x("a",{href:"https://www.docker.com/",parentName:"p"},"Docker")," is a computer program that performs operating-system-level virtualization, also known as\n\"containerization\". While similar to a Virtual Machine, Docker allows for much less resource\nconsumption as containers share the underlying OS. Like VMs its solves the 'it works on my machine'."),x("h4",null,"Docker images vs Buildpacks"),x("p",null,"CloudFoundry pushes ",x("a",{href:"https://docs.cloudfoundry.org/buildpacks/",parentName:"p"},"Buildpacks")," as their default means for deploying/running an application,\nhowever they also support running container images through their container runtime ",x("a",{href:"https://docs.cloudfoundry.org/concepts/architecture/garden.html",parentName:"p"},"Garden-runC")),x("p",null,"Here's a quick comparison:"),x("table",null,x("thead",{parentName:"table"},x("tr",{parentName:"thead"},x("th",{parentName:"tr"}),x("th",{parentName:"tr"},"Buildpack"),x("th",{parentName:"tr"},"Docker"))),x("tbody",{parentName:"table"},x("tr",{parentName:"tbody"},x("td",{parentName:"tr"},x("strong",{parentName:"td"},"Ease of use")),x("td",{parentName:"tr"},"When you push an app, Cloud Foundry automatically detects an appropriate buildpack for it. Buildpacks typically examine your apps to determine what dependencies to download and how to configure the apps to communicate with bound services. It saves you DevOp time and allows you to focus on you application."),x("td",{parentName:"tr"},"Docker requires an understanding of how to build an image, but once that initial skill cost is paid building and deploying are a breeze.")),x("tr",{parentName:"tbody"},x("td",{parentName:"tr"},x("strong",{parentName:"td"},"Control")),x("td",{parentName:"tr"},"Buildpack's ease comes at the cost of control. Buildpacks have predefined configurations which may not satisfy your needs. Only recently have you been able to combines multiple programming languages together in a single deployment with multibuildpacks"),x("td",{parentName:"tr"},"Docker on the other hand gives full control to the user. You specify exactly what files / services / users / applications you need and they will be included in the image. Images can be build on top of other images, so there's no need to re-invent the wheel")),x("tr",{parentName:"tbody"},x("td",{parentName:"tr"},x("strong",{parentName:"td"},"Portabillity")),x("td",{parentName:"tr"},"Buildpacks can only be run on instances of cloud foundry. While cloud foundry can be run on all the major cloud providers, you may not want to run a full Paas just to deploy an single application."),x("td",{parentName:"tr"},"Docker has much greater portability than buildpacks and are perfect for users who are concerned with vendor lock in. Docker containers can be run anywhere that includes a container runtime, which is all major cloud providers and with the advent of Kubernetes containers have become even more prevalent.")),x("tr",{parentName:"tbody"},x("td",{parentName:"tr"},x("strong",{parentName:"td"},"Security")),x("td",{parentName:"tr"},"A major advantage for buildpacks are that they are maintained by Cloud Foundry and as such their security is kept up date. Major security flaws can also be patched at runtime."),x("td",{parentName:"tr"},"Docker falls behind here a bit. While you can lock down your container to large degree, one eye needs to be kept on keep things up to date. Cloud foundry can't silently update your runtime the way it can with Buildpacks")),x("tr",{parentName:"tbody"},x("td",{parentName:"tr"},x("strong",{parentName:"td"},"Debugging")),x("td",{parentName:"tr"},"Since a lot of the control of whats run is taken away from the user, debugging deployment issues can be more difficult. Though Cloud Foundry does provide some tools to help, such as VMs etc"),x("td",{parentName:"tr"},"Docker solves the 'It works on my machine' issue. Whats runs on your machine is what will run on Cloud Foundry")))),x("h3",null,"Before we begin"),x("p",null,"For the following tutorial, you'll need to have installed:"),x("ul",null,x("li",{parentName:"ul"},"Docker"),x("li",{parentName:"ul"},"Golang 1.11+"),x("li",{parentName:"ul"},"Git")),x("p",null,"We'll need accounts on:"),x("ul",null,x("li",{parentName:"ul"},"Github"),x("li",{parentName:"ul"},"TravisCI"),x("li",{parentName:"ul"},"Docker hub"),x("li",{parentName:"ul"},"IBM Cloud (to use their cloud foundry)")),x("p",null,"The code for this tutorial can be found ",x("a",{href:"https://github.com/sinnott74/DockerCloudFoundryDemo",parentName:"p"},"here"),"."),x("h3",null,"Setting up our Git repo"),x("p",null,"After creating accounts on all of the above. Create a repository on Github for our application."),x("p",null,"Firstly, create a directory for the project. I'll be calling mine ",x("inlineCode",{parentName:"p"},"DockerCloudFoundryDemo"),". Then run\nthe following commands:"),x("ul",null,x("li",{parentName:"ul"},x("inlineCode",{parentName:"li"},"git init")," - to initialise this as a git repository"),x("li",{parentName:"ul"},x("inlineCode",{parentName:"li"},"git remote add origin https://github.com/[username]/DockerCloudFoundryDemo.git")," - to wire up\nour local repo to Github's hosted repo.")),x("h3",null,"Setting up Travis"),x("p",null,"Head over to ",x("a",{href:"https://travis-ci.org",parentName:"p"},"TravisCI")," and navigate to your settings. From there you can configure which Github\nproject's Travis will add a webhook for. On each commit to that repo Travis will run you CI code.\nFor later in the tutorial we'll also need a few enviroment variables set. These are set on a per\nrepo basis."),x("p",null,"The following EnvVars are needed:\n",x("img",{src:"https://i.imgur.com/qYzqpli.png",alt:"TravisCI Environment Variables",title:"TravisCI Environment Variables",parentName:"p"})),x("h3",null,"Our application"),x("p",null,"Our application is a simple ",x("a",{href:"https://golang.org/",parentName:"p"},"Go")," hello world web application. It listens on a port specified by the\nenvironment variable ",x("inlineCode",{parentName:"p"},"PORT")," and returns ",x("inlineCode",{parentName:"p"},"hello world"),". We'll be using Go Modules for this, just to\nshow how you would go about it but this application so simple that no dependencies are needed."),x("p",null,"Running ",x("inlineCode",{parentName:"p"},"go mod init")," will initialise this as a go module project and create a ",x("inlineCode",{parentName:"p"},"go.mod")," file."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// main.go\npackage main\n\nimport (\n        "net/http"\n        "os"\n)\n\n// Application entry point\nfunc main() {\n        http.HandleFunc("/", helloWorld)\n        err := http.ListenAndServe(":"+port(), nil)\n        if err != nil {\n                panic(err)\n        }\n}\n\n// Hello world http handler\nfunc helloWorld(w http.ResponseWriter, r *http.Request) {\n        w.WriteHeader(http.StatusOK)\n        w.Write([]byte("Hello world"))\n}\n\n// retrieves the Port to start the server on\nfunc port() string {\n        port := os.Getenv("PORT")\n        if port == "" {\n                port = "8008"\n        }\n        return port\n}\n\n')),x("p",null,"To quickly verify the above code works, run ",x("inlineCode",{parentName:"p"},"go run main.go")," and the visit ",x("inlineCode",{parentName:"p"},"localhost:8008/")," to see\n",x("inlineCode",{parentName:"p"},"Hello world")),x("h3",null,"Build our Docker image"),x("p",null,"Building a Go docker image is much simpler than I have laid out below. I'm building an image which\nis as small as I can make it and have rebuilds that a quick and repeatable."),x("p",null,"The below ",x("inlineCode",{parentName:"p"},"Dockerfile")," is a multi stage build. In the first stage I'll use ",x("inlineCode",{parentName:"p"},"golang:1.11.1-alpine3.8"),"\nas my base as it has the majority of what we need already included."),x("p",null,"Docker builds images in layers. Each command creates a new layer on to of the old one. This allows\nfor faster repeatable builds because we don't need to rebuild layers that haven't change. As such\nyou should put the layers that are most likely to change last."),x("pre",null,x("code",{className:"language-docker",parentName:"pre"},'# Dockerfile\nFROM golang:1.11.1-alpine3.8 as builder\nENV GO111MODULE on\nWORKDIR $GOPATH/src/github.com/sinnott74/DockerCloudFoundryDemo\n\n# Go requires Git to download dependencies\nRUN apk add git\n\n# Copy our module definition\nCOPY go.mod ./\n\n# Download module dependencies\nRUN go mod download\n\n# Copy source files - this is the layer most likely to change\nCOPY . ./\n\n# Build binary, specifying the architecture we want and removing debugging information with the -w -s build flags\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s"\n\nFROM alpine:3.8\n\n# Choose port to expose\nEXPOSE 8008\n\n# Copy binary\nCOPY --from=builder /go/src/github.com/sinnott74/DockerCloudFoundryDemo/DockerCloudFoundryDemo .\nCMD ["./DockerCloudFoundryDemo"]\n')),x("p",null,"To build the image run ",x("inlineCode",{parentName:"p"},"docker build -t sinnott74/dockercloudfoundrydemo ."),". Don't forget the ",x("inlineCode",{parentName:"p"},".")," at\nthe end as its specifies which directory to use. Docker images are tagged with the ",x("inlineCode",{parentName:"p"},"-t")," flag which\nprovides a way for use to reference them later."),x("p",null,"To run the image, ",x("inlineCode",{parentName:"p"},"docker run -p 8008:8008 sinnott74/dockercloudfoundrydemo"),". ",x("inlineCode",{parentName:"p"},"-p 8008:8008")," tells\ndocker to map the 8008 port on my local network to 8008 in the container."),x("p",null,"Again visit ",x("inlineCode",{parentName:"p"},"localhost:8008/")," to verify it worked and see ",x("inlineCode",{parentName:"p"},"Hello world")),x("h3",null,"Defining a Cloud Foundry application"),x("p",null,"Cloud Foundry uses ",x("inlineCode",{parentName:"p"},"yaml")," files to define an application. Below we are specifying:"),x("ul",null,x("li",{parentName:"ul"},"The name of the application"),x("li",{parentName:"ul"},"How many instances we want to run"),x("li",{parentName:"ul"},"The memory and disk size required"),x("li",{parentName:"ul"},"The url we want for the application (bare in mind this could be taken)"),x("li",{parentName:"ul"},"Finally, and most importantly the docker image we want to deploy. Cloud foundry will get the\nimage from DockerHub and deploy it.")),x("p",null,"See ",x("a",{href:"https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html',",parentName:"p"},"Deploying with Application Manifests")," for more configuration options."),x("pre",null,x("code",{className:"language-yaml",parentName:"pre"},"# manifest.yml\napplications:\n    - name: DockerCloudFoundryDemo\n      memory: 32M\n      instances: 1\n      disk_quota: 32M\n      routes:\n          - route: DockerCloudFoundryDemo.eu-gb.mybluemix.net\n      docker:\n          image: sinnott74/dockercloudfoundrydemo\n")),x("h3",null,"Continuous delivery"),x("p",null,"TravisCI is configured with a ",x("inlineCode",{parentName:"p"},".travis.yml")," file. The following file:"),x("ul",null,x("li",{parentName:"ul"},"Builds our binary then runs our tests."),x("li",{parentName:"ul"},"Builds our Docker image"),x("li",{parentName:"ul"},"Pushes the image to DockerHub"),x("li",{parentName:"ul"},"Deploys that images to IBM's Cloud Foundry.")),x("pre",null,x("code",{className:"language-yaml",parentName:"pre"},'# .travis.yml\nlanguage: go\n\ngo:\n    - 1.11.x\n\nenv:\n    - GO111MODULE=on\n\nservices:\n    - docker\n\nscript:\n    # Build binary and run test\n    - go build && go test -v -race ./...\n    # Build docker image\n    - docker build -t sinnott74/dockercloudfoundrydemo .\n\nbefore_deploy:\n    # Login to docker hub\n    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin\n    # Push image to docker\n    - docker push sinnott74/dockercloudfoundrydemo\n\n    # Deploy\n    # Bluemix / IBM Cloud\ndeploy:\n    - provider: cloudfoundry\n      username: ${IBM_CLOUD_USER}\n      #########################\n      ## Add BLUEMIX_PASSWORD environment variable to your Travis project\'s settings\n      ## https://docs.travis-ci.com/user/environment-variables/#Defining-Variables-in-Repository-Settings\n      #########################\n      password: ${IBM_CLOUD_PASSWORD}\n      organization: ${IBM_CLOUD_USER}\n      space: staging\n      region: eu-gb\n      api: https://api.eu-gb.bluemix.net\n')),x("h3",null,"Drum roll please"),x("p",null,"All thats left to do is to commit our changes and push our application to Github."),x("p",null,"Travis will listen for commits on Github and run our CI workload. That workload will verify we can\nbuild the application and that it passes all of our tests. It will then build the Docker image and\npush it to DockerHub, before finally pushing our application to IBM's Cloud Foundry, which will\nretrieve the image from DockerHub and deploy it."),x("p",null,"We can then visit ",x("inlineCode",{parentName:"p"},"DockerCloudFoundryDemo.eu-gb.mybluemix.net")," to see ",x("inlineCode",{parentName:"p"},"Hello world")),x("h4",null,"Voila"),x("p",null,x("img",{src:"https://i.imgur.com/VSXI3WT.png",alt:"Live hello world application",title:"Live hello world application",parentName:"p"})),x("p",null,x("strong",{parentName:"p"},"Note:")," I'll probably have taken the above application down by the time you're reading this..."))}We.isMDXComponent=!0;var ze=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Deploying Docker on Cloud Foundry",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/axoBYe2.png",id:25,tags:["Golang","Docker","IBMCloud","TravisCI","CI/CD","Cloud Foundry"],date:"Fri, 19th Oct 2018",created:Fe,default:We});const Ue=new Date(1531153042885);function Je(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Monolith"),x("p",null,"This application was originally designed as a monolith & built using ",x("a",{href:"https://www.cloudfoundry.org",parentName:"p"},"Cloud Foundry"),"'s NodeJS\nbuildpack. The web client & the corresponding API calls were served by the same application. It\nallowed for an ease of development and straight forward deployment."),x("h2",null,"Designing for Scale"),x("p",null,"The ",x("a",{href:"https://expressjs.com/en/advanced/best-practice-performance.html#use-a-reverse-proxy",parentName:"p"},"Express documentation")," recommends the use of a reverse proxy to deliver web client file and\noffloading any API calls to the express server."),x("blockquote",null,x("p",{parentName:"blockquote"},"A reverse proxy sits in front of a web app and performs supporting operations on the requests,\napart from directing requests to the app. It can handle error pages, compression, caching, serving\nfiles, and load balancing among other things."),x("p",{parentName:"blockquote"},"Handing over tasks that do not require knowledge of application state to a reverse proxy frees up\nExpress to perform specialized application tasks. For this reason, it is recommended to run\nExpress behind a reverse proxy like Nginx or HAProxy in production.")),x("p",null,"In essence, express should only be used as an API server as thats where it excels. Nodejs utilises a\nsingle thread and an event loop concurrency model to run its applications (See ",x("a",{href:"/blog/7",parentName:"p"},"Node event loop")," for\nmore). As such, we don't want our resources being consumed by compressing and serving static files.\n",x("a",{href:"https://www.nginx.com/resources/wiki/",parentName:"p"},"NGINX")," was designed perform these tasks."),x("blockquote",null,x("p",{parentName:"blockquote"},"NGINX is a free, open-source, high-performance HTTP server")),x("p",null,x("img",{src:"https://i.imgur.com/ZbQYWeA.png",alt:"Reverse Proxy",title:"Reverse Proxy",parentName:"p"})),x("h2",null,"Separation of Concerns"),x("p",null,"Separating out the web server from the API server allows each to be developed separately. It also\nallows us to scale out each service independently of the other. For example, if we were to introduce\na native mobile version of this application and it was to become extremely popular, we may need to\ndeploy several more instances of the API server, but the nginx web client could be left as it is."),x("p",null,"This application has been split as described above. The client and server can be found at ",x("a",{href:"https://github.com/sinnott74/BlogWebClient",parentName:"p"},"Blog\nWebclient")," and ",x("a",{href:"https://github.com/sinnott74/BlogServer",parentName:"p"},"Blog Server")," respectively."),x("p",null,"All requests are currently routed through the NGINX server. Any request to /api/ is forwarded onto\nthe API server using the following snippet from the web client's nginx.conf:"),x("pre",null,x("code",{parentName:"pre"},'location /api/ {\n    proxy_pass <%= ENV["BACKEND_ADDR"] %>;\n}\n')),x("p",null,"BACKEND_ADDR is an environment variable which points to my backend server. This follows along the\nlines of the ",x("a",{href:"https://12factor.net/",parentName:"p"},"12 Factor App"),"."),x("blockquote",null,x("p",{parentName:"blockquote"},"The twelve-factor app stores config in environment variables (often shortened to env vars or env).\nEnv vars are easy to change between deploys without changing any code; unlike config files, there\nis little chance of them being checked into the code repo accidentally; and unlike custom config\nfiles, or other config mechanisms such as Java System Properties, they are a language- and\nOS-agnostic standard.")),x("h2",null,"Performance"),x("p",null,"Webclient rendering has seen a 10% gain in performance from the change, which can be seen in graph\nbelow which compares data from ",x("a",{href:"https://www.webpagetest.org/",parentName:"p"},"WebPageTest"),". SinnottTest.eu-gb.mybluemix.net is the development\napplication which is using this new architecture, which Sinnott.eu-gb.mybluemix.net is the old\nmonolith."),x("p",null,x("img",{src:"https://i.imgur.com/d8aeKvO.png",alt:"Visual Progress",title:"Visual Progress",parentName:"p"}),"\n",x("img",{src:"https://i.imgur.com/tfnZv0n.png",alt:"Resource Timings",title:"Resource Timings",parentName:"p"})))}Je.isMDXComponent=!0;var Ve=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Divide and Conquer",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/2Poehrs.png",id:21,tags:["Technical","ExpressJS","NGINX","Microservices"],date:"Mon, 9th Jul 2018",created:Ue,default:Je});const Ye=new Date(1541545302301);function Xe(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"What is a health check?"),x("p",null,"Health checks are a means to determine whether or not a particular instance of a microservice is\nhealthy and accessible."),x("p",null,"Given the fine grained and horizontally scalable nature of microservices, its not uncommon to have\nhundreds of instances of services running at any one moment. At scale it becomes impractical for an\noperator to keep an eye on service response codes to ensure that everything is running correctly."),x("p",null,"Typically a health check will be implemented as a combination of an endpoint ",x("inlineCode",{parentName:"p"},"/health")," and\ninfrastructure which repeatably hits that endpoint at set intervals. Most modern day infrastructure\nsuch as your orchestrator, load balancer, api gateway or service registry can all cater for this\nkind of monitoring."),x("p",null,"Health checks provide a way for an application to introspect itself and determine if it can operate\ncorrectly. Commonly, this means that an application can connect to its dependencies like a database,\nmessage broker or cache; but it could also go further a determine that its business processes are\nfunctioning correctly."),x("p",null,"If the infrastructure determines that your application is unhealthy, it will kill the instance and\nbring up a new one. You can consider it to be an automated microservice version of the image below."),x("p",null,x("img",{src:"https://i.imgur.com/d4aAK8B.png#1",alt:"We should kill it",title:"We should kill it",parentName:"p"})),x("p",null,"Credit to ",x("a",{href:"https://twitter.com/julianwels",parentName:"p"},"@JulianWels")," at ",x("a",{href:"http://ptbd.jwels.berlin",parentName:"p"},"Pretends to be drawing")),x("h2",null,"Implementing a health check"),x("p",null,"We'll add a ",x("inlineCode",{parentName:"p"},"/health")," endpoint to out Todo microservice from the ",x("a",{href:"/blog/26",parentName:"p"},"previous blogpost"),". The source\ncode for the service is on ",x("a",{href:"https://github.com/sinnott74/TodoService",parentName:"p"},"Github"),". Our health endpoint will introspect the service and return a\nhttp ",x("inlineCode",{parentName:"p"},"200")," if everything is ok, otherwise its unhealthy and should be stopped."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"// service.go\ntype TodoService interface {\n    GetAllForUser(ctx context.Context, username string) ([]Todo, error)\n    GetByID(ctx context.Context, id string) (Todo, error)\n    Add(ctx context.Context, todo Todo) (Todo, error)\n    Update(ctx context.Context, id string, todo Todo) error\n    Delete(ctx context.Context, id string) error\n    Health(ctx context.Context) error\n}\n")),x("p",null,"Next we'll add the implementation for our in memory service. Typically a health check would contains\nsome network request pinging dependencies like a database. e.g."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"// Health perform service health check. verifies that DB is accessible\nfunc (s *postgresService) Health(ctx context.Context) error {\n    return s.db.PingContext(ctx)\n}\n")),x("p",null,"But since our TodoService is in memory we'll perform a business process health check, by adding then\nretrieving and finally deleting a Todo."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// service.go\n// Health check the In memory TodoService business process\nfunc (s *inmemService) Health(ctx context.Context) error {\n    todo := Todo{}\n    addedTodo, err := s.Add(ctx, todo)\n    if err != nil {\n        return err\n    }\n    retrievedTodo, err := s.GetByID(ctx, addedTodo.ID)\n    if err != nil {\n        return err\n    }\n    if addedTodo != retrievedTodo {\n        return errors.New("health check error retrieving todo")\n    }\n    return s.Delete(ctx, addedTodo.ID)\n}\n')),x("p",null,"We would then create an endpoint in our ",x("inlineCode",{parentName:"p"},"endpoint.go")," like we did for the other service methods. Our\n",x("inlineCode",{parentName:"p"},"HealthEndpoint")," won't have any fields in its request or response structs. You could include any\nhealth information you wanted in the response, for example the network response times of\ndependencies, but just as long as your health check infrastructure knows hows to interpret it."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"// endpoint.go\ntype HealthRequest struct {\n}\n\ntype HealthResponse struct {\n}\n\nfunc MakeHealthEndpoint(s TodoService) endpoint.Endpoint {\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\n        err := s.Health(ctx)\n        return HealthResponse{}, err\n    }\n}\n")),x("p",null,"Finally we add out out http transport endpoint. You may remember from the previous blogpost that\n",x("inlineCode",{parentName:"p"},"encodeResponse")," will return a ",x("inlineCode",{parentName:"p"},"non 2xx")," http status if an error is returned from the endpoint."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// transport.go\nrouter.Get("/health", httptransport.NewServer(\n    endpoints.HealthEndpoint,\n    decodeHealthRequest,\n    encodeResponse,\n    options...,\n).ServeHTTP)\n')),x("h2",null,"Configuring health checks on Cloud Foundry"),x("p",null,"Cloud foundry's infrastructure can perform application monitoring to determine if the app should be\nrestarted or not. By default it will check that your app can receive connection on a its specified\n",x("inlineCode",{parentName:"p"},"PORT"),", which is a sensible default as adding your http listener is typically the last thing you'll\ndo during application start up. However, it is possible to configure it to use your service's own\nhealth check endpoint."),x("p",null,"This can vedone by adding a ",x("inlineCode",{parentName:"p"},"health-check-type")," of ",x("inlineCode",{parentName:"p"},"http")," and ",x("inlineCode",{parentName:"p"},"health-check-http-endpoint")," of your\nhealth endpoint which in this case is ",x("inlineCode",{parentName:"p"},"/health")," to your ",x("inlineCode",{parentName:"p"},"manifest.yml"),". Cloud foundry expects a 200\nresponse back within 1 second, otherwise it determines the app to be unhealthy and restarts it. The\ndefault time between every health check is also configurable. It defaults to 60 seconds but it can\nbe configure to be as high a 180s."),x("pre",null,x("code",{className:"language-yaml",parentName:"pre"},"applications:\n    - path: .\n      name: TodoService\n      command: ./TodoService\n      buildpack: https://github.com/cloudfoundry/binary-buildpack.git\n      # Add health checks below\n      health-check-type: http\n      health-check-http-endpoint: /health\n")),x("p",null,"For more info see ",x("a",{href:"https://docs.cloudfoundry.org/devguide/deploy-apps/healthchecks.html#setting_health_checks",parentName:"p"},"Cloud Foundy health checks")),x("p",null,"The result of above is that a http request is sent to ",x("inlineCode",{parentName:"p"},"/health")," every 60 seconds:"),x("pre",null,x("code",{parentName:"pre"},'2018-11-06T22:36:43.46+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:36:43 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:60738 - 200 3B in 28.646µs\n2018-11-06T22:37:13.61+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:37:13 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:33370 - 200 3B in 43.844µs\n2018-11-06T22:37:43.78+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:37:43 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:34150 - 200 3B in 39.904µs\n2018-11-06T22:38:14.20+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:38:14 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:35090 - 200 3B in 27.417µs\n2018-11-06T22:38:44.44+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:38:44 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:35990 - 200 3B in 36.033µs\n2018-11-06T22:39:14.63+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:39:14 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:36920 - 200 3B in 26.526µs\n2018-11-06T22:39:44.84+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:39:44 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:37798 - 200 3B in 28.486µs\n2018-11-06T22:40:14.99+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:40:14 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:38630 - 200 3B in 26.447µs\n2018-11-06T22:40:45.45+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:40:45 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:39526 - 200 3B in 25.073µs\n2018-11-06T22:41:15.66+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:41:15 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:40472 - 200 3B in 84.141µs\n2018-11-06T22:41:45.86+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:41:45 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:41356 - 200 3B in 26.716µs\n2018-11-06T22:42:16.06+0000 [APP/PROC/WEB/0] OUT 2018/11/06 22:42:16 "GET http://10.244.98.13:8080/health HTTP/1.1" from 10.244.98.13:42286 - 200 3B in 27.594µs\n')))}Xe.isMDXComponent=!0;var $e=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Health checks",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/r6PqWEc.png",id:27,tags:["Microservices","Golang","GoKit","Cloud Foundry"],date:"Tue, 6th Nov 2018",created:Ye,default:Xe});const Ke=new Date(1522621406666);function Qe(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"This month I focuses on regularly taking a multivitamin to see if it would make a difference. I take\nthe odd Berocca in work if I need a boost ;) but I'd never consistently taken any vitamins."),x("p",null,"It's well know that Irish people are a bit deficient in vitamin D due a lack of sunlight. Given that\nour spring so far has been worse than our winter, I'd say people are more deficient this year than\nmost. (It snowed at the beginning & in the middle of MARCH...)"),x("p",null,x("img",{src:"https://i.imgur.com/skmGjKo.jpg",alt:"Smarch weather",title:"Smarch weather",parentName:"p"})),x("p",null,"The efficacy is largely up for debate & I linked to a couple of papers debating the topic when I\noutlined the ",x("a",{href:"/blog/11",parentName:"p"},"original challenge"),"."),x("p",null,"Its pretty important to note here I'm working with a sample size of 1 & its the exact opposite of a\ndouble blind study. Given that the results of this month probably won't be considered for a Nobel\nprize."),x("p",null,"I felt I was very consistent at a taking the vitamins. Twice a day everyday for the month. During\nthe third week of the month I genuinely felt they were improving my day to day activities. However\nthis easily could be attributed to our good friend the placebo effect."),x("p",null,"Unfortunately, during the last week I came down with flu like symptoms and that threw any positive\nfeeling I had toward the vitamins out the window."),x("p",null,"This personal challenge is largely inconclusive, but I was impressed with being able to regularly\nremember to take my vitamins!"),x("p",null,"You've got to celebrate small wins whenever you can!"))}Qe.isMDXComponent=!0;var Ze=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Small margins make the difference",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/xNfnvfr.jpg",id:15,tags:["Monthly Challenge","Personal","March","Vitamins"],date:"Sun, 1st Apr 2018",created:Ke,default:Qe});const en=new Date(1517411423288);function nn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Welcome"),x("p",null,"Welcome one & all to the first post of this blog. Hopefully the first of many."),x("p",null,"We live in a post Trump / Brexit / cryptocurrency world, where so many feel a lack of influence in\nthe direction the world is moving that generations feel that their only recourse is to tear the\nsystem down & in some ways rage against the machine. I for one, don't share this sentiment. My\nthesis is that society has a greater chance of progressing if we take our currently fledgling\nsystems & attempt to improve on them."),x("p",null,"The purpose of this blog is take myself as a microcosm of society at large & apply this thesis."),x("p",null,"I enjoy my work as a software engineer; I feel I'm fairly highly skilled, I eat healthily & exercise\nregularly; but still there's always so much to improve on both from a technological stand point &\npersonally."),x("p",null,"The goal is here is progressive enhancement."),x("p",null,x("img",{src:"https://i.imgur.com/hvY7Kj9.jpg",alt:"Fearless Lion",title:"Fearless Lion",parentName:"p"})),x("p",null,"Daniel"))}nn.isMDXComponent=!0;var tn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Inaugural post",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/slXcTqg.jpg",id:1,date:"Wed, 31st Jan 2018",created:en,default:nn});const on=new Date(1517417201305);function an(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"2018 Monthly Challenges"),x("p",null,"The origin of magic 21 days figure came from a 1960s book called book ‘Psycho-cybernetics’ by Dr\nMaxwell Maltz, a plastic surgeon turned psychologist."),x("blockquote",null,x("p",{parentName:"blockquote"},"‘It usually requires a minimum of about 21 days to effect any perceptible change in a mental\nimage. Following plastic surgery it takes about 21 days for the average patient to get used to his\nnew face. When an arm or leg is amputated the “phantom limb” persists for about 21 days. People\nmust live in a new house for about three weeks before it begins to “seem like home”. These, and\nmany other commonly observed phenomena tend to show that it requires a minimum of about 21 days\nfor an old mental image to dissolve and a new one to jell.’")),x("p",null,"While there has been much research done to ",x("a",{href:"https://jamesclear.com/new-habit",parentName:"p"},"dispel the 21 days habit myth")," (best estimates have it\nat around 66 days), its a nice idea to spark genuine change."),x("p",null,"The primary driving force behind this blog was to challenge myself in 2018. As I mentioned in the\ninaugural post, the name of the game is progressive enhancement."),x("p",null,"I've selected two categories that will be my focus:"),x("ul",null,x("li",{parentName:"ul"},"Technical"),x("li",{parentName:"ul"},"Personal")),x("hr",null),x("h3",null,"Technical"),x("p",null,"Its easy to get into a lull when working with technology. You might have mastered all the skills\nnecessary to fully complete the 9-5, you compare favourably with your peers & you're happy with your\ncareer trajectory."),x("p",null,"There's no time to rest on your laurels or skills. Its widely accepted that not only is ",x("a",{href:"https://en.wikipedia.org/wiki/Accelerating_change",parentName:"p"},"technology\nadvancing"),", but that the advancement is accelerating."),x("h3",null,"Personal"),x("p",null,"In 2010, Dave Brailsford took over as the General Manager and Performance Director for Team Sky, a\nBritish professional cycling team. His philosophy was simple, it was called the ",x("a",{href:"https://lifehacker.com/the-value-of-marginal-gains-1514453003",parentName:"p"},"aggregation of\nmarginal gains"),". His belief was that if you improved every area related to cycling by just 1\npercent, then those small gains would add up to remarkable improvement. Ranging from which pillow\noffered the best sleep to organising & colour coding water bottle. His goal was to put Team Sky in a\nposition to win the Tour De France in five years. They won it in three!"),x("p",null,"The theory goes that If I apply the same philosophy to my life, I should also see 'remarkable\nimprovement'. Of course I won't be applying the philosophy to the same professional pedantic degree."),x("p",null,"'Personal' is an all encompassing category, that can range from what foods I eat to exercise or any\nnon technical skills I'd like to focus on."),x("hr",null),x("h2",null,"Rules"),x("ol",null,x("li",{parentName:"ol"},"Each month I will take an aspect of my life from both a technical & person stand point & attempt\nto progressively enhance it."),x("li",{parentName:"ol"},"The monthly challenge should be outlined in a blog post before the 2nd of each month."),x("li",{parentName:"ol"},"The progression, outcome & perceived benefit of each monthly challenge should be detailed in a\nblog post no later than the 1st of the next month.")),x("hr",null),x("p",null,"God Speed Daniel"))}an.isMDXComponent=!0;var rn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"It takes 21 days to form a habit",author:"Daniel Sinnott",id:2,tags:["Monthly Challenge"],date:"Wed, 31st Jan 2018",created:on,default:an});const ln=new Date(1522075625542);function sn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"The concurrency model of ",x("inlineCode",{parentName:"p"},"Java")," & ",x("inlineCode",{parentName:"p"},"Javascript")," is very different."),x("p",null,"I was to discuss them both today from the context of setting a variable to be used throughout a\nsingle business process. Consider a server which receives a ",x("inlineCode",{parentName:"p"},"GET")," request. At some point during the\nbusiness process carried out during the request lifecycle something is written to a log file. If we\nconsider the request to a single transaction, we might want the transaction's ID to be included in\nthe log as we might have several transaction writing to log at the same time."),x("h3",null,"Java"),x("p",null,"Java uses a multi-threading model. A thread according the Javadocs is a thread of execution of a\nprogram. Commands in the same thread execute sequentially. When a blocking command is executed (e.g.\nI/O) the thread will wait for it to be completed until is executes the next command, however this\nwill not prevent other threads from executing, therefore not completely blocking the application.\nThreads can be seen to be wasteful with resources as they may be sitting there doing nothing while\nwaiting, however they allow for a much easier development experience. Enter ",x("a",{href:"https://docs.oracle.com/javase/7/docs/api/java/lang/ThreadLocal.html",parentName:"p"},x("inlineCode",{parentName:"a"},"ThreadLocal")),"."),x("pre",null,x("code",{className:"language-java",parentName:"pre"},"public class Transaction {\n\n  // Initialise ThreadLocal which contains a map to store all of our Thread scoped variables\n  private static ThreadLocal<HashMap<Object, Object>> threadScopedVariable =\n      new ThreadLocal<HashMap<Object, Object>>();\n\n  // Getter\n  public static getThreadScopedVariable(Object identifier){\n      return threadScopedVariables.get(identifier);\n  }\n\n  // Setter\n  public setThreadScopedVariable(Object identifier, Object variable) {\n      threadScopedVariables.set(identifier);\n  }\n\n}\n")),x("p",null,"The above class can be used to set variables that are scoped to each individual thread. For example\nsetting a transactionID."),x("h3",null,"Javascript"),x("p",null,"Javascript uses a single threaded, event loop based concurrency model. All execution of code happens\nin the same thread (ignoring ",x("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers",parentName:"p"},"Web Workers")," in browser land). If a command blocks the thread, the\napplication comes to a halt until that command finishes. Its poor practice & actively discourages to\nwrite blocking code. Callbacks & Promises go a long way to helping write good javascript commands.\nThese both rely on the event loop. For more info on the event loop see my post ",x("a",{href:"/blog/7",parentName:"p"},"Task, Microtasks &\nAutomobiles"),'. In layman\'s terms, the when a "Task" is blocked the event loop will pick up another to\nexecute until the previous is ready. This can be very efficient with resources, however it makes it\nvery difficult to determine is a command is happening in the same transaction as another command as\nthey all run on the same thread.'),x("p",null,"Those familiar with this issue in Javascript may immediately think of ",x("a",{href:"https://github.com/othiym23/node-continuation-local-storage",parentName:"p"},"Continuation-Local Storage"),"\n(CLS), however this implementation has issues & loses context is certain situations, hence packages\nlike ",x("a",{href:"https://www.npmjs.com/package/cls-bluebird",parentName:"p"},"cls-bluebird")," patching CLS in some situations but not all."),x("p",null,"Enter ",x("a",{href:"https://nodejs.org/api/async_hooks.html",parentName:"p"},x("inlineCode",{parentName:"a"},"AsyncHooks")),". AsyncHooks is a (currently as of v9.9) experimental API in NodeJS. It allows\nfor a lifecycle to be added around each async resource execution to contains a reference to its\nAsyncID & its parents AsyncID. From this its possible to build up a thread like transaction model."),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'const asyncHooks = require("async_hooks");\n\nconst map = new Map();\n\nconst hook = asyncHooks.createHook({\n    /**\n     * Sets the parent\'s context as the current context\n     */\n    init: function init(asyncId, type, triggerAsyncId) {\n        const parentContext = map.get(triggerAsyncId);\n        if (parentContext) {\n            // set parent context as current context\n            map.set(asyncId, parentContext);\n        }\n    },\n\n    /**\n     * Remove the data\n     */\n    destroy: function destroy(asyncId) {\n        if (map.has(asyncId)) {\n            map.delete(asyncId);\n        }\n    },\n});\nhook.enable();\n\n/**\n * Set the key/value for this score\n * @param {String} key The key of value\n * @param {String} value The value\n */\nexports.set = function setValue(key, value) {\n    const id = asyncHooks.executionAsyncId();\n    let data = map.get(id);\n    if (!data) {\n        data = {};\n        map.set(id, data);\n    }\n    data[key] = value;\n};\n\n/**\n * Get the value by key\n * @param {String} key The key of value\n */\nexports.get = function getValue(key) {\n    const id = asyncHooks.executionAsyncId();\n    const data = map.get(id);\n    return data[key];\n};\n')),x("p",null,"The above javascript code is analogous to the Java code earlier. Both include a getter & setter for\ntransaction scoped variable. The call to ",x("inlineCode",{parentName:"p"},"asyncHooks.createHook")," creates init & destroy lifecycle\nhook around each async resource which allows us to keep track of the context in which the resource\nis operating. A transaction scoped variable can be placed into that context & access by code which\nis a child of the code which created the context. E.g. if we created a TransactionID variable & put\nit into the context at the very beginning of our request lifecycle, it can be accessed by an code\ncalled during that request."),x("p",null,"AsyncHooks do a performance impact as the extra code being called & extra object being stored in\nmemory, however it allows you to write much cleaner code as the TransactionID or even a database\ntransaction object don't need to be passed around to event function in the entire application. The\ncan simple be accessed when needed."))}sn.isMDXComponent=!0;var cn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Javascript's own ThreadLocal",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/VPnnX8P.png",id:12,tags:["Javascript","AsyncHooks"],date:"Mon, 26th Mar 2018",created:ln,default:sn});const pn=new Date(1519948692714);function dn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"The technical challenge for February, as outlined in ",x("a",{href:"/blog/6",parentName:"p"},"One month at a time"),", was to do a complete\nrewrite of the Data Access Layer for this blog."),x("p",null,"The goal was to end up with an ORM like infrastructure that would let me easily work with my data\nmodel."),x("h2",null,"Influences"),x("p",null,"I browsed the source code of several javascript ORMs at the start of the month to gauge the size of\nthe mountain I was about to climb. The 2 which stood out to me were:"),x("ul",null,x("li",{parentName:"ul"},x("a",{href:"https://github.com/sequelize/sequelize",parentName:"li"},"Sequelize")," is a well established ORM which contains all the bells & whistles. Its no wonder\nthat this package has been downloaded 900,000+ in the last month."),x("li",{parentName:"ul"},x("a",{href:"https://github.com/1602/jugglingdb",parentName:"li"},"JugglingDB")," impressed me with its simplicity. Its also no wonder that it became part of\nStrongLoop's popular LoopBack framework.")),x("h2",null,"Requirements"),x("ul",null,x("li",{parentName:"ul"},"Ability to define database Entities/Tables."),x("li",{parentName:"ul"},"Ability to easily perform CRUD operations on those entities."),x("li",{parentName:"ul"},"Ability to define & work with entity associations / relationships / foreign references."),x("li",{parentName:"ul"},"Efficient persisting of data")),x("hr",null),x("h3",null,"Ability to define database Entities/Tables"),x("p",null,"The following is my definition for my User entity. Based on this definition, a database table\ndefinition & A User constructor is created, with getters & setters for the defined attributes. Each\nentity will be automatically given a primary key of ID."),x("p",null,"ORM.define API is defined as follows"),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},"ORM.define(ModelName, AttributeObject, Options)\nModelName: <String> The name of the Model/Entity/Database table\nAttribute: <Object> Contains key value pairings of Model attribute name to attribute definition\nOptions: <Object> Contains extra model options. Such as the custom attributes displayed below. The object is where the majority of the progressive enhancement to this infrastructure will take place. E.g. optimistic locking & temporal attributes (created_on & last_modified_on)\n")),x("p",null,"Custom Attributes allow for derived data to be accessible on the Model object."),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'const ORM = require("sinnott-orm");\nconst DataTypes = ORM.DataTypes;\n\nconst User = ORM.define(\n    "user",\n    {\n        username: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n            unique: true,\n        },\n        firstname: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n        },\n        lastname: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n        },\n        dob: {\n            type: DataTypes.TIMESTAMP,\n            notNull: true,\n        },\n    },\n    {\n        customAttributes: {\n            fullname: {\n                get: function () {\n                    return `${this.firstname} ${this.lastname}`;\n                },\n            },\n        },\n    },\n);\n')),x("h3",null,"Ability to easily perform CRUD operations on those entities"),x("p",null,"The following is a snippet from this blog's BlogPostRouter. The post verb is responsible for\ncreating a new BlogPost. Its as simple as creating a new BlogPost & saving it."),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'router.post("/", async function (req, res) {\n    const blogpostData = { ...req.body };\n    const blogPost = new BlogPost(blogpostData);\n    await blogPost.save();\n    res.json(blogPost);\n});\n')),x("p",null,"The infrastructure knows this is a brand new BlogPost & sends an SQL INSERT command to the database.\nAny further modification to blogPost must also be persisted by calling save. This will result in an\nSQL update."),x("h3",null,"Ability to define & work with entity associations / relationships / foreign references"),x("p",null,"The infrastructure allows for all three of the possible table relationships:"),x("ul",null,x("li",{parentName:"ul"},"One to One"),x("li",{parentName:"ul"},"One to Many"),x("li",{parentName:"ul"},"Many to One")),x("p",null,"Below is an example of a One to Many relationship."),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'User.oneToMany(BlogPost, { as: "author" });\n')),x("p",null,"We are defining a One to Many relationship between User & BlogPost. i.e A User can have many\nBlogPosts. A foreign key reference to User is added onto the BlogPost entity. The 'as' option is\nalso defined, so we are saying the User associated with a BlogPost will be referred to as the\nAuthor."),x("p",null,"Below is an example of how to read a blog post & include is author. Calling save on the returned\nentity will attempt to save any changes to both the blogpost & the associated author."),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'BlogPost.get(id, { includes: ["author"] });\n')),x("h3",null,"Efficient persisting of data"),x("p",null,"Calling save on highly nested entities may result in a large number of SQL insert / modify commands\nbeing executed. This could be very resource consuming & inefficient. What is no attributes on the\nentities had changed?"),x("p",null,"For this reason the ORM infrastructure has the concept of dirty data. It will only execute SQL\ncommands for an entity when it contains attributes who's values changed since the entity was read\nfrom the database or who's values were input by the user. This not only reduces the number of SQL\ncommands down to only what is necessary, but it reduces each individual SQL command down to updating\nonly the attributes which have changed."),x("hr",null),x("h2",null,"Final Points"),x("p",null,"The ORM infrastructure has been fully separated out from the Server directory into its own\ndirectory. This will allow me to update each independently."),x("p",null,"The ORM also nowhere near finished. This is the MVP for my Blog app, with the aim to progressively\nenhance the infrastructure as requirements see fit."))}dn.isMDXComponent=!0;var un=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Managing the world's most valuable resource",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/qlIM4k7.png",id:10,tags:["Monthly Challenge","Technical","February","Data","SQL"],date:"Thu, 1st Mar 2018",created:pn,default:dn});const hn=new Date(1524575314299);function mn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Decorators"),x("p",null,"Decorators are a way to add metadata to parts of your Javascript code. Those familar Java will see\nthem as Javascript's implementation of annotations."),x("p",null,"It's worth noting before we get into it that decorators are overly complicated. ",x("strong",{parentName:"p"},"They're just\nfunctions"),"."),x("p",null,"Decorators are currently a ",x("a",{href:"https://tc39.github.io/proposal-decorators/",parentName:"p"},"TC39 Proposal")," to add annotations to the ECMA/Javascript language.\nLuckily, this proposal has already been implemented in Microsoft Typescript, which is a superset of\nJavascript. However, the following ",x("inlineCode",{parentName:"p"},"compilerOptions")," are needed in your ",x("inlineCode",{parentName:"p"},"tsconfig.json")," to allow you\nto use decorators in typescript."),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},'{\n    "compilerOptions": {\n        "experimentalDecorators": true\n    }\n}\n\n')),x("p",null,"Javascript lacks a powerful ",x("inlineCode",{parentName:"p"},"Reflection")," like Java, as such decorators work a little differently to\nannotations. They need to be given access to all variables associated with what they are decorating\nas opposed to being able to examine its own behaviour at runtime."),x("p",null,"Decorators come in five flavours:"),x("ul",null,x("li",{parentName:"ul"},"Class decorators"),x("li",{parentName:"ul"},"Method decorators"),x("li",{parentName:"ul"},"Accessor decorators"),x("li",{parentName:"ul"},"Property decorators"),x("li",{parentName:"ul"},"Parameter decorators")),x("p",null,"According to the Typescript documentation there is a well defined order to how decorators are\napplied at runtime:"),x("blockquote",null,x("ol",{parentName:"blockquote"},x("li",{parentName:"ol"},"Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each\ninstance member."),x("li",{parentName:"ol"},"Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each\nstatic member."),x("li",{parentName:"ol"},"Parameter Decorators are applied for the constructor."),x("li",{parentName:"ol"},"Class Decorators are applied for the class."))),x("h3",null,"Decorator Factories"),x("p",null,"The signature for each of the decorators is defined in the proposal. As such, there isn't much\nflexibility to allow developers to customise the inputs."),x("p",null,"A decorator factory is just a method which returns a decorator. This factory method can take in\nwhatever parameters you'd like as long as it returns the appropriate decorator."),x("h2",null,"Class Decorators"),x("p",null,"Class decorators are applied to an ES2015 class. It's given the class constructor as its only input.\nClass decorators are very powerful, they've the ability to return a different constructor method\nwhich will completely replace the class's own constructor."),x("h4",null,"Signature"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},"ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction;\n")),x("p",null,"where:"),x("ul",null,x("li",{parentName:"ul"},"target = a Constructor function")),x("h4",null,"Example"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},'function JoeBloggs<T extends { new (...args: any[]): {} }>(constructor: T) {\n    return class extends constructor {\n      firstname = "Joe";\n      lastname = "Bloggs"\n   }\n\n@JoeBloggs\nclass Me {\n  firstname = "Daniel";\n  lastname = "Sinnott"\n}\n\nconst daniel = new Me();\nconsole.log(daniel.firstname);\nconsole.log(daniel.lastname);\n')),x("p",null,"The above decorator @JoeBloggs takes in a constructor and replaces it with its returned constructor.\nThe names first & last names logged at the end are Joe & Bloggs."),x("h2",null,"Method Decorators"),x("p",null,"Method decorators are applied above a method. It has the ability either modify a method's property\ndescriptor or to return a completely new property descriptor which will be used instead."),x("h4",null,"Signature"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},"MethodDecorator = <T>(target: Object, key: string, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | Void;\n")),x("p",null,"Where :"),x("ul",null,x("li",{parentName:"ul"},"target = constructor function of the class for a static method, or the prototype of the class\nfor an instance method."),x("li",{parentName:"ul"},"key = the name of the method"),x("li",{parentName:"ul"},"descriptor = the property descriptor of the method")),x("h4",null,"Example"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},'function Enumerable(value: boolean) {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        descriptor.enumerable = value;\n    };\n}\n\nclass Me {\n    @Enumerable(false)\n    title() {\n        return "Your Majesty";\n    }\n    @Enumerable(true)\n    firstname() {\n        return "Daniel";\n    }\n    @Enumerable(true)\n    lastname() {\n        return "Sinnott";\n    }\n}\n\nconst Daniel = new Me();\nfor (const prop in Daniel) {\n    console.log(prop);\n}\n')),x("p",null,'which creates a class with 3 methods which are non-enumerable by default, the added decorator\nspecifies that firstname & lastname should be enumerable. The property loop logs "Daniel" &\n"Sinnott"'),x("h2",null,"Accessor Decorators"),x("p",null,"Accessor decorators all almost identical to method decorators. However, they can only be applied to\neither the ",x("inlineCode",{parentName:"p"},"get")," or ",x("inlineCode",{parentName:"p"},"set")," accessor methods, not both."),x("h2",null,"Property Decorators"),x("p",null,"A Property Decorator is declared just before a class property declaration. Its used to observe that\na property has been declared for a class."),x("h4",null,"Signature"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},"PropertyDecorator = (target: Object, key: string) => Void;\n")),x("p",null,"Where :"),x("ul",null,x("li",{parentName:"ul"},"target = constructor function of the class for a static method, or the prototype of the class\nfor an instance method."),x("li",{parentName:"ul"},"key = the name of the property")),x("h4",null,"Example"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},'function Column(options: {type: string}) {\n    return function(object: Object, propertyName: string): void {\n      // Record database column meta data\n    };\n  }\n\nclass Person {\n  @Column({type: "VARCHAR"})\n  firstname;\n\n  @Column({type: "VARCHAR"})\n  lastname;\n')),x("p",null,"the above example is snippit from my own ORM which is being converted to typescript & decorators to\nallow for a nicer developer experience. It defines a class & records the database metadata for each\nclass property so that it can converted into a database table."),x("h2",null,"Parameter Decorators"),x("p",null,"A Parameter Decorator is declared just before a function parameter declaration. The function can be\na class constructor or a method."),x("p",null,"Parameter decorators are very similar in that they are mainly way of observing that a parameter has\nbeen declared. There isn't a huge amount you can do to the parameter in the decorator. Their power\ncomes from the decorator order. You might remember from above that parameter decorators are\nevaluated first. It then possible to store parameter metadata so that it can then be used in a\nmethod decorator later in the decorator order."),x("h4",null,"Signature"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},"ParameterDecorator = (target: Object, key: string, index: number) => Void;\n")),x("p",null,"where:"),x("ul",null,x("li",{parentName:"ul"},"target = constructor function of the class for a static method, or the prototype of the class\nfor an instance method."),x("li",{parentName:"ul"},"key = the name of the method"),x("li",{parentName:"ul"},"index = the index of the parameter in the function's parameter list")),x("h4",null,"Example"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},'const LOGPARAMS = "LOGPARAMS";\nfunction LogParameter(object, methodName, index) {\n    if (!object[LOGPARAMS]) {\n        object[LOGPARAMS] = [];\n    }\n    object[LOGPARAMS].push(index);\n}\n\nfunction LogMethod(object, methodName, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args) {\n        console.log(`Calling ${object.constructor.name}.${methodName}`);\n        console.log(`with logged params:`);\n        object[LOGPARAMS].reverse().forEach((index) => {\n            const paramValue = args[index];\n            console.log(`${paramValue}`);\n        });\n        return originalMethod.apply(this, args);\n    };\n}\n\nclass Person {\n    fullname: string;\n    @LogMethod\n    setFullname(@LogParameter firstname, middlename, @LogParameter lastname) {\n        this.fullname = `${firstname} ${middlename} ${lastname}`;\n    }\n}\n\nconst me = new Person();\nme.setFullname("Daniel", "Peter", "Sinnott");\nconsole.log(`Fullname is: ${me.fullname}`);\n')),x("p",null,"The above example specifies that it wants to log the method setFullname & the firstname and lastname\nparameters. The LogParameter decorator stores the the index of the params which it whats to log on\nthe actual object."),x("p",null,"Then during the LogMethod decorator we replace the actual setFullname method which our own method\nwhich logs the name of the method & the parameter whose indexes we stored previous, and then finally\ndelegates to the actual setFullname method."),x("p",null,"The example outputs:"),x("blockquote",null,x("p",{parentName:"blockquote"},"Calling Person.setFullname with logged params: Daniel Sinnott Fullname is: Daniel Peter Sinnott")))}mn.isMDXComponent=!0;var gn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Metadata is the new meta",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/UNJ8ecB.png",id:17,tags:["Technical","Decorators","Typescript"],date:"Tue, 24th Apr 2018",created:hn,default:mn});const fn=new Date(1541190472341);function yn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Todo Microservice"),x("h3",null,"Go"),x("p",null,x("a",{href:"https://golang.org/",parentName:"p"},"Golang")," is the perfect language to use for microservices."),x("ul",null,x("li",{parentName:"ul"},"It compiles to a single binary, making deployment a breeze."),x("li",{parentName:"ul"},"It has incredibly low runtime memory."),x("li",{parentName:"ul"},"C & C++ like performance with built in concurrency primitives."),x("li",{parentName:"ul"},"Its standard library supports request cancellation and timeout propagation. Which means less cpu\ncycles if a user cancels or if something is taking too long."),x("li",{parentName:"ul"},"Both Docker & Kubernetes are written in Go.")),x("h4",null,"Installation"),x("p",null,"To install Go, follow the instruction for your platform here: ",x("a",{href:"https://golang.org/doc/install",parentName:"p"},"Go Installation")),x("h3",null,"GoKit"),x("p",null,x("a",{href:"https://gokit.io/",parentName:"p"},"GoKit")," is a lightly opinionated microservice toolkit. It allows developers to focus on writing the\nbusiness logic of their service and plug in transport protocols such as http or gRPC etc, service\ndiscovery, logging and metrics."),x("p",null,"Its been criticised for the amount of boilerplate code that needs to be written, and it is quite\ndaunting on first impression, but this verbosity allows for greater control in the long run. If\nyou're new to GoKit its worth checking out the ",x("a",{href:"https://gokit.io/examples/stringsvc.html",parentName:"p"},"stringsvc example"),"."),x("h4",null,"Installation"),x("p",null,"GoKit can be installed using Go's idiomatic library installation command:"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"go get github.com/go-kit/kit\n")),x("h3",null,"Business Logic"),x("h4",null,"Our Todo"),x("p",null,"Create a file ",x("inlineCode",{parentName:"p"},"model.go")," to define our Todo. Our ",x("inlineCode",{parentName:"p"},"Todo")," is can be simply modelled like below. Feel\nfree to add whatever attributes you'd like. We're using Struct tags to define what each Todo\nattribute will be named when its converted to JSON. The built in JSON encoder will use reflection to\nlook for these tags, otherwise it'll use the attribute name as its defined in Go."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// model.go\npackage todo\n\nimport (\n    "time"\n)\n\n// Todo model\ntype Todo struct {\n    ID        string    `json:"id"`\n    Username  string    `json:"username"`\n    Text      string    `json:"text"`\n    Completed bool      `json:"completed"`\n    CreatedOn time.Time `json:"created_on"`\n}\n\n')),x("h4",null,"Define our service"),x("p",null,"Create a file ",x("inlineCode",{parentName:"p"},"service.go"),". This is going to contain our business logic. Its going to be a single\nInMemory CRUD Todo service. First we'll define an interface for our service. This will allow us to\neasily swap out the implementation later if we want to, for example, store our Todos in a\ndatabase/datastore."),x("p",null,"Our Todo service is a basically a CRUD service for Todos."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// service.go\npackage todo\n\nimport (\n    "context"\n)\n\n// TodoService for Todos\ntype TodoService interface {\n    GetAllForUser(ctx context.Context, username string) ([]Todo, error)\n    GetByID(ctx context.Context, id string) (Todo, error)\n    Add(ctx context.Context, todo Todo) (Todo, error)\n    Update(ctx context.Context, id string, todo Todo) error\n    Delete(ctx context.Context, id string) error\n}\n')),x("h4",null,"Implementation"),x("p",null,"Next, we'll implement our service using an InMemory datastore. Go uses duck typing, so If it walks\nlike a duck and it quacks like a duck, then it must be a duck. There's no need to explicitly say\nwe're implementing the interface, e.g. Java."),x("p",null,"We'll added a ",x("inlineCode",{parentName:"p"},"RWMutex")," to lock the map and prevent concurrent access from multiple threads. The\nconstructor function ",x("inlineCode",{parentName:"p"},"NewInmemTodoService")," instantiates our service."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// service.go\npackage todo\n\nimport (\n    "context"\n    "errors"\n    "math/rand"\n    "sync"\n    "time"\n\n    "github.com/rs/xid"\n)\n\n// TodoService for Todos\ntype TodoService interface {\n    GetAllForUser(ctx context.Context, username string) ([]Todo, error)\n    GetByID(ctx context.Context, id string) (Todo, error)\n    Add(ctx context.Context, todo Todo) (Todo, error)\n    Update(ctx context.Context, id string, todo Todo) error\n    Delete(ctx context.Context, id string) error\n}\n\n// *** Implementation ***\n\nvar (\n    // ErrInconsistentIDs is when the ID of the Entity you are updating differs from the ID given\n    ErrInconsistentIDs = errors.New("Inconsistent IDs")\n    // ErrNotFound is when the Entity doesn\'t exist\n    ErrNotFound = errors.New("Not found")\n)\n\n// NewInmemTodoService creates an in memory Todo service\nfunc NewInmemTodoService() TodoService {\n    s := &inmemService{\n        m: map[string]Todo{},\n    }\n    rand.Seed(time.Now().UnixNano())\n    return s\n}\n\n// inmemService is a In Memory implementation of the service\ntype inmemService struct {\n    sync.RWMutex\n    m map[string]Todo\n}\n\n// GetAllForUser gets Todos from memory for a user\nfunc (s *inmemService) GetAllForUser(ctx context.Context, username string) ([]Todo, error) {\n    s.RLock()\n    defer s.RUnlock()\n\n    todos := make([]Todo, 0, len(s.m))\n    for _, todo := range s.m {\n        if todo.Username == username {\n            todos = append(todos, todo)\n        }\n    }\n\n    return todos, nil\n}\n\n// Get an Todos from the database\nfunc (s *inmemService) GetByID(ctx context.Context, id string) (Todo, error) {\n    s.Lock()\n    defer s.Unlock()\n\n    if todo, ok := s.m[id]; ok {\n        return todo, nil\n    }\n\n    return Todo{}, ErrNotFound\n}\n\n// Add a Todo to memory\nfunc (s *inmemService) Add(ctx context.Context, todo Todo) (Todo, error) {\n    s.Lock()\n    defer s.Unlock()\n\n    todo.ID = xid.New().String()\n    todo.CreatedOn = time.Now()\n\n    s.m[todo.ID] = todo\n    return todo, nil\n}\n\n// Update a Todo in memory\nfunc (s *inmemService) Update(ctx context.Context, id string, todo Todo) error {\n    s.Lock()\n    defer s.Unlock()\n\n    if id != todo.ID {\n        return ErrInconsistentIDs\n    }\n\n    if _, ok := s.m[id]; !ok {\n        return ErrNotFound\n    }\n\n    s.m[todo.ID] = todo\n    return nil\n}\n\n// Delete a Todo from memory\nfunc (s *inmemService) Delete(ctx context.Context, id string) error {\n    s.Lock()\n    defer s.Unlock()\n\n    if _, ok := s.m[id]; !ok {\n        return ErrNotFound\n    }\n\n    delete(s.m, id)\n    return nil\n}\n\n')),x("h3",null,"Endpoints"),x("p",null,x("inlineCode",{parentName:"p"},"Endpoints")," are our first interaction with GoKit. Each interaction with the microservice will be\nthrough an Endpoint. GoKit provides pluggable transport layers out of the box which know how to\ninteract with Endpoints."),x("p",null,"Endpoints have a simple definition. They take in a context and a request, and return a response and\nan error."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"type Endpoint func(ctx context.Context, request interface{}) (response interface{}, err error)\n")),x("p",null,"Each method of our service needs to be wrapped in an endpoint. Endpoints force us to explicitly\nwrite what the inputs and outputs of our microservice will look like."),x("p",null,"You may notice that ",x("inlineCode",{parentName:"p"},"MakeTodoEndpoints")," constructor function takes in our ",x("inlineCode",{parentName:"p"},"TodoService"),". Best\npractices for a GoKit microservice are to use Clean/Hexagonal architectural pattern, where each\nlayer can only wraps and only know about the layers within them."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// endpoint.go\npackage todo\n\nimport (\n    "context"\n\n    "github.com/go-kit/kit/endpoint"\n)\n\n// Endpoints collects all endpoints which compose the Todo service\ntype TodoEndpoints struct {\n    GetAllForUserEndPoint endpoint.Endpoint\n    GetByIDEndpoint       endpoint.Endpoint\n    AddEndpoint           endpoint.Endpoint\n    UpdateEndpoint        endpoint.Endpoint\n    DeleteEndpoint        endpoint.Endpoint\n}\n\n// MakeTodoEndpoints returns an Endpoints struct where each endpoint invokes\n// the corresponding method on the provided Todo\nfunc MakeTodoEndpoints(s TodoService) TodoEndpoints {\n    return TodoEndpoints{\n        GetAllForUserEndPoint: MakeGetAllForUserEndpoint(s),\n        GetByIDEndpoint:       MakeGetByIDEndpoint(s),\n        AddEndpoint:           MakeAddEndpoint(s),\n        UpdateEndpoint:        MakeUpdateEndpoint(s),\n        DeleteEndpoint:        MakeDeleteEndpoint(s),\n    }\n}\n\ntype GetAllForUserRequest struct {\n}\n\ntype GetAllForUserResponse struct {\n    Todos []Todo `json:"todos"`\n}\n\nfunc MakeGetAllForUserEndpoint(s TodoService) endpoint.Endpoint {\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\n        username := ctx.Value("username").(string)\n        todos, err := s.GetAllForUser(ctx, username)\n        return GetAllForUserResponse{todos}, err\n    }\n}\n\ntype GetByIDRequest struct {\n    ID string\n}\n\ntype GetByIDResponse struct {\n    Todo Todo `json:"todo"`\n}\n\nfunc MakeGetByIDEndpoint(s TodoService) endpoint.Endpoint {\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\n        req := request.(GetByIDRequest)\n        todo, err := s.GetByID(ctx, req.ID)\n        return GetByIDResponse{todo}, err\n    }\n}\n\ntype AddRequest struct {\n    Todo Todo\n}\n\ntype AddResponse struct {\n    Todo Todo `json:"todo"`\n}\n\nfunc MakeAddEndpoint(s TodoService) endpoint.Endpoint {\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\n        req := request.(AddRequest)\n        todo, err := s.Add(ctx, req.Todo)\n        return AddResponse{todo}, err\n    }\n}\n\ntype UpdateRequest struct {\n    ID   string\n    Todo Todo\n}\n\ntype UpdateResponse struct {\n}\n\nfunc MakeUpdateEndpoint(s TodoService) endpoint.Endpoint {\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\n        req := request.(UpdateRequest)\n        err := s.Update(ctx, req.ID, req.Todo)\n        return UpdateResponse{}, err\n    }\n}\n\ntype DeleteRequest struct {\n    ID string\n}\n\ntype DeleteResponse struct {\n}\n\nfunc MakeDeleteEndpoint(s TodoService) endpoint.Endpoint {\n    return func(ctx context.Context, request interface{}) (interface{}, error) {\n        req := request.(DeleteRequest)\n        err := s.Delete(ctx, req.ID)\n        return DeleteResponse{}, err\n    }\n}\n\n')),x("h3",null,"Transport Layer"),x("p",null,"The ",x("inlineCode",{parentName:"p"},"transport.go")," is responsible for converting a transport layer request into an endpoint call.\nFor this tutorial we're using ",x("inlineCode",{parentName:"p"},"HTTP")," as our transport protocol, but we could as easily use something\nlike ",x("inlineCode",{parentName:"p"},"gRPC"),". Go-Kit provides support for ",x("inlineCode",{parentName:"p"},"Http"),", ",x("inlineCode",{parentName:"p"},"gRPC"),", ",x("inlineCode",{parentName:"p"},"NATs")," and ",x("inlineCode",{parentName:"p"},"Thrift")," out of the box, but\nit's relatively simple to add support for other protocols."),x("p",null,"Our ",x("inlineCode",{parentName:"p"},"transport.go")," is responsible for handling everything to do with http, like creating a route for\neach service method or decoding any parameters. We're using great http routing library ",x("a",{href:"https://github.com/go-chi/chi",parentName:"p"},"Chi"),", which\ncomes with some really nice middleware."),x("p",null,"We create a method to decode each request, i.e. read all the input paramaters; and a single method\nto encode the each response, in which we also add some error handling."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// transport.go\npackage todo\n\nimport (\n    "context"\n    "encoding/json"\n    "errors"\n    "net/http"\n\n    "github.com/go-chi/render"\n\n    "github.com/go-chi/chi"\n    chiMiddleware "github.com/go-chi/chi/middleware"\n    httptransport "github.com/go-kit/kit/transport/http"\n)\n\n// ErrMissingParam is thrown when an http request is missing a URL Parameter\nvar ErrMissingParam = errors.New("Missing parameter")\n\n// MakeHTTPHandler creates http transport layer for the Todo service\nfunc MakeHTTPHandler(endpoints TodoEndpoints) http.Handler {\n\n    options := []httptransport.ServerOption{\n        httptransport.ServerErrorEncoder(encodeError),\n    }\n\n    r := chi.NewRouter()\n    r.Use(chiMiddleware.Logger)\n    r.Use(chiMiddleware.StripSlashes)\n    r.Use(chiMiddleware.DefaultCompress)\n\n    todoRouter := chi.NewRouter()\n\n    todoRouter.Get("/", httptransport.NewServer(\n        endpoints.GetAllForUserEndPoint,\n        decodeGetRequest,\n        encodeResponse,\n        options...,\n    ).ServeHTTP)\n\n    todoRouter.Get("/{id}", httptransport.NewServer(\n        endpoints.GetByIDEndpoint,\n        decodeGetByIDRequest,\n        encodeResponse,\n        options...,\n    ).ServeHTTP)\n\n    todoRouter.Post("/", httptransport.NewServer(\n        endpoints.AddEndpoint,\n        decodeAddRequest,\n        encodeResponse,\n        options...,\n    ).ServeHTTP)\n\n    todoRouter.Put("/{id}", httptransport.NewServer(\n        endpoints.UpdateEndpoint,\n        decodeUpdateRequest,\n        encodeResponse,\n        options...,\n    ).ServeHTTP)\n\n    todoRouter.Delete("/{id}", httptransport.NewServer(\n        endpoints.DeleteEndpoint,\n        decodeDeleteRequest,\n        encodeResponse,\n        options...,\n    ).ServeHTTP)\n\n    r.Mount("/todos", todoRouter)\n\n    return r\n}\n\nfunc decodeGetRequest(ctx context.Context, r *http.Request) (request interface{}, err error) {\n    return GetAllForUserRequest{}, err\n}\n\nfunc decodeGetByIDRequest(ctx context.Context, r *http.Request) (request interface{}, err error) {\n    id := chi.URLParam(r, "id")\n    if id == "" {\n        return nil, ErrMissingParam\n    }\n    return GetByIDRequest{id}, err\n}\n\nfunc decodeAddRequest(ctx context.Context, r *http.Request) (request interface{}, err error) {\n    var todo Todo\n    err = render.Decode(r, &todo)\n    if err != nil {\n        return nil, err\n    }\n    return AddRequest{todo}, err\n}\n\nfunc decodeUpdateRequest(ctx context.Context, r *http.Request) (request interface{}, err error) {\n    id := chi.URLParam(r, "id")\n    if id == "" {\n        return nil, ErrMissingParam\n    }\n    var todo Todo\n    err = render.Decode(r, &todo)\n    if err != nil {\n        return nil, err\n    }\n    return UpdateRequest{id, todo}, err\n}\n\nfunc decodeDeleteRequest(ctx context.Context, r *http.Request) (request interface{}, err error) {\n    id := chi.URLParam(r, "id")\n    if id == "" {\n        return nil, ErrMissingParam\n    }\n    return DeleteRequest{id}, err\n}\n\nfunc encodeResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {\n    if err, ok := response.(error); ok && err != nil {\n        encodeError(ctx, err, w)\n        return nil\n    }\n    w.Header().Set("Content-Type", "application/json; charset=utf-8")\n    return json.NewEncoder(w).Encode(response)\n}\n\nfunc encodeError(_ context.Context, err error, w http.ResponseWriter) {\n    if err == nil {\n        panic("encodeError with nil error")\n    }\n    w.Header().Set("Content-Type", "application/json; charset=utf-8")\n    w.WriteHeader(codeFrom(err))\n    json.NewEncoder(w).Encode(map[string]string{\n        "error": err.Error(),\n    })\n}\n\nfunc codeFrom(err error) int {\n    switch err {\n    case ErrNotFound:\n        return http.StatusNotFound\n    case ErrInconsistentIDs, ErrMissingParam:\n        return http.StatusBadRequest\n    default:\n        return http.StatusInternalServerError\n    }\n}\n\n')),x("h3",null,"Main"),x("p",null,"Finally our ",x("inlineCode",{parentName:"p"},"main.go")," is responsible for instantiating everything and starting our Http server. You\ncan see the hexagonal architecture in the way we instantiate an inner layer and pass them as the\ninput into the immediately outer layer."),x("p",null,"Below we create our service, our endpoints and start our transport layer."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// main.go\npackage main\n\nimport (\n    "net/http"\n\n    "github.com/sinnott74/TodoService/internal/todo"\n)\n\nfunc main() {\n\n    service := todo.NewInmemTodoService()\n\n    endpoints := todo.MakeTodoEndpoints(service)\n\n    err := http.ListenAndServe(":8000", todo.MakeHTTPHandler(endpoints))\n    if err != nil {\n        panic(err)\n    }\n}\n\n')),x("p",null,"Running ",x("inlineCode",{parentName:"p"},"go run main.go")," will start our Todo service on port 8000."))}yn.isMDXComponent=!0;var bn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Microservices with GoKit",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/4Ep7VSO.png",id:26,tags:["Technical","Microservices","Golang","GoKit"],date:"Fri, 2nd Nov 2018",created:fn,default:yn});const wn=new Date(1517498953953);function xn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"The first personal challenge was battle of will power. I decided that I would consume healthily for\nthe month. That meant cutting out crisps, chocolate & most importantly alcohol."),x("h3",null,"Smooth Sailing"),x("p",null,"The first two week were a breeze. People generally over consume over the Christmas period so it\nfairly easy to not eat chocolate or crisps when you're sitting at home. The biggest temptation I had\nwas a giant dairy milk bar I was given for Christmas. The bar was is almost 1Kg in weight (850g).\nI've included a standard bic pen in the picture for scale."),x("p",null,x("img",{src:"https://i.imgur.com/s5tRxaT.jpg",alt:"Giant Chocolate Bar",title:"Giant Chocolate Bar",parentName:"p"})),x("p",null,'Its also very easy to not drink over the first two week of January. The run up to Christmas, "Silly\nSeason", is filled with meeting friends, family & coworkers for a drink. So much so that people\ngenerally take a the first couple weekends of the year to do some R&R.'),x("h3",null,"Creeping Cravings"),x("p",null,"As the January week rolled on, it became much more difficult to stick to this."),x("p",null,'Snacking was inevitable, but I aimed to control what kind of snack I\'d have. If I could find a\n"health" alternative, I could eat it.'),x("ul",null,x("li",{parentName:"ul"},"Instead of chips & dip, I'd have crackers & hummus"),x("li",{parentName:"ul"},"Instead of chocolate, I'd allow myself to have a protein back if it was low in sugar etc."),x("li",{parentName:"ul"},"I even convinced myself that a can of Coke Zero can be considerer a healthy alternative to\nregular Coke")),x("p",null,"Alcohol only became an issue in social situations. I've never really been a bottle of beer midweek\nor a glass of wine at dinner type of person, but I do enjoy the ole drop with friends at the\nweekend. As you can imagine most social evening events in Dublin have theme of alcohol. The game of\navoiding drink became more about picking & choosing which events to go to. e.g. Meeting a friend in\nthe pub for one was out of the question."),x("h3",null,"Healthy Heedings"),x("p",null,"Now that the month is over I can reflect. The cravings for chocolate never went away. I almost\ncaught myself drooling over a picture of an Oreo brownie yesterday, on the last day of the\nchallenge."),x("p",null,"I found myself eating much healthier lunches & dinners as a result, but also noticed that its very\ndifficult to get good food on the run. Previously I wouldn't have thought twice about about a take\naway. There was a noticeable difference in my body fat composition. My weight fell from 82Kg to\n80.5Kg."),x("p",null,"As for the drink, I never really missed or craved it, but I am looking forward to enjoying a pint\nwhile watching Ireland play France in the first game of the Six Nations this weekend & enjoying the\nsocial setting that alcohol lubricates."),x("p",null,"I'm aware of the cyclic nature of food, how somebody can go from eating healthy to being able to\nrationalise eating an entire pan of brownies by himself."),x("p",null,"Daniel"))}xn.isMDXComponent=!0;var vn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"My body is a temple",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/Z2TGSLA.jpg",id:5,tags:["Monthly Challenge","January","Personal","Healthy"],date:"Thu, 1st Feb 2018",created:wn,default:xn});const kn=new Date(1525194497752);function Nn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Typescript"),x("p",null,"The technical goal for this month was to convert server for this blog from javascript to a\ntypescript. As this project grows & new features are added, it becomes quite difficult to prevent\ninadvertent side affects. Test suites & good documentation can only bring a project so far, but the\nability to move quickly is paramount. The less time spent investigating how something works, the\nmore time there is to create solutions to real world problems."),x("h3",null,"Migration"),x("p",null,"The migration to typescript was relatively painless and was done incrementally on a file by file\nbasis. I started by adding a fairly relaxed (not strict) ",x("inlineCode",{parentName:"p"},"tsconfig.json")),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},'{\n    "compilerOptions": {\n        "outDir": "./dist",\n        "allowJs": true,\n        "target": "es2017",\n        "noImplicitAny": true,\n    },\n    "include": [\n        "./src/**/*"\n    ]\n}\n')),x("p",null,"A build step then needs to be adde to convert your typescript to runnable javascript. A good\nlocation for this is ",x("inlineCode",{parentName:"p"},"package.json")," but your gulp script, webpack config file or any other build\nfile could be used."),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'"scripts": {\n    "prestart": "tsc",\n    "start": "node dist/index.js",\n}\n')),x("p",null,"We can now slowly begin converting our files to typescript & slowly making our configuration more &\nmore strict to weed out any potential errors."),x("p",null,"Microsoft has useful ",x("a",{href:"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html",parentName:"p"},"migration documentation")," on their typescript site."),x("h3",null,"Features"),x("p",null,"Because typescript compiles to runnable javascript, it allows developers to use features that\nhaven't been implemented in NodeJS yet. A notable feature that I'm making use of in my ORM\ninfrastructure is ",x("a",{href:"/blog/17",parentName:"p"},"Decorators"),"."),x("p",null,"It allowed me to simply my model definition files & also allow the use of the models to by fully\ntyped. A quick comparison of the below files will allow you to see the difference & ease of\nunderstanding that this feature provides."),x("h4",null,"Old javascript ORM entity file"),x("pre",null,x("code",{className:"language-javascript",parentName:"pre"},'const ORM = require("sinnott-orm");\nconst DataTypes = ORM.DataTypes;\n\nconst User = ORM.define(\n    "user",\n    {\n        username: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n            unique: true,\n        },\n        firstname: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n        },\n        lastname: {\n            type: DataTypes.STRING,\n            length: 30,\n            notNull: true,\n        },\n        dob: {\n            type: DataTypes.TIMESTAMP,\n            notNull: true,\n        },\n    },\n    {\n        customAttributes: {\n            fullname: {\n                get: function () {\n                    return `${this.firstname} ${this.lastname}`;\n                },\n            },\n        },\n    },\n);\n\nUser.isUsernameAvailable = async function (username) {\n    let count = await User.count({ username });\n    if (count > 0) {\n        return false;\n    }\n    return true;\n};\n\nUser.readByUsername = async function (username) {\n    return User.findOne({ username: username });\n};\n\nmodule.exports = User;\n')),x("h4",null,"New typescript ORM entity file"),x("pre",null,x("code",{className:"language-typescript",parentName:"pre"},'import { Entity, Column, DerivedColumn, BaseModel, STRING, TIMESTAMP } from "sinnott-orm-typed";\nimport InformationalException from "../exception/InformationalException";\n\n@Entity()\nexport default class User extends BaseModel {\n    @Column({ type: STRING, notNull: true, length: 30 })\n    username: string;\n\n    @Column({ type: STRING, notNull: true, length: 30 })\n    firstname: string;\n\n    @Column({ type: STRING, notNull: true, length: 30 })\n    lastname: string;\n\n    @Column({ type: TIMESTAMP, notNull: true })\n    dob: Date;\n\n    @DerivedColumn({\n        get: function () {\n            return `${this.firstname} ${this.lastname}`;\n        },\n    })\n    fullname: string;\n\n    async beforeSave() {\n        const isUsernameAvailable = await User.isUsernameAvailable(this.username);\n        if (!isUsernameAvailable) {\n            throw new InformationalException("Duplicate username");\n        }\n    }\n\n    /**\n     * Checks if a username hasn\'t already been taken\n     * @param username\n     */\n    static async isUsernameAvailable(username: string) {\n        const count = await User.count({ username });\n        return !(count > 0);\n    }\n\n    /**\n     * Reads a User by their username\n     * @param username\n     */\n    static async readByUsername(username: string) {\n        return User.findOne<User>({ username: username });\n    }\n}\n')),x("h3",null,"Benchmarks"),x("p",null,"Strong typing may be a pleasure to work with from a development point of view, but if it impacted\nperformance of the application there would be major questions about whether it'd be worth it."),x("p",null,"We can see from the benchmark results below that the performance of the javascript & typescript\nversions of the server are virtually identical. This is largely expected. We're using NodeJS 9+ so\nwe can get access to the latest & greatest features. The transpilation from javascript to typescript\nonly really affects the import statements & the decorators used. If however we were to transpile\ndown to a version of javascript which doesn't support advanced language features like async await\nfor instance, the performance may take a hit."),x("p",null,"The below benchmark was performed using ",x("a",{href:"https://httpd.apache.org/docs/2.4/programs/ab.html",parentName:"p"},"Apache Benchmark")," (ab), which is was incredibly simple to\nuse."),x("h4",null,"Javascript implementation"),x("pre",null,x("code",{parentName:"pre"},"ab -n 100 -c 5 https://*************/api/blogposts/17\nThis is ApacheBench, Version 2.3 <$Revision: 1807734 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking ************* (be patient).....done\n\n\nServer Software:\nServer Hostname:        *************\nServer Port:            443\nSSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES256-GCM-SHA384,2048,256\nTLS Server Name:        *************\n\nDocument Path:          /api/blogposts/17\nDocument Length:        8385 bytes\n\nConcurrency Level:      5\nTime taken for tests:   15.004 seconds\nComplete requests:      100\nFailed requests:        0\nTotal transferred:      887782 bytes\nHTML transferred:       838500 bytes\n**Requests per second:    6.67 [#/sec] (mean)**\nTime per request:       750.179 [ms] (mean)\nTime per request:       150.036 [ms] (mean, across all concurrent requests)\nTransfer rate:          57.78 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:      419  443  26.4    434     583\nProcessing:   271  288  32.0    281     570\nWaiting:      143  156  26.1    149     363\nTotal:        694  731  51.3    717    1153\n\nPercentage of the requests served within a certain time (ms)\n  50%    717\n  66%    725\n  75%    733\n  80%    740\n  90%    786\n  95%    802\n  98%    833\n  99%   1153\n 100%   1153 (longest request)\n")),x("h4",null,"Typescript Implementation"),x("pre",null,x("code",{parentName:"pre"},"ab  -n 100 -c 5 https://*************/api/blogposts/9\nThis is ApacheBench, Version 2.3 <$Revision: 1807734 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking ************* (be patient).....done\n\n\nServer Software:\nServer Hostname:        *************\nServer Port:            443\nSSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES256-GCM-SHA384,2048,256\nTLS Server Name:        *************\n\nDocument Path:          /api/blogposts/9\nDocument Length:        8400 bytes\n\nConcurrency Level:      5\nTime taken for tests:   14.810 seconds\nComplete requests:      100\nFailed requests:        0\nTotal transferred:      889256 bytes\nHTML transferred:       840000 bytes\nRequests per second:    6.75 [#/sec] (mean)\nTime per request:       740.517 [ms] (mean)\nTime per request:       148.103 [ms] (mean, across all concurrent requests)\nTransfer rate:          58.64 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:      416  435  19.8    428     548\nProcessing:   273  294  52.1    284     758\nWaiting:      144  164  48.5    153     597\nTotal:        692  729  57.6    715    1206\n\nPercentage of the requests served within a certain time (ms)\n  50%    715\n  66%    723\n  75%    732\n  80%    735\n  90%    775\n  95%    822\n  98%    840\n  99%   1206\n 100%   1206 (longest request)\n")))}Nn.isMDXComponent=!0;var Tn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"My type(script) of code",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/V2exSsi.png",id:18,tags:["Monthly Challenge","Technical","Typescript","April"],date:"Tue, 1st May 2018",created:kn,default:Nn});const Cn=new Date(1517574696533);function In(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"February will make the first real monthly challenge. The first month that I'll state at the\nbeginning what I'm attempting to do. While January was quite tough in the amount work that was\nrequired, there was always a voice in the back of my head that said if I missed the deadline nobody\nwill know."),x("h3",null,"Technical"),x("h4",null,"The worlds most valuable resource"),x("p",null,"The technical challenge for February is a complete rewrite to how this blog interacts with a\ndatabase. The goal is to produce ORM like infrastructure tailored to my needed, with a longer term\ngoal (not in February) to using the data model to influence client screens. There's several widely\nused and well documented ORMs in the javascript space. By using one of these I'll quickly be able to\ngenerate & interact with my database, but the goal is to familiarise myself with the inner workings\nof and problems faced by an ORM."),x("p",null,x("img",{src:"https://i.imgur.com/DLzHUSM.png",alt:"Database",title:"Database",parentName:"p"})),x("h3",null,"Personal"),x("h4",null,"Keep your chin Up"),x("p",null,"The personal challenge for February is to work on my posture and mobility. Having a desk job and\nconstantly working with a computer doesn't lend itself very well to having good posture or mobility.\nThese factors have an big influence in the quality of your later life, shown though the simple ",x("a",{href:"http://journals.sagepub.com/doi/abs/10.1177/2047487312471759",parentName:"p"},"sit\nrising test"),"."),x("p",null,"It would be impossible for fully correct anyones posture in a month, so for this challenge I'm going\nto focus on 3 key areas:"),x("ul",null,x("li",{parentName:"ul"},"Hip flexibility"),x("li",{parentName:"ul"},"Rounded shoulders"),x("li",{parentName:"ul"},"Forward neck")),x("p",null,"While I may not hugely suffer from any of the above; learning about them and doing the various\nexercises should have a positive effect on my life."),x("p",null,x("img",{src:"https://i.imgur.com/6WNusUb.jpg",alt:"Computer posture",title:"Computer posture",parentName:"p"})),x("p",null,"One month at a time Daniel"))}In.isMDXComponent=!0;var An=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"One month at a time",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/3Kz6L39.jpg",id:6,tags:["Monthly Challenge","February"],date:"Fri, 2nd Feb 2018",created:Cn,default:In});const Pn=new Date(1522692519e3);function Rn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"As the title suggest the goal for this month to gain some piece of mind. Websters defines it as:"),x("blockquote",null,x("p",{parentName:"blockquote"},"a feeling of being safe or protected")),x("p",null,"but I would go a little further and say piece of mind is about comfort and the ability to look\nforward to the future without worry."),x("h3",null,"Technical"),x("h4",null,"Types & Tests"),x("p",null,"I've been using this blog to spur on in mainly the Javascript world. The skills that pay the bills\nare primarily Java (and some proprietary enterprise technologies). Javascript is a hugely powerful &\nflexible language that really it taking over the world. Let's not forget Atwood's law"),x("blockquote",null,x("p",{parentName:"blockquote"},"Any application that can be written in JavaScript, will eventually be written in JavaScript.")),x("p",null,"It's loosely typed nature can be very beneficial but as I plan for the future development it's very\ndifficult to shake the feeling that loose typing will inevitably lead to some in insidious bugs. The\npaper ",x("a",{href:"http://ttendency.cs.ucl.ac.uk/projects/type_study/documents/type_study.pdf",parentName:"p"},"To Type or Not to Type")," by Gao et al. 2017. found that a type system"),x("blockquote",null,x("p",{parentName:"blockquote"},"could have prevented 15% of the public bugs for public projects on GitHub.")),x("p",null,"A goal for this month to to migrate my sever to use Typescript instead of Javascript. This also\nincludes migrating my ORM infrastructure."),x("p",null,"Secondly, as this has just been a personal project and not at an enterprise level. I've really\nfallen short on expected tests & code coverage. Like the reasons for including type system above,\nthis will become a bigger problem down the line. My second technical goal for this month is to being\nup my testing up to par"),x("h3",null,"Personal"),x("h4",null,"The Morning Rush"),x("p",null,"I generally have a very nice commute into work. I drive and it takes roughly 30 minutes in the\nmorning & 50 in the evening. I sometimes get jealous of those that commute by bus or cycle. The bus\ngoers gain extra time to concentrate on what they'd like since they don't have to focus on the road.\nThe cyclist save time in the evening since they already have their exercise done."),x("p",null,"I try to use my commute as effectively as I can. Focusing mainly on listening to podcasts instead of\nmorning/drive time radio nonsense."),x("p",null,"My goal for this month is to do my morning commute in silence. I hope it will force me to think\nabout my day/week/month ahead & benefit me in the long run."),x("p",null,"To quote plato"),x("blockquote",null,x("p",{parentName:"blockquote"},"A life unexamined is not a life worth living")))}Rn.isMDXComponent=!0;var Sn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Piece of mind",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/3GLp5f0.jpg",id:16,tags:["Monthly Challenge","April","Testing","Mindfulness"],date:"Mon, 2nd Apr 2018",created:Pn,default:Rn});const Bn=new Date(1522621406666);function Dn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"My goal for this month was to fix some small UI/UX issues that I noticed from interacting with the\nblog:"),x("ul",null,x("li",{parentName:"ul"},"The navigation bar needs to be personalised"),x("li",{parentName:"ul"},"Each of these blogs are written in [Markdown], and it's a bit annoying to have to save the blog\npost before I can view how it will look.")),x("h2",null,"Side Navigation"),x("h3",null,"Old"),x("p",null,"The old side navigation needed to be personalised. There's quite a lot history in the side nav. It\nwas originally built following an ",x("a",{href:"https://developers.google.com/web/fundamentals/architecture/app-shell",parentName:"p"},"App Shell")," tutorial. The side nav then transformed multiple times\ndepending on the technology I was using at the time. Beginning with a handlebars based app, which\nthen was converted to a PolymerJS app & now finally built in React. The App Shell title & colourful\nimage are hangovers from the original side nav until I was fully decided on what should be placed\nthere."),x("p",null,x("img",{src:"https://i.imgur.com/NS5tOp3.png",alt:"Old Bloglist Page",title:"Old bloglist page",parentName:"p"})),x("h3",null,"New"),x("p",null,"The new side nav is much cleaner & personalised for myself. Although the side nav doesn't contain a\nlot of colour, I feel it's still very vibrant."),x("p",null,"Another update that definitely worth mentioning is that blogposts can now be tagged as you'll see\nbelow. This will allow for a nice filtering feature in the future."),x("p",null,x("img",{src:"https://i.imgur.com/srSXoUN.png",alt:"New Bloglist Page",title:"New bloglist page",parentName:"p"})),x("h2",null,"Blog Editor"),x("h3",null,"Old"),x("p",null,"The old blog editor was a pain to use. Blogs are written in markdown. So in order for me to preview\nif the blog was looking as I would have expected, I had to save the blog post, view it & then click\nedit again if I i wanted to continue writing."),x("p",null,x("img",{src:"https://i.imgur.com/tHkNp79.png",alt:"Old BlogEditor Page",title:"Old blog editor page",parentName:"p"})),x("h3",null,"New"),x("p",null,"The new blog editor is not only much easier to use but it's also much more visually appealing. The\ntabs at the top allow the editor to easily switch between the editor view & the preview view. This\nis fully mobile ready & allows users to swipe between views."),x("p",null,"The editor takes advantage of ",x("a",{href:"https://react-md.mlaursen.com/",parentName:"p"},"React-MD")," tabs & renders the markdown exactly how the user would see\nthe blog post."),x("p",null,x("img",{src:"https://i.imgur.com/jkiUhhO.png",alt:"New BlogEditor Page",title:"New blog editor page",parentName:"p"})),x("p",null,x("img",{src:"https://i.imgur.com/FTzBZvj.png",alt:"New BlogEditor Preview Page",title:"New blog editor preview page",parentName:"p"})))}Dn.isMDXComponent=!0;var Mn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Small margins make the difference",author:"Daniel Sinnott",id:14,tags:["Monthly Challenge","Technical","March","UI"],date:"Sun, 1st Apr 2018",created:Bn,default:Dn});const Gn=new Date(1517440630549);function En(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"This should be the only challenge declaration that fails rule number 2 (hopefully). January's\nchallenges were thought up in Dec 2017 and I began them at the beginning of the month, as I intend\nto do for each month in 2018."),x("hr",null),x("h3",null,"Technical"),x("h4",null,"Build a blog"),x("p",null,"The technical challenge for January was to create this blog. I could use any technologies as long as\nI deemed them beneficial to my long term learning. E.g. no using WordPress or Blogger etc. The\nchallenge will be deemed successful if, at the end of the month, I can post, view & edit blog posts\nin an easily maintainable way using a web app that works smoothly on both mobile & larger screens."),x("p",null,x("img",{src:"https://i.imgur.com/KJFM6Kr.jpg",alt:"Build a Blog",title:"Build a blog",parentName:"p"})),x("hr",null),x("h3",null,"Personal"),x("h4",null,"Cut the crap"),x("p",null,"The personal challenge for January was to cut putting crap into my body for the month. This meant no\njunk food & most importantly... no alcohol. Ireland was ravaged by Australian Flu over the\nChristmas, and I, like everyone else in the country caught it. I began the new year not feeling 100%\nand decided I'd take the month to start my year going in the right direction."),x("p",null,x("img",{src:"https://i.imgur.com/1QHeRHS.jpg",alt:"Dry January",title:"Dry January",parentName:"p"})),x("hr",null),x("blockquote",null,x("p",{parentName:"blockquote"},'"The way to get started is to quit talking and begin doing." -Walt Disney'),x("blockquote",{parentName:"blockquote"},x("p",{parentName:"blockquote"},"-Michael Scott"))),x("p",null,"Daniel"))}En.isMDXComponent=!0;var jn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"So it begins",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/SCNDoiY.jpg",id:3,tags:["Monthly Challenge","January"],date:"Wed, 31st Jan 2018",created:Gn,default:En});const On=new Date(1519948594510);function _n(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"I set out this month to improve my posture. Over the past year I'd noticed my daily commute home be\nmarred by lower back pain. I found my self constantly shifting my seating position in the last\n10/15mins of the journey, trying to find a place that my back felt ok with. It was pointed out to me\nby a physio friend that I didn't have the best posture & that office life wasn't going to help."),x("p",null,"I started out by first looking into office ergonomics & found that if you tilt your office chair ~15\ndegrees forward it relieves some of the stress on your lower back as its no longer taking all of the\nweight of your upper body. Since your legs are now taking some of the slack an added benefit is\nimproved blood flow. I also started doing more lower back exercises in the gym like the deadlift.\nThis has certainly helped strengthen my back but I still felt my posture could be better."),x("hr",null),x("p",null,"I focused on 3 postural areas:"),x("ul",null,x("li",{parentName:"ul"},"Hip flexibility"),x("li",{parentName:"ul"},"Rounded shoulders"),x("li",{parentName:"ul"},"Forward neck")),x("hr",null),x("h3",null,"Hip flexibility"),x("p",null,"For hip flexibility I focused on stretching my hip flexors:\n",x("img",{src:"https://i.imgur.com/j6yWWbP.jpg",alt:"Hip flexor stretch",title:"Hip flexor stretch",parentName:"p"})),x("h3",null,"Rounded shoulders"),x("p",null,"For rounded shoulders I felt there was an imbalance between my check & my upper back. Relieving some\nof the check pressure by doing doorway stretches & increasing my back strength by doing exercise\nband pull aparts:\n",x("img",{src:"https://i.imgur.com/zlD6CBJ.jpg",alt:"Exercise band pull aparts",title:"Exercise band pull aparts",parentName:"p"})),x("h3",null,"Forward neck"),x("p",null,"Finally for forward neck I followed along with the following youtube video:\n",x("a",{href:"https://www.youtube.com/watch?v=LT_dFRnmdGs",parentName:"p"},x("img",{src:"http://img.youtube.com/vi/LT_dFRnmdGs/0.jpg",alt:"Forward neck video",parentName:"a"}))),x("hr",null),x("h2",null,"Results"),x("p",null,"The results of this month of consistent stretching can be seen below. Bare in mind that the lighting\nis completely different & it's practically impossible to see my hips, but there is still significant\nimprovement in my shoulders & head."),x("h3",null,"Before:"),x("p",null,x("img",{src:"https://i.imgur.com/odiRnkK.jpg",alt:"Posture Before",title:"Posture Before",parentName:"p"})),x("h3",null,"After:"),x("p",null,x("img",{src:"https://i.imgur.com/DcHBfoJ.jpg",alt:"Posture After",title:"Posture After",parentName:"p"})),x("hr",null),x("h2",null,"Takaway"),x("p",null,"My takeaway from this month is that I'm no longer a spry young whippersnapper that can afford to not\nstretch anymore."),x("p",null,"I also reconfirmed the notion that its much easier to not do something that it is to do do (lol).\nIts easier to give up something that it is to take up. For January, every time I have the option of\neating unhealthy food I had to make to conscious decision to do it. For February stretches & I had\nto set out & intend to stretch, it was something that I could just do in the moment."))}_n.isMDXComponent=!0;var qn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Stand up straight with your shoulders back",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/28GOePt.jpg",id:8,tags:["Monthly Challenge","Personal","February","Posture"],date:"Thu, 1st Mar 2018",created:On,default:_n});const Ln=new Date(1536615936462);function Hn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Adding pagination"),x("p",null,"Having recently having added ",x("a",{href:"/blog/22",parentName:"p"},"Hero Images")," to each blogpost, which get displayed on the blog list\npage, the size of this blog has greatly increased."),x("p",null,"Visiting danielsinnott.com will cause 57 requests and 1.2MB to be downloaded. This is unacceptable\nand is a problem that won't scale as the blogposts continue. Currently, every blogpost is displayed\non the list page, causing every hero image to be downloaded."),x("p",null,"The solution to this problem is pagination."),x("h3",null,"Creating a pagination component"),x("p",null,"We'll start this post off with a couple of assumptions."),x("ul",null,x("li",{parentName:"ul"},"You're familiar with react & javascript (I'm going to assume a create react app / react-scripts\nbuild set up)"),x("li",{parentName:"ul"},"You have a react app which need so pagination"),x("li",{parentName:"ul"},"The list of items you want to paginate, has it's own style that you'd like to keep")),x("h4",null,"Create the files"),x("p",null,"Create a Pagination folder & 3 files:"),x("ul",null,x("li",{parentName:"ul"},x("inlineCode",{parentName:"li"},"index.js")),x("li",{parentName:"ul"},x("inlineCode",{parentName:"li"},"Pagination.jsx")),x("li",{parentName:"ul"},x("inlineCode",{parentName:"li"},"Pagination.css")," (or ",x("inlineCode",{parentName:"li"},"scss")," if you've go Sass integrated into your build)")),x("h4",null,"index.js"),x("p",null,"I like to always create an folder for each component and have that folder contain an ",x("inlineCode",{parentName:"p"},"index.js"),". It\nallows for neat grouping of related files but also take care of keeping the import of the component\nshort as modules which import this component will automatically look for index.js when importing\nfrom a directory. e.g:"),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'import Pagination from "src/components/Pagination";\n')),x("p",null,"Our index.js is a simple a redirect file, that imports our component and then exports it:"),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'// index.js\nimport Pagination from "./Pagination";\nexport default Pagination;\n')),x("h4",null,"Defining our Pagination.jsx"),x("p",null,"I always begin a component by writing a skeleton & defining the component's input:"),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'// Pagination.jsx\nimport React from "react";\nimport PropTypes from "prop-types";\nimport "./Pagination.css";\n\nexport default class Pagination extends React.Component {\n    constructor(props) {}\n    render() {}\n}\n\nPagination.propTypes = {\n    itemsPerPage: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    children: PropTypes.arrayOf(PropTypes.node).isRequired,\n};\n')),x("p",null,"We've outlines a basic react component and with our ",x("inlineCode",{parentName:"p"},"PropTypes")," have documented that the component\ntakes in a number ",x("inlineCode",{parentName:"p"},"itemsPerPage"),", a ",x("inlineCode",{parentName:"p"},"className")," which will will add to our paginated list and\nfinally ",x("inlineCode",{parentName:"p"},"children")," which will be the items we are paginating."),x("h4",null,"Displaying our items"),x("p",null,"Lets add the code to display our reduced/paged list of items. We're ",x("inlineCode",{parentName:"p"},"props.children")," as our generic\nlist of items to display. In the code below, we've added our ",x("inlineCode",{parentName:"p"},"state")," which storing only our\n",x("inlineCode",{parentName:"p"},"currentPage"),"."),x("p",null,"During ",x("inlineCode",{parentName:"p"},"render"),", we calculate how many pages we'll need and slice our children items array to only\nthe items that should be displayed on that page. We the render our pages items in a ",x("inlineCode",{parentName:"p"},"div")," with the\n",x("inlineCode",{parentName:"p"},"className")," prop so consumers can style the list appropriately."),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'// Pagination.jsx\nimport React from "react";\nimport PropTypes from "prop-types";\nimport "./Pagination.css";\n\nexport default class Pagination extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: 1,\n        };\n    }\n\n    render() {\n        const itemsPerPage = this.props.itemsPerPage || 6;\n        let items = React.Children.toArray(this.props.children);\n        const numPages = Math.round(items.length / itemsPerPage);\n        items = items.slice(\n            (this.state.currentPage - 1) * itemsPerPage,\n            this.state.currentPage * itemsPerPage,\n        );\n        return (\n            <div className="paginate">\n                <div className={this.props.className}>{items}</div>\n            </div>\n        );\n    }\n}\n\nPagination.propTypes = {\n    itemsPerPage: PropTypes.number.isRequired,\n    className: PropTypes.string,\n};\n')),x("h3",null,"Adding page buttons"),x("p",null,"Next, we'll add the buttons for controlling which pages are visible. The class will need some extra\nmethods to user interaction. Below we add 3 methods, and bind them to pagination instance's ",x("inlineCode",{parentName:"p"},"this"),"\nduring the constructor. Add the following snippet:"),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},"// Pagination.jsx\nexport default class Pagination extends React.Component {\n  constructor(props) {\n    ...\n    this._onPreviousClick = this._onPreviousClick.bind(this);\n    this._onNextClick = this._onNextClick.bind(this);\n    this._setCurrentPage = this._setCurrentPage.bind(this);\n  }\n  ...\n  _onPreviousClick() {\n    this._setCurrentPage(this.state.currentPage - 1);\n  }\n\n  _onNextClick() {\n    this._setCurrentPage(this.state.currentPage + 1);\n  }\n\n  _setCurrentPage(page) {\n    if (page === this.state.currentPage) return;\n    this.setState({\n      currentPage: page\n    });\n  }\n  ...\n}\n")),x("p",null,"Next, we'll add the buttons to the DOM. Like previous blogposts, we'll be using the ",x("a",{href:"https://react-md.mlaursen.com/",parentName:"p"},"React-MD"),"\ncomponent library, whose ",x("inlineCode",{parentName:"p"},"import")," can be seen at the top of the snippet below. Then during ",x("inlineCode",{parentName:"p"},"render"),"\nwe check if we should be disabling the previous or next buttons, if we're on the first or last page\nrespectively."),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'// Pagination.jsx\n...\nimport Button from "react-md/lib/Buttons/Button";\n\nexport default class Pagination extends React.Component {\n  ...\n  render() {\n    ...\n    const previousDisabled = this.state.currentPage === 1 ? true : false;\n    const nextDisabled = this.state.currentPage === numPages ? true : false;\n\n    let pageButtons = [];\n    for (let i = 1; i <= numPages; i++) {\n      const isCurrent = i === this.state.currentPage ? true : false;\n      pageButtons.push(\n        <Button\n          flat={!isCurrent}\n          raised={isCurrent}\n          primary={isCurrent}\n          onClick={() => this.setCurrentPage(i)}\n          key={i}\n        >\n          {i}\n        </Button>\n      );\n    }\n\n    return (\n      <div className="paginate">\n        <div className={this.props.className}>{items}</div>\n        <div className="paginate__buttons">\n          <Button\n            icon\n            className="paginate__buttons-left"\n            tooltipLabel="Previous"\n            tooltipPosition="top"\n            tooltipDelay={1000}\n            disabled={previousDisabled}\n            onClick={this._onPreviousClick}\n          >\n            chevron_left\n          </Button>\n          <div className="paginate__numbuttons">{pageButtons}</div>\n          <Button\n            icon\n            className="paginate__buttons-right"\n            tooltipLabel="Next"\n            tooltipPosition="top"\n            tooltipDelay={1000}\n            disabled={nextDisabled}\n            onClick={this._onNextClick}\n          >\n            chevron_right\n          </Button>\n        </div>\n      </div>\n    );\n  }\n  ...\n')),x("h4",null,"Scrolling to the top of the page"),x("p",null,"When the user changes, page they expect to be brought to the top of the page so they can start read\nfrom the start. Unfortunately, we don't know where the top of the page is as the ",x("inlineCode",{parentName:"p"},"Pagination"),"\ncomponent could be used anywhere. We'll need to calculate it each time."),x("p",null,"To start we'll need a reference to the ",x("inlineCode",{parentName:"p"},"paginate div"),". We do this by creating a ref in the\nconstructor and attaching it during rendering."),x("p",null,"On each page change, we calculate where the top left corner of the ",x("inlineCode",{parentName:"p"},"paginate div")," is and scroll the\nwindow to there."),x("pre",null,x("code",{className:"language-jsx",parentName:"pre"},'// Pagination.jsx\n...\nexport default class Pagination extends React.Component {\n  constructor(props) {\n    ...\n    this.paginateTopRef = React.createRef();\n  }\n\n  render() {\n    ...\n    return (\n      <div className="paginate" ref={this.paginateTopRef}>\n      ...\n    );\n  }\n\n  _setCurrentPage(page) {\n    ...\n    const paginateClientRect = this.paginateTopRef.current.getBoundingClientRect();\n    window.scrollTo(paginateClientRect.x, paginateClientRect.y);\n  }\n}\n...\n')),x("h4",null,"Adding style"),x("p",null,"Finally we add some styles to our buttons to keep them inline and from overflowing:"),x("pre",null,x("code",{className:"language-css",parentName:"pre"},"// Pagination.css\n.paginate__buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n}\n\n.paginate__numbuttons {\n    display: inline-flex;\n    overflow: auto;\n}\n")),x("h3",null,"Making a difference"),x("p",null,"Before pagination, loading danielsinnott.com from clean took ",x("strong",{parentName:"p"},"57 requests & 1.2MB")," to download,\nafter adding pagination the page load has been reduced to ",x("strong",{parentName:"p"},"29 requests and only 480KB"),". Thats a\nreduction of over 50% by adding a single component. I'd also argue that beyond the page load\nperformance the user experience has improved."),x("p",null,"The full source for this can be see over at ",x("a",{href:"https://github.com/sinnott74/BlogWebClient/tree/master/src/core/components/Pagination",parentName:"p"},"Github")))}Hn.isMDXComponent=!0;var Fn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"State of the pagi-nation",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/ietahcb.png",id:24,tags:["Technical","ReactJS","Pagination"],date:"Mon, 10th Sep 2018",created:Ln,default:Hn});const Wn=new Date(1519051903729);function zn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"This blog post is based largely on Jake Archibald's (",x("a",{href:"https://twitter.com/jaffathecake",parentName:"p"},"@jaffathecake"),") talk ",x("a",{href:"https://www.youtube.com/watch?v=cCOL7MC4Pl0",parentName:"p"},"In The Loop")),x("h2",null,"The Event Loop"),x("p",null,"The event loop is how Javascript implements its concurrency model and allows it to perform multiple\nnon blocking asynchronous operations despite the fact that it is single threaded. Each javascript\nthread gets it's own event loop. i.e. both the main thread & web workers get their own event loop as\nthey are executed in their own thread."),x("p",null,"The event loop runs continually round executing tasks, mircotasks & even performing all render steps\nlike style calculations, layout & paint."),x("p",null,"Note: Its possible for Pages to share an single event loop when they are on the same origin. This\nallows them to synchronously communicate. Examples of opening pages on the same origin are iframes,\nwindow.frames & pages opened with window.open(). Window.postMessage() can then be used to\ncommunicate from page to page. However opening a page with window.open() & passing the noopener\noption will prevent the child page from referencing the parent and also give it its own event loop.\nFor more info see: ",x("a",{href:"http://hassansin.github.io/shared-event-loop-among-same-origin-windows",parentName:"p"},"Shared Event-loop for Same-Origin Windows")),x("h2",null,"Tasks"),x("p",null,"A task is a unit of work scheduled by the browser. Tasks are put into a task queue to ensure they\nare executed in the correct order, and can be put there from multiple sources. Examples of tasks\ninclude setTimeout & event clicks."),x("p",null,"Each iteration of the event loop will perform a single task, to completion. The thread is completely\nfocused on completing this task. Long running tasks block page rendering and can cause the user to\nnotice that the page is frozen."),x("p",null,"Tasks can queue other tasks, but as only a single task can be completed on each loop the browser is\nallowed to perform rendering in between tasks. A good example of this is setTimeout recursively\nqueue setTimeouts. This doesn't block rendering."),x("h2",null,"Microtasks"),x("p",null,"Microtasks are very similars to tasks. Like tasks, they are also placed in a queue by multiple\nsources. However microtasks position in the event loop is somewhat fluid. The event loop executes\nmicrotasks whenever the javascript callstack is empty. Which means microtasks can be executed after\na task or even after a Request Animation Frame callback."),x("p",null,"Like Tasks Microtasks can queue other microtasks, but unlike tasks they are completed until the\nqueue is empty. This means recursive microtasks can block rendering."),x("p",null,"Examples of microtasks include process.nextTick & Promises."),x("h2",null,"Render Steps"),x("p",null,"The browser controls when the render steps are executed. It notifies the event loop that on the next\niteration of the loop it should perform Style calculations, Layout & finally Paint the pixels on the\nscreen. It aims to do this typically every 16.6ms or 60 frames per second."),x("h3",null,"Request Animation Frame"),x("p",null,"Request Animation Frame (rAF) callbacks are called during the render steps, just before style\ncalculations. Its an ideal place to perform UI specific updates & allows the batching of updates."),x("p",null,"rAF callbacks are executed until completion, including queued rAFs. However, the browser will take a\nbreak from executing queued rAFs when it hits a rAf which wasn't queued before this iteration of the\nloop."),x("h2",null,"Visuals"),x("p",null,"Below is a visual representation of The Event Loop. All microtasks on the queue are executed\neverytime the javascript callstack is empty.\n",x("img",{src:"https://i.imgur.com/yp6hsFd.gif",alt:"JavaScript Event Loop",title:"JavaScript Event Loop",parentName:"p"})," Credit to\n(",x("a",{href:"https://twitter.com/jaffathecake",parentName:"p"},"@jaffathecake"),")"))}zn.isMDXComponent=!0;var Un=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"Task, Microtasks & Automobiles",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/BywnfLd.png",id:7,tags:["Javascript","Concurrency"],date:"Mon, 19th Feb 2018",created:Wn,default:zn});const Jn=new Date(1520023819005);function Vn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"The challenge for March is to focus on some smaller things."),x("h2",null,"Personal"),x("p",null,"The goal for this month is to get into a routine of taking a multivitamin. Micronutrient, micro, the\nlittle things, get it???"),x("p",null,"The longterm benefits of taking a multivitamin have been hotly debated."),x("p",null,"MVM = multivitamin, FYI"),x("p",null,"The paper ",x("a",{href:"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3309636/",parentName:"p"},"Vitamin and Mineral Supplements: Do We Really Need Them?")," found that:"),x("blockquote",null,x("p",{parentName:"blockquote"},"The results of large-scale randomized trials show that, for the majority of the population, there\nis no overall benefit from taking MVM supplements. Indeed, some studies have shown increased risk\nof cancers in relation to using certain vitamins.")),x("p",null,"but"),x("blockquote",null,x("p",{parentName:"blockquote"},"although in the long run MVMs may slightly increase the risk of cancer and cardiovascular\ndiseases, in the short run they produce little harm or no harm, and thus negative consequences\nwill not be discernible by individuals taking them.")),x("p",null,"However the paper ",x("a",{href:"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4109789/",parentName:"p"},"Addressing nutritional gaps with multivitamin and mineral supplements")," found\nthat:"),x("blockquote",null,x("p",{parentName:"blockquote"},"MVMs may help prevent a number of health problems. In bridging nutrient gaps, it is plausible that\nMVMs help prevent iron-deficiency anemia, neural tube defects, neurological damage in people age\n50 years and older, and bone disease by supplementing the diet with iron, folic acid, vitamin B12,\nand vitamin D, respectively.")),x("p",null,"and"),x("blockquote",null,x("p",{parentName:"blockquote"},"recent studies provided moderate evidence suggesting that MVM supplements containing vitamins and\nminerals at or near the Recommended Dietary Allowance (RDA) are beneficial in reducing the risk of\nchronic disease in at-risk populations, especially given their demonstrated safety")),x("p",null,"My takeaway from these articles is that you may not know you need a multivitamin and taking one will\ndo little to no harm. And if all else fails I'm hoping the good ol' placebo effect will give me a\nbit of a boost."),x("p",null,"A lot of multivitamins contain 100+% of your recommended daily allowance. I've selected a\nmultivitamin that requires 3 tablets to taken daily, with the aim of taking at most 2 a day."),x("h2",null,"Technical"),x("p",null,"There's several small things about this blog that have bugged me other the past month of interacting\nwith it. The goal for this month is to fix the following minor UX problems:"),x("ul",null,x("li",{parentName:"ul"},"The navigation bar needs to be personalised"),x("li",{parentName:"ul"},"Each of these blogs are written in ",x("a",{href:"https://www.markdownguide.org/",parentName:"li"},"Markdown"),", and it's a bit annoying to have to save the blog\npost before I can view how it will look.")))}Vn.isMDXComponent=!0;var Yn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"The little things",author:"Daniel Sinnott",id:11,tags:["Monthly Challenge","March"],date:"Fri, 2nd Mar 2018",created:Jn,default:Vn});const Xn=new Date(1525194512430);function $n(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("h2",null,"Silence is a virtue..."),x("p",null,"The challenge for this month was to do my daily commute in silence. My hope was that it would give\nme time to think about the day in front of me, but also allow my mind to wander a bit and think\nabout other things that the rat race makes it difficult to find time for."),x("p",null,x("img",{src:"https://i.imgur.com/oz0CfWJ.jpg",alt:"Work Meditation",title:"Work Meditation",parentName:"p"})),x("p",null,"The reality wasn't quite as peaceful as I pictured it. Most mornings I could mentally create my\ndaily todo list within the first 5 minutes and this did turn out to be particularly useful. However,\nallowing the mind to wander the rest of the journey is not something that I can recommend to anyone\nwhose commute is predominately done on a motorway. Motorways are a long boring straight road fill\nwill cars driving at high speeds, which on at non peak times can be a breeze to drive on, but during\nrush hour traffic it's very common to go from 100km down to 10km very quickly. You need to be paying\nattention! I noticed a dramatic drop in my reaction times mainly because I was away with the\nfairies."),x("p",null,x("img",{src:"https://i.imgur.com/yywcxTL.gif",alt:"Simpsons Mind Wandering",title:"Simpsons Mind Wandering",parentName:"p"})),x("p",null,"Across the month of commuting I managed to stick to the silence in all by 2 drives to work. These\nmornings I was particularly tired and it was in my best interest to not attempt it. Both of those\nmornings I listened to the ",x("a",{href:"https://www.theguardian.com/news/series/the-audio-long-read",parentName:"p"},"Guardian's Audio Long Reads")," podcast, which I highly recommend listening\nto. ",x("a",{href:"https://www.theguardian.com/news/audio/2018/apr/20/the-that-shook-iceland-podcast",parentName:"p"},"The murder that shook Iceland"),' is particularly good "who done it" true story.'),x("p",null,"Meditation is quite often seen as a very peaceful easy walk in the park, but the reality is it\nrequires a lot of practice, patience and a tranquil environment to even allow yourself to clear your\nmind. I'm not convince its for me yet, but I can definitely say that the daily commute is neither\nthe time of the place."),x("h3",null,"Namaste"))}$n.isMDXComponent=!0;var Kn=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"The mind wanders",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/FVgn9Tl.jpg",id:19,tags:["Monthly Challenge","Personal","April","Mindfulness"],date:"Tue, 1st May 2018",created:Xn,default:$n});const Qn=new Date(1535113913699);function Zn(e){var n=e,{components:t}=n,o=s(n,["components"]);return x("wrapper",l({components:t},o),x("p",null,"When I decided to redesign the home page of this blog to include an image with every post, I was\nfaced with the reality that I'd need to have a new ",x("a",{href:"https://en.wikipedia.org/wiki/Hero_image",parentName:"p"},"Hero Image")," for every post and that I'm not a\ngraphic designer..."),x("blockquote",null,x("p",{parentName:"blockquote"},"In web design, a hero image is a large web banner image, prominently placed on a web page,\ngenerally in the front and center. The hero image is often the first visual element a visitor\nencounters on the site; it presents an overview of the site's most important content.")),x("p",null,"Having played around with ",x("a",{href:"https://www.gimp.org/",parentName:"p"},"Gimp")," for a few days it became readily apparent that I'd need a way to\n",x("strong",{parentName:"p"},"create Hero images quickly")," and with a consistent style. I'd need to build something. GUIs can\ntake a long time to perfect so a quick and dirty command line utility was my best option. Lets ",x("a",{href:"https://golang.org/",parentName:"p"},"GO"),"!"),x("h2",null,"Golang Command Line Utility"),x("p",null,x("img",{src:"https://i.imgur.com/IcyLOyC.png",alt:"Golang",title:"Golang",parentName:"p"})),x("blockquote",null,x("p",{parentName:"blockquote"},"Go is a statically typed, compiled language in the tradition of C, with memory safety, garbage\ncollection, structural typing, and CSP-style concurrency.")),x("h3",null,"Getting Started"),x("h4",null,"Install Go"),x("p",null,"Follow the instructions at ",x("a",{href:"https://golang.org/doc/install#install",parentName:"p"},"install Golang")," for your operating system"),x("p",null,"Go is the perfect language to create a command line utility. It compiles into a single binary, has a\ngreat standard library & excellent cross platform support."),x("h4",null,"Install Cobra"),x("p",null,"Although the standard library has everything we need to create our utility, we're going to use\n",x("a",{href:"https://github.com/spf13/cobra",parentName:"p"},"Cobra")," to simplify things. Cobra is a great tool and library used by the likes of Docker,\nKubernetes and Openshift to create command line applications."),x("p",null,"To install Cobra run"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"go get github.com/spf13/cobra/cobra\n")),x("p",null,"This will download the latest code from github to the directory ",x("inlineCode",{parentName:"p"},"$GOPATH/src/github.com/spf13/cobra"),"\n(GOPATH defaults to\n$HOME/go if you haven't set it). It will also compile cobra into its binary and save that at ",x("inlineCode",{parentName:"p"},"$GOPATH/bin")),x("h4",null,"Install Vipslib"),x("p",null,x("a",{href:"https://jcupitt.github.io/libvips/",parentName:"p"},"Vipslib")," is an image processing library that we'll be using to resize our Hero icons. See ",x("a",{href:"https://jcupitt.github.io/libvips/install.html",parentName:"p"},"Install\nvipslib")," for how to install for your operating system. We'll also need to run:"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"go get github.com/DAddYE/vips\n")),x("p",null,"to install the Go bindings for Vipslib"),x("h4",null,"Creating the project"),x("p",null,"Start by creating a folder Hero and CD into it. Assuming you have $GOPATH/bin on your $PATH, run:"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"cobra init\n")),x("p",null,"This will create a LICENSE, a directory cmd containing a single file root.go and your main.go."),x("p",null,"main.go contains package main and function main (which is the starting point for every Go\napplication), and the import of the generated command. The function main delegates to cmd.Execute &\nthat's all we'll need to do in main."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// main.go\npackage main\n\nimport "github.com/sinnott74/TestCmd/cmd"\n\nfunc main() {\n    cmd.Execute()\n}\n')),x("p",null,"The generated cmd/root.go will contain a lot more code but for this simple tool we can remove most\nof it. After trimming the fat we're left with:"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// cmd/root.go\npackage cmd\n\nimport (\n    "fmt"\n    "os"\n\n    "github.com/spf13/cobra"\n)\n\n// rootCmd represents the base command when called without any subcommands\nvar rootCmd = &cobra.Command{\n    Use:   "Hero image creating utility",\n    Short: "Hero creates banner images quickly",\n    RunE: func(cmd *cobra.Command, args []string) error {\n        return nil\n    },\n}\n\n// Execute adds all child commands to the root command and sets flags appropriately.\n// This is called by main.main(). It only needs to happen once to the rootCmd.\nfunc Execute() {\n    if err := rootCmd.Execute(); err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n}\n\nfunc init() {\n}\n')),x("h3",null,"Creating our Hero Utility"),x("h4",null,"Adding command line arguments"),x("p",null,"Like all good command line utilities we're going to need to take in some arguments. Our init\nfunction in cmd/root.go is the perfect place for this kind of set up work. init() is called when the\npackage is first imported. Add the following:"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'var (\n    out      string\n    bgColor  string\n    icons    []string\n    height   int\n    width    int\n    iconsize int\n)\n\nfunc init() {\n    rootCmd.PersistentFlags().StringVarP(&out, "output", "o", "./hero.png", "File to output")\n    rootCmd.PersistentFlags().StringVarP(&bgColor, "color", "c", "red", "Background color")\n    rootCmd.PersistentFlags().StringArrayVarP(&icons, "icons", "i", []string{}, "Icons")\n    rootCmd.PersistentFlags().IntVarP(&width, "width", "x", 960, "Max x coordinate of the hero - width of the hero")\n    rootCmd.PersistentFlags().IntVarP(&height, "height", "y", 480, "Max y coordinate of the hero - height of the hero")\n    rootCmd.PersistentFlags().IntVarP(&iconsize, "iconsize", "s", 300, "Width and height of the incons on the hero")\n}\n')),x("p",null,"This sets up all the arguments we'll need for now. We can now run the application and verify that\nall the arguments are there:"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'$go run main.go -h\n\nHero creates banner images quickly\n\nUsage:\n  Hero image creating utility [flags]\n\nFlags:\n  -c, --color string        Background color (default "red")\n  -y, --height int          Max y coordinate of the hero - height of the hero (default 480)\n  -h, --help                help for Hero\n  -i, --icons stringArray   Icons\n  -s, --iconsize int        Width and height of the incons on the hero (default 300)\n  -o, --output string       File to output (default "./hero.png")\n  -x, --width int           Max x coordinate of the hero - width of the hero (default 960)\n')),x("p",null,x("inlineCode",{parentName:"p"},"go run")," compiles and runs a go application. Adding the -h flag to any go application that accepts\narguments will show the help blurb."),x("h4",null,"Creating the image"),x("p",null,"To create an image in go we'll need to import the ",x("inlineCode",{parentName:"p"},"image")," package. Update our rootCmd's RunE\nfunction in cmd.go to the following."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"RunE: func(cmd *cobra.Command, args []string) error {\n\n    // Create the picture\n    pic := image.NewRGBA(image.Rect(0, 0, width, height))\n\n    // Create the file\n    outFile, err := os.Create(out)\n    if err != nil {\n        return err\n    }\n\n    // Write & encode the file\n    err = png.Encode(outFile, pic)\n    if err != nil {\n        return err\n    }\n    return nil\n},\n")),x("p",null,"We're now creating a new picture with the dimensions the user specifies with the command line\narguments. We then create a file and write/encode the picture to disk. Running:"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"go main.go\n")),x("p",null,"will by default create an tiny blank file ",x("inlineCode",{parentName:"p"},"hero.png"),". We haven't specified the color of any pixel\nyet, which for an RGBA image is R:0 G:0 B:0 A:0 - an invisible black pixel."),x("h4",null,"Setting the color"),x("p",null,"For our colors, we're going to stick to the ",x("a",{href:"https://material.io/design/color/the-color-system.html',",parentName:"p"},"material design color palette"),". Add the following\nsnippet to the file to set up our color"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'// Material Design colors\nvar (\n    Red400        = color.RGBA{0xef, 0x53, 0x50, 0xff} // rgb(239, 83, 80)\n    Red500        = color.RGBA{0xf4, 0x43, 0x36, 0xff} // rgb(244, 67, 54)\n    Red600        = color.RGBA{0xe5, 0x39, 0x35, 0xff} // rgb(229, 57, 53)\n    Pink400       = color.RGBA{0xec, 0x40, 0x7a, 0xff} // rgb(236, 64, 122)\n    Pink500       = color.RGBA{0xe9, 0x1e, 0x63, 0xff} // rgb(233, 30, 99)\n    Pink600       = color.RGBA{0xd8, 0x1b, 0x60, 0xff} // rgb(216, 27, 96)\n    Purple400     = color.RGBA{0xab, 0x47, 0xbc, 0xff} // rgb(171, 71, 188)\n    Purple500     = color.RGBA{0x9c, 0x27, 0xb0, 0xff} // rgb(156, 39, 176)\n    Purple600     = color.RGBA{0x8e, 0x24, 0xaa, 0xff} // rgb(142, 36, 170)\n    DeepPurple400 = color.RGBA{0x7e, 0x57, 0xc2, 0xff} // rgb(126, 87, 194)\n    DeepPurple500 = color.RGBA{0x67, 0x3a, 0xb7, 0xff} // rgb(103, 58, 183)\n    DeepPurple600 = color.RGBA{0x5e, 0x35, 0xb1, 0xff} // rgb(94, 53, 177)\n    Indigo400     = color.RGBA{0x5c, 0x6b, 0xc0, 0xff} // rgb(92, 107, 192)\n    Indigo500     = color.RGBA{0x3f, 0x51, 0xb5, 0xff} // rgb(63, 81, 181)\n    Indigo600     = color.RGBA{0x39, 0x49, 0xab, 0xff} // rgb(57, 73, 171)\n    Blue400       = color.RGBA{0x42, 0xa5, 0xf5, 0xff} // rgb(66, 165, 245)\n    Blue500       = color.RGBA{0x21, 0x96, 0xf3, 0xff} // rgb(33, 150, 243)\n    Blue600       = color.RGBA{0x1e, 0x88, 0xe5, 0xff} // rgb(30, 136, 229)\n    LightBlue400  = color.RGBA{0x29, 0xb6, 0xf6, 0xff} // rgb(41, 182, 246)\n    LightBlue500  = color.RGBA{0x03, 0xa9, 0xf4, 0xff} // rgb(3, 169, 244)\n    LightBlue600  = color.RGBA{0x03, 0x9b, 0xe5, 0xff} // rgb(3, 155, 229)\n    Cyan400       = color.RGBA{0x26, 0xc6, 0xda, 0xff} // rgb(38, 198, 218)\n    Cyan500       = color.RGBA{0x00, 0xbc, 0xd4, 0xff} // rgb(0, 188, 212)\n    Cyan600       = color.RGBA{0x00, 0xac, 0xc1, 0xff} // rgb(0, 172, 193)\n    Teal400       = color.RGBA{0x26, 0xa6, 0x9a, 0xff} // rgb(38, 166, 154)\n    Teal500       = color.RGBA{0x00, 0x96, 0x88, 0xff} // rgb(0, 150, 136)\n    Teal600       = color.RGBA{0x00, 0x89, 0x7b, 0xff} // rgb(0, 137, 123)\n    Green400      = color.RGBA{0x66, 0xbb, 0x6a, 0xff} // rgb(102, 187, 106)\n    Green500      = color.RGBA{0x4c, 0xaf, 0x50, 0xff} // rgb(76, 175, 80)\n    Green600      = color.RGBA{0x43, 0xa0, 0x47, 0xff} // rgb(67, 160, 71)\n    LightGreen400 = color.RGBA{0x9c, 0xcc, 0x65, 0xff} // rgb(156, 204, 101)\n    LightGreen500 = color.RGBA{0x8b, 0xc3, 0x4a, 0xff} // rgb(139, 195, 74)\n    LightGreen600 = color.RGBA{0x7c, 0xb3, 0x42, 0xff} // rgb(124, 179, 66)\n    Lime400       = color.RGBA{0xd4, 0xe1, 0x57, 0xff} // rgb(212, 225, 87)\n    Lime500       = color.RGBA{0xcd, 0xdc, 0x39, 0xff} // rgb(205, 220, 57)\n    Lime600       = color.RGBA{0xc0, 0xca, 0x33, 0xff} // rgb(192, 202, 51)\n    Yellow500     = color.RGBA{0xff, 0xeb, 0x3b, 0xff} // rgb(255, 235, 59)\n    Yellow600     = color.RGBA{0xfd, 0xd8, 0x35, 0xff} // rgb(253, 216, 53)\n    Yellow700     = color.RGBA{0xfb, 0xc0, 0x2d, 0xff} // rgb(251, 192, 45)\n    Amber400      = color.RGBA{0xff, 0xca, 0x28, 0xff} // rgb(255, 202, 40)\n    Amber500      = color.RGBA{0xff, 0xc1, 0x07, 0xff} // rgb(255, 193, 7)\n    Amber600      = color.RGBA{0xff, 0xb3, 0x00, 0xff} // rgb(255, 179, 0)\n    Orange400     = color.RGBA{0xff, 0xa7, 0x26, 0xff} // rgb(255, 167, 38)\n    Orange500     = color.RGBA{0xff, 0x98, 0x00, 0xff} // rgb(255, 152, 0)\n    Orange600     = color.RGBA{0xfb, 0x8c, 0x00, 0xff} // rgb(251, 140, 0)\n    DeepOrange400 = color.RGBA{0xff, 0x70, 0x43, 0xff} // rgb(255, 112, 67)\n    DeepOrange500 = color.RGBA{0xff, 0x57, 0x22, 0xff} // rgb(255, 87, 34)\n    DeepOrange600 = color.RGBA{0xf4, 0x51, 0x1e, 0xff} // rgb(244, 81, 30)\n    Brown400      = color.RGBA{0x8d, 0x6e, 0x63, 0xff} // rgb(141, 110, 99)\n    Brown500      = color.RGBA{0x79, 0x55, 0x48, 0xff} // rgb(121, 85, 72)\n    Brown600      = color.RGBA{0x6d, 0x4c, 0x41, 0xff} // rgb(109, 76, 65)\n    Grey400       = color.RGBA{0xbd, 0xbd, 0xbd, 0xff} // rgb(189, 189, 189)\n    Grey500       = color.RGBA{0x9e, 0x9e, 0x9e, 0xff} // rgb(158, 158, 158)\n    Grey600       = color.RGBA{0x75, 0x75, 0x75, 0xff} // rgb(117, 117, 117)\n    BlueGrey400   = color.RGBA{0x78, 0x90, 0x9c, 0xff} // rgb(120, 144, 156)\n    BlueGrey500   = color.RGBA{0x60, 0x7d, 0x8b, 0xff} // rgb(96, 125, 139)\n    BlueGrey600   = color.RGBA{0x54, 0x6e, 0x7a, 0xff} // rgb(84, 110, 122)\n)\n\n// Map of Color Names to color\nvar Map = make(map[string][3]color.RGBA)\n\n// Multiple init funcs are allowed\nfunc init() {\n    Map["red"] = [3]color.RGBA{Red400, Red500, Red600}\n    Map["pink"] = [3]color.RGBA{Pink400, Pink500, Pink600}\n    Map["purple"] = [3]color.RGBA{Purple400, Purple500, Purple600}\n    Map["deeppurple"] = [3]color.RGBA{DeepPurple400, DeepPurple500, DeepPurple600}\n    Map["indigo"] = [3]color.RGBA{Indigo400, Indigo500, Indigo600}\n    Map["blue"] = [3]color.RGBA{Blue400, Blue500, Blue600}\n    Map["lightblue"] = [3]color.RGBA{LightBlue400, LightBlue500, LightBlue600}\n    Map["cyan"] = [3]color.RGBA{Cyan400, Cyan500, Cyan600}\n    Map["teal"] = [3]color.RGBA{Teal400, Teal500, Teal600}\n    Map["green"] = [3]color.RGBA{Green400, Green500, Green600}\n    Map["lime"] = [3]color.RGBA{Lime400, Lime500, Lime600}\n    Map["yellow"] = [3]color.RGBA{Yellow500, Yellow600, Yellow700}\n    Map["amber"] = [3]color.RGBA{Amber400, Amber500, Amber600}\n    Map["orange"] = [3]color.RGBA{Orange400, Orange500, Orange600}\n    Map["deeporange"] = [3]color.RGBA{DeepOrange400, DeepOrange500, DeepOrange600}\n    Map["brown"] = [3]color.RGBA{Brown400, Brown500, Brown600}\n    Map["grey"] = [3]color.RGBA{Grey400, Grey500, Grey600}\n    Map["bluegrey"] = [3]color.RGBA{BlueGrey400, BlueGrey500, BlueGrey600}\n}\n\n// getColor gets a RGBA color\nfunc getColor(colorName *string) ([3]color.RGBA, error) {\n    colors, ok := Map[*colorName]\n    if !ok {\n        return [3]color.RGBA{}, fmt.Errorf("Color %s could not be found", *colorName)\n    }\n    return colors, nil\n}\n')),x("p",null,"You may have noticed from the Hero on this blogpost that our background has three sections, divided\nby two diagonal lines, increasing in darkness from left to right. To do this we need to loop through\nevery pixel in the Hero and set the color based on which section it is in."),x("p",null,"We define a new type represent out diagonal lines - line. It consists of two points. Based on where\neach pixel is relative to the diagonal lines, we can set its color."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"type line struct {\n    p1 image.Point\n    p2 image.Point\n}\n\n// setImageColor sets the background color of an image\nfunc setImageColor(pic *image.RGBA, bgColor *string) error {\n\n    width := pic.Bounds().Max.X\n    height := pic.Bounds().Max.Y\n\n    leftLine := line{image.Point{width / 4, 0}, image.Point{width / 20, height}}\n    rightLine := line{image.Point{width, height - 2*height/3}, image.Point{width - width/3, height}}\n\n    colors, err := getColor(bgColor)\n    if err != nil {\n        return err\n    }\n\n    leftColor := colors[0]\n    middleColor := colors[1]\n    rightColor := colors[2]\n\n    // Update the colour of each pixel\n    for x := pic.Bounds().Min.X; x < pic.Bounds().Max.X; x++ {\n        for y := pic.Bounds().Min.Y; y < pic.Bounds().Max.Y; y++ {\n\n            p := image.Point{x, y}\n            if isLeftOfLine(leftLine, p) {\n                pic.Set(x, y, leftColor)\n            } else if isRightOfLine(rightLine, p) {\n                pic.Set(x, y, rightColor)\n            } else {\n                pic.Set(x, y, middleColor)\n            }\n        }\n    }\n    return nil\n}\n\n// isRightOfLine checks if a point is to the right of the line\nfunc isRightOfLine(l line, p image.Point) bool {\n    return !isLeftOfLine(l, p)\n}\n\n// isLeftOfLine checks if a point is to the left of the line\nfunc isLeftOfLine(l line, p image.Point) bool {\n    d := (p.X-l.p1.X)*(l.p2.Y-l.p1.Y) - (p.Y-l.p1.Y)*(l.p2.X-l.p1.X)\n    return d < 0\n}\n")),x("p",null,"We can now call our setImageColor function before we encode the png, without forgetting to check for\nerrors."),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"err = setImageColor(pic, &bgColor)\nif err != nil {\n    return err\n}\n")),x("p",null,"Now when we run"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"go run main.go\n")),x("p",null,"We'll get a hero.png file with dimensions 960*480 by default, with red background containing our\npattern."),x("p",null,x("img",{src:"https://i.imgur.com/yDqToGj.png",alt:"Red hero",title:"Red hero",parentName:"p"})),x("h3",null,"Adding icons"),x("p",null,"To add our icons, we'll need to:"),x("ul",null,x("li",{parentName:"ul"},"Read them into memory"),x("li",{parentName:"ul"},"Resize them"),x("li",{parentName:"ul"},"Determine their position in the Hero"),x("li",{parentName:"ul"},"Finally, add them to the Hero")),x("p",null,"This can be accomplished with the following code:"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"// addIcons add icons to the pic\nfunc addIcons(pic *image.RGBA, iconPaths []string, iconSize image.Point) error {\n\n    width := pic.Bounds().Max.X\n    height := pic.Bounds().Max.Y\n\n    numIcons := len(iconPaths)\n    horizonalPaddingNum := numIcons + 1\n    paddingWidth := (width - iconSize.Y*numIcons) / horizonalPaddingNum\n\n    for i, iconPath := range iconPaths {\n        icon, err := readIcon(&iconPath)\n        if err != nil {\n            return err\n        }\n        resizedIcon, err := resizeIcon(&icon, iconSize)\n        if err != nil {\n            return err\n        }\n\n        diff := iconSize.Sub(resizedIcon.Bounds().Max).Div(2)\n        offset := image.Pt(paddingWidth+iconSize.X*i+paddingWidth*i, height/2-iconSize.Y/2).Add(diff)\n        addIconToPic(pic, resizedIcon, offset)\n    }\n    return nil\n}\n\n// readIcon reads in the btyes of a given file\nfunc readIcon(iconPath *string) ([]byte, error) {\n\n    inBuf, err := ioutil.ReadFile(*iconPath)\n    if err != nil {\n        return nil, err\n    }\n    return inBuf, nil\n}\n\n// resizeIcon resizes the file\nfunc resizeIcon(icon *[]byte, iconSize image.Point) (image.Image, error) {\n    options := vips.Options{\n        Width:        iconSize.X,\n        Height:       iconSize.Y,\n        Crop:         false,\n        Extend:       vips.EXTEND_WHITE,\n        Interpolator: vips.BILINEAR,\n        Gravity:      vips.CENTRE,\n        Quality:      100,\n        Format:       vips.PNG,\n    }\n\n    buf, err := vips.Resize(*icon, options)\n    if err != nil {\n        return nil, err\n    }\n\n    resizedIcon, _, err := image.Decode(bytes.NewReader(buf))\n    if err != nil {\n        return nil, err\n    }\n\n    return resizedIcon, nil\n}\n\n// addIconToPic adds the icon to the picture\nfunc addIconToPic(pic draw.Image, icon image.Image, offset image.Point) {\n    draw.Draw(pic, icon.Bounds().Add(offset), icon, image.ZP, draw.Over)\n}\n")),x("p",null,"Add a call to addIcons after setImageColor in out rootCmd"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"err = addIcons(pic, icons, image.Point{iconsize, iconsize})\nif err != nil {\n    return err\n}\n")),x("h4",null,"Our Hero"),x("p",null,"Finally run"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},"go run main.go -i hero_icon.png -i gopher.png -c blue\n")),x("p",null,"where hero_icon.png and gopher.png are images on your system, will create our ",x("strong",{parentName:"p"},"HERO!")),x("p",null,x("img",{src:"https://i.imgur.com/ZVaDnJx.png",alt:"Hero",title:"Hero",parentName:"p"})),x("h4",null,"The full source of root.go can be seen below"),x("pre",null,x("code",{className:"language-go",parentName:"pre"},'package cmd\n\nimport (\n    "bytes"\n    "fmt"\n    "image"\n    "image/color"\n    "image/draw"\n    "image/png"\n    "io/ioutil"\n    "os"\n\n    "github.com/DAddYE/vips"\n    "github.com/spf13/cobra"\n)\n\n// Command line arguments\nvar (\n    out      string\n    bgColor  string\n    icons    []string\n    height   int\n    width    int\n    iconsize int\n)\n\n// Material Design colors\nvar (\n    Red400        = color.RGBA{0xef, 0x53, 0x50, 0xff} // rgb(239, 83, 80)\n    Red500        = color.RGBA{0xf4, 0x43, 0x36, 0xff} // rgb(244, 67, 54)\n    Red600        = color.RGBA{0xe5, 0x39, 0x35, 0xff} // rgb(229, 57, 53)\n    Pink400       = color.RGBA{0xec, 0x40, 0x7a, 0xff} // rgb(236, 64, 122)\n    Pink500       = color.RGBA{0xe9, 0x1e, 0x63, 0xff} // rgb(233, 30, 99)\n    Pink600       = color.RGBA{0xd8, 0x1b, 0x60, 0xff} // rgb(216, 27, 96)\n    Purple400     = color.RGBA{0xab, 0x47, 0xbc, 0xff} // rgb(171, 71, 188)\n    Purple500     = color.RGBA{0x9c, 0x27, 0xb0, 0xff} // rgb(156, 39, 176)\n    Purple600     = color.RGBA{0x8e, 0x24, 0xaa, 0xff} // rgb(142, 36, 170)\n    DeepPurple400 = color.RGBA{0x7e, 0x57, 0xc2, 0xff} // rgb(126, 87, 194)\n    DeepPurple500 = color.RGBA{0x67, 0x3a, 0xb7, 0xff} // rgb(103, 58, 183)\n    DeepPurple600 = color.RGBA{0x5e, 0x35, 0xb1, 0xff} // rgb(94, 53, 177)\n    Indigo400     = color.RGBA{0x5c, 0x6b, 0xc0, 0xff} // rgb(92, 107, 192)\n    Indigo500     = color.RGBA{0x3f, 0x51, 0xb5, 0xff} // rgb(63, 81, 181)\n    Indigo600     = color.RGBA{0x39, 0x49, 0xab, 0xff} // rgb(57, 73, 171)\n    Blue400       = color.RGBA{0x42, 0xa5, 0xf5, 0xff} // rgb(66, 165, 245)\n    Blue500       = color.RGBA{0x21, 0x96, 0xf3, 0xff} // rgb(33, 150, 243)\n    Blue600       = color.RGBA{0x1e, 0x88, 0xe5, 0xff} // rgb(30, 136, 229)\n    LightBlue400  = color.RGBA{0x29, 0xb6, 0xf6, 0xff} // rgb(41, 182, 246)\n    LightBlue500  = color.RGBA{0x03, 0xa9, 0xf4, 0xff} // rgb(3, 169, 244)\n    LightBlue600  = color.RGBA{0x03, 0x9b, 0xe5, 0xff} // rgb(3, 155, 229)\n    Cyan400       = color.RGBA{0x26, 0xc6, 0xda, 0xff} // rgb(38, 198, 218)\n    Cyan500       = color.RGBA{0x00, 0xbc, 0xd4, 0xff} // rgb(0, 188, 212)\n    Cyan600       = color.RGBA{0x00, 0xac, 0xc1, 0xff} // rgb(0, 172, 193)\n    Teal400       = color.RGBA{0x26, 0xa6, 0x9a, 0xff} // rgb(38, 166, 154)\n    Teal500       = color.RGBA{0x00, 0x96, 0x88, 0xff} // rgb(0, 150, 136)\n    Teal600       = color.RGBA{0x00, 0x89, 0x7b, 0xff} // rgb(0, 137, 123)\n    Green400      = color.RGBA{0x66, 0xbb, 0x6a, 0xff} // rgb(102, 187, 106)\n    Green500      = color.RGBA{0x4c, 0xaf, 0x50, 0xff} // rgb(76, 175, 80)\n    Green600      = color.RGBA{0x43, 0xa0, 0x47, 0xff} // rgb(67, 160, 71)\n    LightGreen400 = color.RGBA{0x9c, 0xcc, 0x65, 0xff} // rgb(156, 204, 101)\n    LightGreen500 = color.RGBA{0x8b, 0xc3, 0x4a, 0xff} // rgb(139, 195, 74)\n    LightGreen600 = color.RGBA{0x7c, 0xb3, 0x42, 0xff} // rgb(124, 179, 66)\n    Lime400       = color.RGBA{0xd4, 0xe1, 0x57, 0xff} // rgb(212, 225, 87)\n    Lime500       = color.RGBA{0xcd, 0xdc, 0x39, 0xff} // rgb(205, 220, 57)\n    Lime600       = color.RGBA{0xc0, 0xca, 0x33, 0xff} // rgb(192, 202, 51)\n    Yellow500     = color.RGBA{0xff, 0xeb, 0x3b, 0xff} // rgb(255, 235, 59)\n    Yellow600     = color.RGBA{0xfd, 0xd8, 0x35, 0xff} // rgb(253, 216, 53)\n    Yellow700     = color.RGBA{0xfb, 0xc0, 0x2d, 0xff} // rgb(251, 192, 45)\n    Amber400      = color.RGBA{0xff, 0xca, 0x28, 0xff} // rgb(255, 202, 40)\n    Amber500      = color.RGBA{0xff, 0xc1, 0x07, 0xff} // rgb(255, 193, 7)\n    Amber600      = color.RGBA{0xff, 0xb3, 0x00, 0xff} // rgb(255, 179, 0)\n    Orange400     = color.RGBA{0xff, 0xa7, 0x26, 0xff} // rgb(255, 167, 38)\n    Orange500     = color.RGBA{0xff, 0x98, 0x00, 0xff} // rgb(255, 152, 0)\n    Orange600     = color.RGBA{0xfb, 0x8c, 0x00, 0xff} // rgb(251, 140, 0)\n    DeepOrange400 = color.RGBA{0xff, 0x70, 0x43, 0xff} // rgb(255, 112, 67)\n    DeepOrange500 = color.RGBA{0xff, 0x57, 0x22, 0xff} // rgb(255, 87, 34)\n    DeepOrange600 = color.RGBA{0xf4, 0x51, 0x1e, 0xff} // rgb(244, 81, 30)\n    Brown400      = color.RGBA{0x8d, 0x6e, 0x63, 0xff} // rgb(141, 110, 99)\n    Brown500      = color.RGBA{0x79, 0x55, 0x48, 0xff} // rgb(121, 85, 72)\n    Brown600      = color.RGBA{0x6d, 0x4c, 0x41, 0xff} // rgb(109, 76, 65)\n    Grey400       = color.RGBA{0xbd, 0xbd, 0xbd, 0xff} // rgb(189, 189, 189)\n    Grey500       = color.RGBA{0x9e, 0x9e, 0x9e, 0xff} // rgb(158, 158, 158)\n    Grey600       = color.RGBA{0x75, 0x75, 0x75, 0xff} // rgb(117, 117, 117)\n    BlueGrey400   = color.RGBA{0x78, 0x90, 0x9c, 0xff} // rgb(120, 144, 156)\n    BlueGrey500   = color.RGBA{0x60, 0x7d, 0x8b, 0xff} // rgb(96, 125, 139)\n    BlueGrey600   = color.RGBA{0x54, 0x6e, 0x7a, 0xff} // rgb(84, 110, 122)\n)\n\n// Map of Color Names to color\nvar Map = make(map[string][3]color.RGBA)\n\n// Multiple init funcs are allowed\nfunc init() {\n    Map["red"] = [3]color.RGBA{Red400, Red500, Red600}\n    Map["pink"] = [3]color.RGBA{Pink400, Pink500, Pink600}\n    Map["purple"] = [3]color.RGBA{Purple400, Purple500, Purple600}\n    Map["deeppurple"] = [3]color.RGBA{DeepPurple400, DeepPurple500, DeepPurple600}\n    Map["indigo"] = [3]color.RGBA{Indigo400, Indigo500, Indigo600}\n    Map["blue"] = [3]color.RGBA{Blue400, Blue500, Blue600}\n    Map["lightblue"] = [3]color.RGBA{LightBlue400, LightBlue500, LightBlue600}\n    Map["cyan"] = [3]color.RGBA{Cyan400, Cyan500, Cyan600}\n    Map["teal"] = [3]color.RGBA{Teal400, Teal500, Teal600}\n    Map["green"] = [3]color.RGBA{Green400, Green500, Green600}\n    Map["lime"] = [3]color.RGBA{Lime400, Lime500, Lime600}\n    Map["yellow"] = [3]color.RGBA{Yellow500, Yellow600, Yellow700}\n    Map["amber"] = [3]color.RGBA{Amber400, Amber500, Amber600}\n    Map["orange"] = [3]color.RGBA{Orange400, Orange500, Orange600}\n    Map["deeporange"] = [3]color.RGBA{DeepOrange400, DeepOrange500, DeepOrange600}\n    Map["brown"] = [3]color.RGBA{Brown400, Brown500, Brown600}\n    Map["grey"] = [3]color.RGBA{Grey400, Grey500, Grey600}\n    Map["bluegrey"] = [3]color.RGBA{BlueGrey400, BlueGrey500, BlueGrey600}\n}\n\n// rootCmd represents the base command when called without any subcommands\nvar rootCmd = &cobra.Command{\n    Use:   "Hero image creating utility",\n    Short: "Hero creates banner images quickly",\n    RunE: func(cmd *cobra.Command, args []string) error {\n\n        // Create the picture\n        pic := image.NewRGBA(image.Rect(0, 0, width, height))\n\n        // Create the file\n        outFile, err := os.Create(out)\n        if err != nil {\n            return err\n        }\n\n        err = setImageColor(pic, &bgColor)\n        if err != nil {\n            return err\n        }\n\n        err = addIcons(pic, icons, image.Point{iconsize, iconsize})\n        if err != nil {\n            return err\n        }\n\n        // Encode & Write the file\n        err = png.Encode(outFile, pic)\n        if err != nil {\n            return err\n        }\n        return nil\n    },\n}\n\n// Execute adds all child commands to the root command and sets flags appropriately.\n// This is called by main.main(). It only needs to happen once to the rootCmd.\nfunc Execute() {\n    if err := rootCmd.Execute(); err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n}\n\nfunc init() {\n    rootCmd.PersistentFlags().StringVarP(&out, "output", "o", "./hero.png", "File to output")\n    rootCmd.PersistentFlags().StringVarP(&bgColor, "color", "c", "red", "Background color")\n    rootCmd.PersistentFlags().StringArrayVarP(&icons, "icons", "i", []string{}, "Icons")\n    rootCmd.PersistentFlags().IntVarP(&width, "width", "x", 960, "Max x coordinate of the hero - width of the hero")\n    rootCmd.PersistentFlags().IntVarP(&height, "height", "y", 480, "Max y coordinate of the hero - height of the hero")\n    rootCmd.PersistentFlags().IntVarP(&iconsize, "iconsize", "s", 300, "Width and height of the incons on the hero")\n}\n\ntype line struct {\n    p1 image.Point\n    p2 image.Point\n}\n\n// setImageColor sets the background color of an image\nfunc setImageColor(pic *image.RGBA, bgColor *string) error {\n\n    width := pic.Bounds().Max.X\n    height := pic.Bounds().Max.Y\n\n    leftLine := line{image.Point{width / 4, 0}, image.Point{width / 20, height}}\n    rightLine := line{image.Point{width, height - 2*height/3}, image.Point{width - width/3, height}}\n\n    colors, err := getColor(bgColor)\n    if err != nil {\n        return err\n    }\n\n    leftColor := colors[0]\n    middleColor := colors[1]\n    rightColor := colors[2]\n\n    // Update the colour of each pixel\n    for x := pic.Bounds().Min.X; x < pic.Bounds().Max.X; x++ {\n        for y := pic.Bounds().Min.Y; y < pic.Bounds().Max.Y; y++ {\n\n            p := image.Point{x, y}\n            if isLeftOfLine(leftLine, p) {\n                pic.Set(x, y, leftColor)\n            } else if isRightOfLine(rightLine, p) {\n                pic.Set(x, y, rightColor)\n            } else {\n                pic.Set(x, y, middleColor)\n            }\n        }\n    }\n    return nil\n}\n\n// getColor gets a RGBA color\nfunc getColor(colorName *string) ([3]color.RGBA, error) {\n    colors, ok := Map[*colorName]\n    if !ok {\n        return [3]color.RGBA{}, fmt.Errorf("Color %s could not be found", *colorName)\n    }\n    return colors, nil\n}\n\n// isRightOfLine checks if a point is to the right of the line\nfunc isRightOfLine(l line, p image.Point) bool {\n    return !isLeftOfLine(l, p)\n}\n\n// isLeftOfLine checks if a point is to the left of the line\nfunc isLeftOfLine(l line, p image.Point) bool {\n    d := (p.X-l.p1.X)*(l.p2.Y-l.p1.Y) - (p.Y-l.p1.Y)*(l.p2.X-l.p1.X)\n    return d < 0\n}\n\n// addIcons add icons to the pic\nfunc addIcons(pic *image.RGBA, iconPaths []string, iconSize image.Point) error {\n\n    width := pic.Bounds().Max.X\n    height := pic.Bounds().Max.Y\n\n    numIcons := len(iconPaths)\n    horizonalPaddingNum := numIcons + 1\n    paddingWidth := (width - iconSize.Y*numIcons) / horizonalPaddingNum\n\n    for i, iconPath := range iconPaths {\n        icon, err := readIcon(&iconPath)\n        if err != nil {\n            return err\n        }\n        resizedIcon, err := resizeIcon(&icon, iconSize)\n        if err != nil {\n            return err\n        }\n\n        diff := iconSize.Sub(resizedIcon.Bounds().Max).Div(2)\n        offset := image.Pt(paddingWidth+iconSize.X*i+paddingWidth*i, height/2-iconSize.Y/2).Add(diff)\n        addIconToPic(pic, resizedIcon, offset)\n    }\n    return nil\n}\n\n// readIcon reads in the btyes of a given file\nfunc readIcon(iconPath *string) ([]byte, error) {\n\n    inBuf, err := ioutil.ReadFile(*iconPath)\n    if err != nil {\n        return nil, err\n    }\n    return inBuf, nil\n}\n\n// resizeIcon resizes the file\nfunc resizeIcon(icon *[]byte, iconSize image.Point) (image.Image, error) {\n    options := vips.Options{\n        Width:        iconSize.X,\n        Height:       iconSize.Y,\n        Crop:         false,\n        Extend:       vips.EXTEND_WHITE,\n        Interpolator: vips.BILINEAR,\n        Gravity:      vips.CENTRE,\n        Quality:      100,\n        Format:       vips.PNG,\n    }\n\n    buf, err := vips.Resize(*icon, options)\n    if err != nil {\n        return nil, err\n    }\n\n    resizedIcon, _, err := image.Decode(bytes.NewReader(buf))\n    if err != nil {\n        return nil, err\n    }\n\n    return resizedIcon, nil\n}\n\n// addIconToPic adds the icon to the picture\nfunc addIconToPic(pic draw.Image, icon image.Image, offset image.Point) {\n    draw.Draw(pic, icon.Bounds().Add(offset), icon, image.ZP, draw.Over)\n}\n\n')))}Zn.isMDXComponent=!0;const et={"../../../posts/And God said let there be light.mdx":Ee,"../../../posts/Books to read in 2020.mdx":_e,"../../../posts/Come to the darkside.mdx":He,"../../../posts/Deploying Docker on Cloud Foundry.mdx":ze,"../../../posts/Divide and Conquer.mdx":Ve,"../../../posts/Health checks.mdx":$e,"../../../posts/Here take this, it's a placebo!.mdx":Ze,"../../../posts/Inaugural post.mdx":tn,"../../../posts/It takes 21 days to form a habit.mdx":rn,"../../../posts/Javascript's own ThreadLocal.mdx":cn,"../../../posts/Managing the world's most valuable resource.mdx":un,"../../../posts/Metadata is the new meta.mdx":gn,"../../../posts/Microservices with GoKit.mdx":bn,"../../../posts/My body is a temple.mdx":vn,"../../../posts/My type(script) of code.mdx":Tn,"../../../posts/One month at a time.mdx":An,"../../../posts/Piece of mind.mdx":Sn,"../../../posts/Small margins make the difference.mdx":Mn,"../../../posts/So it begins.mdx":jn,"../../../posts/Stand up straight with your shoulders back.mdx":qn,"../../../posts/State of the pagination.mdx":Fn,"../../../posts/Task, Microtasks & Automobiles.mdx":Un,"../../../posts/The little things.mdx":Yn,"../../../posts/The mind wanders.mdx":Kn,"../../../posts/You're my Hero.mdx":Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",title:"You're my Hero",author:"Daniel Sinnott",imageurl:"https://i.imgur.com/ZVaDnJx.png",id:22,tags:["Technical","Golang"],date:"Fri, 24th Aug 2018",created:Qn,default:Zn})},nt=Object.keys(et).map((e=>{const n=et[e];return{Post:n.default,id:n.id,title:n.title,imageurl:n.imageurl,author:n.defaulauthort,tags:n.tags,date:n.date,created:n.created}})),tt=()=>nt.sort(((e,n)=>new Date(n.created).getTime()-new Date(e.created).getTime())),ot="/",at=e=>`/blog/${e}`,rt="/about",it=p.exports.lazy((()=>Ae((()=>import("./BlogList.09f3af81.js")),["/blog/assets/BlogList.09f3af81.js","/blog/assets/vendor.741606fd.js","/blog/assets/Chip.ef3bc16c.js","/blog/assets/Page.bb964748.js"]))),lt=p.exports.lazy((()=>Ae((()=>import("./About.05b1942a.js")),["/blog/assets/About.05b1942a.js","/blog/assets/vendor.741606fd.js","/blog/assets/Page.bb964748.js"]))),st=p.exports.lazy((()=>Ae((()=>import("./BlogPost.f5da3399.js")),["/blog/assets/BlogPost.f5da3399.js","/blog/assets/vendor.741606fd.js","/blog/assets/Page.bb964748.js","/blog/assets/Chip.ef3bc16c.js"]))),ct=p.exports.lazy((()=>Ae((()=>import("./404.c4991e4b.js")),["/blog/assets/404.c4991e4b.js","/blog/assets/vendor.741606fd.js","/blog/assets/Page.bb964748.js"]))),pt=nt.map((e=>({path:at(e.id),exact:!0,component:()=>m.createElement(st,l({},e))}))),dt=[{path:ot,exact:!0,component:it},{path:rt,exact:!0,component:lt},...pt,{path:void 0,component:ct}],ut=c(v).withConfig({displayName:"Routes__StyledTransitionGroup",componentId:"sc-1kzzr7g-0"})(["display:flex;flex:1;flex-direction:row;overflow-x:hidden;"]);var ht=k((({location:e})=>m.createElement(ut,{className:"transition-group"},m.createElement(N,{key:e.key,timeout:{enter:150},classNames:"fade",exit:!1},m.createElement(p.exports.Suspense,{fallback:m.createElement(De,null)},m.createElement(T,null,dt.map(((e,n)=>m.createElement(C,{key:n,path:e.path,exact:e.exact,component:e.component})))))))));const mt=c.div.withConfig({displayName:"styled__Header",componentId:"sc-1lprjqa-0"})(["background:url(","),linear-gradient(90deg,#2d74da,#12a3b4);height:",";position:fixed;top:0;left:0;right:0;box-shadow:0 4px 5px 0 rgba(0,0,0,0.14),0 2px 9px 1px rgba(0,0,0,0.12),0 4px 2px -2px rgba(0,0,0,0.2);display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:space-between;align-items:center;align-content:center;z-index:1;padding:",";"],"/blog/assets/bg-shapes.51f499f5.svg","56px",(e=>`0 ${e.theme.spacing}px`)),gt=c.div.withConfig({displayName:"styled__Main",componentId:"sc-1lprjqa-1"})(["display:flex;min-height:calc(100% - ",");margin-top:",";"],"56px","56px"),ft=c(I).withConfig({displayName:"Link__StyledNavLink",componentId:"sc-c2iwyf-0"})(["pointer-events:",";text-decoration:",";"],(({disabled:e})=>e?"none":"auto"),(({noDecorate:e})=>e?"none":"initial")),yt=k((({className:e,activeClassName:n,exact:t,onClick:o,title:a,to:r,children:i,disabled:l,location:s,noDecorate:c,target:p,rel:d})=>m.createElement(ft,{className:e,activeClassName:n,exact:t,onClick:o,title:a,disabled:l,noDecorate:c,target:p,to:{pathname:r,search:s.search,state:{from:s.pathname}},rel:Array.isArray(d)?d.join(" "):d},i))),bt=({title:e="Sinnott",children:n,left:t,right:o})=>m.createElement(se,{height:"full",width:"full",spacing:"none"},m.createElement(mt,null,m.createElement(se,{align:"center",width:"full"},t,m.createElement(yt,{to:ot,noDecorate:!0},m.createElement(j,null,e)),o)),m.createElement(gt,null,n)),wt=S.red,xt=S.blue,vt=S.orange,kt=S.grey,Nt={breakpoints:{xs:640,sm:768,md:1024,lg:1280,xl:1920},typography:{fontSize:16,fontFamily:["HAvenir","-apple-system","BlinkMacSystemFont","Segoe UI","Roboto","Helvetica","Arial","sans-serif","Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"].join(","),fontWeight:400},shadow:{z0:"0px 1px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 2px 0px rgba(0, 0, 0, 0.12)",z1:"0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)",z2:"0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12)",z3:"0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12);"},transition:"130ms ease-in",palette:{primary:{lighter:xt[50],main:xt[500],darker:xt[700]},secondary:{lighter:vt[50],main:vt[500],darker:vt[700]},warning:{lighter:wt[50],main:wt[500],darker:wt[700]},background:{lighter:"#FFF",main:kt[200],darker:kt[300]},text:{lighter:kt[600],main:kt[900],darker:"#000"},grey:{lighter:"rgba(0,0,0,0.1)",main:kt[500],darker:kt[700]}},spacing:8},Tt=l({},Nt);var Ct,It;Ct=Nt,It={palette:{background:{lighter:kt[700],main:kt[800],darker:kt[900]},text:{lighter:kt[50],main:kt[100],darker:kt[300]}}},A(Ct,It);const At=P`
  *, *::before, *::after {
     box-sizing: border-box;
    }
  html {
    background: ${e=>`${e.theme.palette.background.darker}`};
  }
`;var Pt,Rt=(e=>()=>m.createElement(Q,null,m.createElement(e,null)))((e=>()=>(Z(),m.createElement(R,{theme:Tt},m.createElement(At,null),m.createElement(e,null))))((Pt=()=>m.createElement(B,{basename:"/blog/"},m.createElement(bt,null,m.createElement(ht,null))),()=>m.createElement(w,{components:Te},m.createElement(Pt,null)))));D.render(m.createElement(Rt,null),document.getElementById("root"));export{se as B,de as C,E as H,me as I,yt as L,ye as S,q as T,V as a,ve as b,M as c,tt as u};
