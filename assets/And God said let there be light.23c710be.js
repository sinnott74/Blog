var e=Object.defineProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,o=(t,n,a)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a;import"./vendor.c97b08d0.js";import{N as r}from"./mdx-react.modern.82e5f5db.js";const s="And God said let there be light",l="Daniel Sinnott",i="https://i.imgur.com/SIZ0oeR.png",c=4,h=["Monthly Challenge","January","Technical","ReactJS","NodeJS"],p="Thu, 1st Feb 2018",u=new Date(1517574696533);function d(e){var s=e,{components:l}=s,i=((e,o)=>{var r={};for(var s in e)n.call(e,s)&&o.indexOf(s)<0&&(r[s]=e[s]);if(null!=e&&t)for(var s of t(e))o.indexOf(s)<0&&a.call(e,s)&&(r[s]=e[s]);return r})(s,["components"]);return r("wrapper",((e,r)=>{for(var s in r||(r={}))n.call(r,s)&&o(e,s,r[s]);if(t)for(var s of t(r))a.call(r,s)&&o(e,s,r[s]);return e})({components:l},i),r("p",null,"As outlined in the post ",r("a",{href:"/blog/3",parentName:"p"},"So it begins")," (January Challege), the technical challenge for this month\nwas to get this blog up & running. My deliverable was a blogging web app that I could use to write,\nedit & read blogposts, but build in a way that I could progressively enhance."),r("p",null,"The ",r("a",{href:"https://github.com/sinnott74/sinnott",parentName:"p"},"source for this site")," can be found on Github."),r("hr",null),r("h2",null,"The Architecture"),r("p",null,"I chose the the classic client server model, with the two being fully separated to allow me to\ndevelop each independently. Date storage was of great concern over the month. I'd like to be able\nlook back on these post in the distant future & cringe, and also for these posts to be available to\nothers. A database hosted in the cloud was the conclusion."),r("hr",null),r("h2",null,"Client"),r("p",null,"In 2017 I spent a good chunk of time working with ",r("a",{href:"https://dojotoolkit.org/",parentName:"p"},"Dojo")," for work & ",r("a",{href:"https://www.polymer-project.org/",parentName:"p"},"PolymerJS")," in my spare time,\nbut the goal was to learn new things and I was becoming very frustrated with Polymer's constant API\n& concept changes. After a bit a research, ",r("a",{href:"https://reactjs.org/",parentName:"p"},"ReactJS"),", ",r("a",{href:"https://vuejs.org/",parentName:"p"},"VueJS")," & ",r("a",{href:"https://angularjs.org/",parentName:"p"},"AngularJS")," were the front running\nweb frameworks that I could get up and running with quickly & seemed to have a promising future\n(although given the rate of change in the web space, these could be obsolete by the end of the\nmonth). I had spent some time in 2016 learning the original AngularJS framework, so I still have a\nbad taste in my mouth over the compete rewrite & api breaking changes for Angular 2+, so that was\nquickly ruled out. Internally in work, React was being chosen for a large new project so it made to\nmost sense for me to become familiar with it."),r("p",null,"React is a javascript library for building user interfaces. It's declarative, component-based & uses\na one way data flow model. It was originally developed internally at facebook, but put into mass\nproduction at Instagram."),r("hr",null),r("h3",null,"State"),r("p",null,"I quickly set out developing my ",r("a",{href:"https://developers.google.com/web/updates/2015/11/app-shell",parentName:"p"},"App Shell"),". React's one way data flow model meant that state should\nbe stored at the highest needed point in the tree and flow downwards, but while creating my\napplication components like the NavBar, ToolBar & OptionsMenu, I realised that storing most state at\nthe root component level won't scale."),r("p",null,r("a",{href:"https://redux.js.org/",parentName:"p"},"Redux")," to the rescue. Redux is a predictable state container based on Facebook's Flux architecture.\nIt's state is tightly controller & can only be updated using Redux's infrastructure. Actions, which\ncan be thought of as events, are dispatched and the reducer associated with each action then has\npermission to update the application state/store.Here's a simple example used by my SideNav."),r("p",null,"Action is defined as:"),r("pre",null,r("code",{className:"language-javascript",parentName:"pre"},'export const OPEN_SIDENAV = "OPEN_SIDENAV";\nexport function openSideNav() {\n    return {\n        type: OPEN_SIDENAV,\n    };\n}\n')),r("p",null,"My Header is connected to redux so it can dispatch actions"),r("pre",null,r("code",{className:"language-jsx",parentName:"pre"},"import React from 'react';\nimport { connect } from 'react-redux'\nimport { openSideNav } from '../../actions/sidenav';\nclass Header extends React.Component {\n....\n  render() {\n    return (\n     ...\n       <Button icon className=\"header__menu\"  onClick={this.props.handleMenuButtonClick}>menu</Button>\n     ...\n    )\n  }\n}\nconst mapDispatchToProps = {\n  handleMenuButtonClick: openSideNav\n}\nexport default connect(null, mapDispatchToProps)(Header)\n\n")),r("p",null,"The associated reducer updates the Redux store:"),r("pre",null,r("code",{className:"language-javascript",parentName:"pre"},"import { OPEN_SIDENAV } from '../../actions/sidenav';\n let initialState = {\n   opened : false\n }\n const sidenav = (state = initialState, action)  => {\n  switch (action.type) {\n    case OPEN_SIDENAV:\n      return {\n        ...state,\n        opened: true\n    default:\n      return state;\n  }\n}\nexport default sidenav;\n\n")),r("p",null,"Finally we tell the SideNav to subscribe to changes to the opened property:"),r("pre",null,r("code",{className:"language-jsx",parentName:"pre"},"import React from 'react';\nimport { connect } from \"react-redux\";\nclass SideNav extends React.Component {\n...\n}\nconst mapStateToProps = (state) =>({\n  opened: state.ui.sidenav.opened\n})\nexport default connect(mapStateToProps, null)(SideNav)\n")),r("p",null,"When the opened property changes, react will re-render my sidenav & open it"),r("hr",null),r("h3",null,"Build System"),r("p",null,"It important for any website to have a good user experience. UX is mostly focuses on user interface\n& user interaction, but it also encompasses site performance & working on as many devices as\npossible (think of it as casting a bigger net to catch more fish). You build system has a big\ninfluence on those final two points. A site should only download the resources needed to run that\nsite at that time. Downloading & running unnecessary delays the time to first paint & time to first\ninteraction and because of that ruins the experience."),r("p",null,"Most modern javascript library are written in the new ES2015+ syntax with feature such as classes or\nPromises. These feature won't work on older browsers. New syntax code needs to be transpiled in the\nolder syntax. This transpilation would need to happen a build time."),r("p",null,r("a",{href:"https://webpack.js.org/",parentName:"p"},"Webpack")," & React go together like peas & carrots (Forrest Gump reference). Webpack is a resource\nbundler. It takes all the files that is necessary to run your application and bundles them together.\nIt supports ",r("a",{href:"https://webpack.js.org/guides/tree-shaking/",parentName:"p"},"tree shaking")," to eliminate dead unnecessary code, and has a plugin architecture to add\nother tools to your build process such as javascript translation with ",r("a",{href:"https://babeljs.io/",parentName:"p"},"Babel"),"."),r("p",null,"Webpack was the obvious choice. Although there's lot of tutorials on webpack, its fairly confusing\nto set up. I had to guts of it fully up and running in the first week. I had all my required loaders\nconverting my assets & I have hot reloading configured in development mode. However, I wasn't happy\nwith the amount of dependencies in my package.json just for my build system. On the 20th day I\ndecided to convert my app to a Create React App (see ",r("a",{href:"https://github.com/sinnott74/Sinnott/commit/d66341b17a9fe86b79862660dc7cd5216298874c",parentName:"p"},"commit"),"), which I had initially shunned as it\nhid all the complexity of setting up webpack. It reduced the amount of dependencies my web app had &\nalso offloaded the maintenance of my build system to Facebook."),r("hr",null),r("h3",null,"Routing"),r("p",null,r("a",{href:"https://reacttraining.com/react-router/",parentName:"p"},"React Router")," was chosen an my client side router. It plays nicely with redux & when used in\nconjunction with ",r("a",{href:"https://github.com/thejameskyle/react-loadable",parentName:"p"},"React Loadable"),", allowed my code to be split based on route. The code for me\nentire application didn't need to be loaded, only what was needed for a given route."),r("p",null,"The example below is code taken from my routes configuration. It says tells Webpack to split the\ncode & gives it the name specified by webpackChunkName"),r("pre",null,r("code",{className:"language-jsx",parentName:"pre"},'import React from "react";\nimport { Route, Switch } from "react-router";\nimport Loadable from "react-loadable";\nimport Spinner from "./components/Spinner";\nconst LoadableHomePage = Loadable({\n    loader: () => import(/* webpackChunkName: "indexPage" */ "./pages/HomePage"),\n    loading: Spinner,\n});\nconst LoadableBlogListPage = Loadable({\n    loader: () => import(/* webpackChunkName: "BlogListPage" */ "./pages/BlogListPage"),\n    loading: Spinner,\n});\nconst Routes = (props) => {\n    return (\n        <Switch className="main">\n            <Route exact path="/" component={LoadableHomePage} />\n            <Route exact path="/blog" component={LoadableBlogListPage} />\n        </Switch>\n    );\n};\nexport default Routes;\n')),r("hr",null),r("h3",null,"UI Component Library"),r("p",null,"I was spending too much of my time developing UI components & decided that it would be more prudent\nto use a UI Component Library. I quite enjoy the look & feel of Google's ",r("a",{href:"https://material.io/",parentName:"p"},"Material Design"),". This\ngave me the options of:"),r("ul",null,r("li",{parentName:"ul"},"Material-UI"),r("li",{parentName:"ul"},"MUI"),r("li",{parentName:"ul"},"React-MD")),r("p",null,"Out of the above 3 React-MD was the clear winner, I had all the components I felt I'd need & it was\nby far the smallest library."),r("hr",null),r("h3",null,"Blog Syntax"),r("p",null,"With all of the above in place I had my worker web app. The final hurdle I had to face was the\nformat I'd let users write their blog posts."),r("p",null,"Plain text would be too simple & unappealing visually. Letting HTML or a subset of HTML would allow\nthe nightmare of ",r("a",{href:"https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)",parentName:"p"},"XSS"),". I settled on allowing the users to write their blogs in MarkDown. It allowed\nfor some formatting without the headache of trying to catch unwanted code."),r("p",null,"The chosen library was ",r("a",{href:"https://www.npmjs.com/package/marked",parentName:"p"},"Marked"),". A highly performance & small markdown parser and compiler."),r("hr",null),r("h3",null,"Server Interaction"),r("p",null,"The client would interact with the server in a Rest-like manner. Sending GET, POST, PUT & DELETE\nrequests for resources."),r("hr",null),r("h2",null,"Server"),r("p",null,"There lots of options when it comes to serverside development. The main drivers for my selection\nwere:"),r("ul",null,r("li",{parentName:"ul"},"Learn somthing"),r("li",{parentName:"ul"},"Speed of development"),r("li",{parentName:"ul"},"Can be run for free or at least cheap")),r("p",null,"I decided to choose ",r("a",{href:"https://nodejs.org/",parentName:"p"},"NodeJs")," with ",r("a",{href:"https://expressjs.com/",parentName:"p"},"ExpressJs"),". Keeping the client & server using the same language\nshould allow me to share code between the 2 if needed."),r("hr",null),r("h3",null,"Data Layer"),r("p",null,"As my database I selected [Postresql] as I could avail of a free Tiny Turtle on ",r("a",{href:"https://www.elephantsql.com",parentName:"p"},"ElephantSQL"),", until\ni need a larger memory allocation. The module ",r("a",{href:"https://www.npmjs.com/package/pg",parentName:"p"},"PG")," gave me fine grained control over the SQL\nstatements sent to the server. I experimented with KnexJS but didn't like its transaction\ninfrastructure, mainly due to Node's callback based application flow. More on that in Transactions\nbelow. PG, along with the module SQL, gave me Parameterized query to help prevent SQL Injection."),r("hr",null),r("h3",null,"Transactions"),r("p",null,"It was frustrating coming for a Java world, where the concept of ThreadLocal make it easy to pass\ninformation around the system for a single transaction without having to include it in every method\ncall. The asynchronous nature of Node doesn't allow for this. I experimented with Continuation-Local\nStorage last year but found it very hit & miss. The context can easily be lost. Roll forward to this\nyear & the release of the experimental Node 8 API AsyncHooks allowed for this problem to be solved\nby the library ",r("a",{href:"https://github.com/vicanso/async-local-storage/",parentName:"p"},"async-local-storage"),". It wraps each asynchronous & keeps track of which call came\nfrom where, allowing for a creation of what is analogous to Thread in java. This allowed me to\nrequest a client for the Postgres pool, start a transaction & use that transaction for every\ndatabase call in a single HTTP request without having to pass a client or transaction object around."),r("p",null,"Here's an example of how I'm handling my transactions. It's using async await to handle promises in\na more readable way."),r("pre",null,r("code",{className:"language-javascript",parentName:"pre"},'const als = require("./async-local-storage");\nconst uuidV4 = require("uuid/v4");\nconst database = require("../core/database"); // module which configures the DB connection\nconst expressTransactionMiddleware = async (req, res, next) => {\n    const client = await database.connect();\n    await client.query("BEGIN");\n    als.set("transactionID", uuidV4());\n    als.set("transaction", client);\n    await next();\n};\n')),r("p",null,"It's important to COMMIT or ROLLBACK the transaction and release the client back to the pool at the\nend of the request:"),r("pre",null,r("code",{className:"language-javascript",parentName:"pre"},"const transactionSuccessMiddleware = async () => {\n    let client = als.get('transaction')\n    await client.query('COMMIT');\n    await client.release();\n}\n\nconst async transactionFailureMiddleware = async () =>{\n    let client = als.get('transaction')\n    await client.query('ROLLBACK');\n    await client.release();\n  }\n")),r("hr",null),r("h3",null,"Authentication"),r("p",null,"Users should only be allowed to edit posts which they own... Sounds obvious! To implement this I\ncould to use JsonWebToken instead of session. JWT allows to the application scale horizontally as\nit's completely stateless. JWT was used in conjunction with PassportJS. The idea behind this is that\nby using passport now, I'd lessen the pain of changing my authentication to use OAuth by Github,\nGoogle or Facebook etc."),r("hr",null),r("h3",null,"Database"),r("p",null,"As mentioned above in Server - Data Layer. I'm using PSQL for my database. I haven't chosen an tools\nto perform maintenance or migration, which will cause me some pain in the future but its a challenge\nI'm looking forward to. Production data is incredibly important. Now that I've 'Officially' released\nthe first working version of the Blog, I can't just drop all the tables whenever I'd like & rebuild.\nI'm currently using a library called ",r("a",{href:"https://github.com/marcelklehr/toposort",parentName:"p"},"Toposort"),", which sorts directed acyclic graphs, to determine\nwhich database tables would need to be created first if rebuilding from scratch. I'm using it to\norder the tables by foreign keys, creation whichever tables need to be created first so that they\ncan be referenced by another table."),r("hr",null),r("h2",null,"Let the mind dumping begin"),r("p",null,"I'm now free to write whatever dribble I'd like up here, but of course you won't be forced to read\nit (...yet)"),r("p",null,"The month was a huge success from a technological point of view. The deadline forced me to work\ntoward a goal & not get distracted by other projects or to wait around thinking about / looking for\na better way to implement something."),r("p",null,"The best architecture is the one that works Daniel"))}d.isMDXComponent=!0;export default d;export{l as author,u as created,p as date,c as id,i as imageurl,h as tags,s as title};
